webpackJsonp([0],{

/***/ "./node_modules/css-loader/index.js?{\"importLoaders\":1}!./node_modules/postcss-loader/index.js!./src/public/styles/react-datepicker.css":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow {\n  margin-left: -8px;\n  position: absolute;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow, .react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle::before, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before {\n  -webkit-box-sizing: content-box;\n          box-sizing: content-box;\n  position: absolute;\n  border: 8px solid transparent;\n  height: 0;\n  width: 1px;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle::before, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before {\n  content: \"\";\n  z-index: -1;\n  border-width: 8px;\n  left: -8px;\n  border-bottom-color: #aeaeae;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle {\n  top: 0;\n  margin-top: -8px;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle::before {\n  border-top: none;\n  border-bottom-color: #f0f0f0;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle::before {\n  top: -1px;\n  border-bottom-color: #aeaeae;\n}\n\n.react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow {\n  bottom: 0;\n  margin-bottom: -8px;\n}\n\n.react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before {\n  border-bottom: none;\n  border-top-color: #fff;\n}\n\n.react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before {\n  bottom: -1px;\n  border-top-color: #aeaeae;\n}\n\n.react-datepicker-wrapper {\n  display: inline-block;\n  width: 100%;\n}\n\n.react-datepicker {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 0.8rem;\n  background-color: #fff;\n  color: #000;\n  border: 1px solid #aeaeae;\n  border-radius: 0.3rem;\n  display: inline-block;\n  position: relative;\n}\n\n.react-datepicker__triangle {\n  position: absolute;\n  left: 50px;\n}\n\n.react-datepicker-popper {\n  z-index: 1;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] {\n  margin-top: 10px;\n}\n\n.react-datepicker-popper[data-placement^=\"top\"] {\n  margin-bottom: 10px;\n}\n\n.react-datepicker-popper[data-placement^=\"right\"] {\n  margin-left: 8px;\n}\n\n.react-datepicker-popper[data-placement^=\"right\"] .react-datepicker__triangle {\n  left: auto;\n  right: 42px;\n}\n\n.react-datepicker-popper[data-placement^=\"left\"] {\n  margin-right: 8px;\n}\n\n.react-datepicker-popper[data-placement^=\"left\"] .react-datepicker__triangle {\n  left: 42px;\n  right: auto;\n}\n\n.react-datepicker__header {\n  text-align: center;\n  background-color: #f0f0f0;\n  border-bottom: 1px solid #aeaeae;\n  border-top-left-radius: 0.3rem;\n  border-top-right-radius: 0.3rem;\n  padding-top: 8px;\n  position: relative;\n}\n\n.react-datepicker__header--time {\n  padding-bottom: 8px;\n}\n\n.react-datepicker__year-dropdown-container--select,\n.react-datepicker__month-dropdown-container--select,\n.react-datepicker__year-dropdown-container--scroll,\n.react-datepicker__month-dropdown-container--scroll {\n  display: inline-block;\n  margin: 0 2px;\n}\n\n.react-datepicker__current-month,\n.react-datepicker-time__header {\n  margin-top: 0;\n  color: #000;\n  font-weight: bold;\n  font-size: 0.944rem;\n}\n\n.react-datepicker__navigation {\n  line-height: 1.7rem;\n  text-align: center;\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  width: 0;\n  border: 0.45rem solid transparent;\n  z-index: 1;\n}\n\n.react-datepicker__navigation--previous {\n  left: 10px;\n  border-right-color: #ccc;\n}\n\n.react-datepicker__navigation--previous:hover {\n  border-right-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--next {\n  right: 10px;\n  border-left-color: #ccc;\n}\n\n.react-datepicker__navigation--next--with-time:not(.react-datepicker__navigation--next--with-today-button) {\n  right: 80px;\n}\n\n.react-datepicker__navigation--next:hover {\n  border-left-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--years {\n  position: relative;\n  top: 0;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.react-datepicker__navigation--years-previous {\n  top: 4px;\n  border-top-color: #ccc;\n}\n\n.react-datepicker__navigation--years-previous:hover {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--years-upcoming {\n  top: -4px;\n  border-bottom-color: #ccc;\n}\n\n.react-datepicker__navigation--years-upcoming:hover {\n  border-bottom-color: #b3b3b3;\n}\n\n.react-datepicker__month-container {\n  float: left;\n}\n\n.react-datepicker__month {\n  margin: 0.4rem;\n  text-align: center;\n}\n\n.react-datepicker__time-container {\n  float: right;\n  border-left: 1px solid #aeaeae;\n}\n\n.react-datepicker__time-container--with-today-button {\n  display: inline;\n  border: 1px solid #aeaeae;\n  border-radius: 0.3rem;\n  position: absolute;\n  right: -72px;\n  top: 0;\n}\n\n.react-datepicker__time-container .react-datepicker__time {\n  position: relative;\n  background: white;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box {\n  width: 70px;\n  overflow-x: hidden;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list {\n  list-style: none;\n  margin: 0;\n  height: calc(195px + (1.7rem / 2));\n  overflow-y: scroll;\n  padding-right: 30px;\n  width: 100%;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item {\n  padding: 5px 10px;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item:hover {\n  cursor: pointer;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected {\n  background-color: #216ba5;\n  color: white;\n  font-weight: bold;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected:hover {\n  background-color: #216ba5;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled {\n  color: #ccc;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled:hover {\n  cursor: default;\n  background-color: transparent;\n}\n\n.react-datepicker__week-number {\n  color: #ccc;\n  display: inline-block;\n  width: 1.7rem;\n  line-height: 1.7rem;\n  text-align: center;\n  margin: 0.166rem;\n}\n\n.react-datepicker__week-number.react-datepicker__week-number--clickable {\n  cursor: pointer;\n}\n\n.react-datepicker__week-number.react-datepicker__week-number--clickable:hover {\n  border-radius: 0.3rem;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__day-names,\n.react-datepicker__week {\n  white-space: nowrap;\n}\n\n.react-datepicker__day-name,\n.react-datepicker__day,\n.react-datepicker__time-name {\n  color: #000;\n  display: inline-block;\n  width: 1.7rem;\n  line-height: 1.7rem;\n  text-align: center;\n  margin: 0.166rem;\n}\n\n.react-datepicker__day {\n  cursor: pointer;\n}\n\n.react-datepicker__day:hover {\n  border-radius: 0.3rem;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__day--today {\n  font-weight: bold;\n}\n\n.react-datepicker__day--highlighted {\n  border-radius: 0.3rem;\n  background-color: #3dcc4a;\n  color: #fff;\n}\n\n.react-datepicker__day--highlighted:hover {\n  background-color: #32be3f;\n}\n\n.react-datepicker__day--highlighted-custom-1 {\n  color: magenta;\n}\n\n.react-datepicker__day--highlighted-custom-2 {\n  color: green;\n}\n\n.react-datepicker__day--selected, .react-datepicker__day--in-selecting-range, .react-datepicker__day--in-range {\n  border-radius: 0.3rem;\n  background-color: #216ba5;\n  color: #fff;\n}\n\n.react-datepicker__day--selected:hover, .react-datepicker__day--in-selecting-range:hover, .react-datepicker__day--in-range:hover {\n  background-color: #1d5d90;\n}\n\n.react-datepicker__day--keyboard-selected {\n  border-radius: 0.3rem;\n  background-color: #2a87d0;\n  color: #fff;\n}\n\n.react-datepicker__day--keyboard-selected:hover {\n  background-color: #1d5d90;\n}\n\n.react-datepicker__day--in-selecting-range:not(.react-datepicker__day--in-range) {\n  background-color: rgba(33, 107, 165, 0.5);\n}\n\n.react-datepicker__month--selecting-range .react-datepicker__day--in-range:not(.react-datepicker__day--in-selecting-range) {\n  background-color: #f0f0f0;\n  color: #000;\n}\n\n.react-datepicker__day--disabled {\n  cursor: default;\n  color: #ccc;\n}\n\n.react-datepicker__day--disabled:hover {\n  background-color: transparent;\n}\n\n.react-datepicker__input-container {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n}\n\n.react-datepicker__year-read-view,\n.react-datepicker__month-read-view {\n  border: 1px solid transparent;\n  border-radius: 0.3rem;\n}\n\n.react-datepicker__year-read-view:hover,\n.react-datepicker__month-read-view:hover {\n  cursor: pointer;\n}\n\n.react-datepicker__year-read-view:hover .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__year-read-view:hover .react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-read-view:hover .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view:hover .react-datepicker__month-read-view--down-arrow {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow {\n  border-top-color: #ccc;\n  float: right;\n  margin-left: 20px;\n  top: 8px;\n  position: relative;\n  border-width: 0.45rem;\n}\n\n.react-datepicker__year-dropdown,\n.react-datepicker__month-dropdown {\n  background-color: #f0f0f0;\n  position: absolute;\n  width: 50%;\n  left: 25%;\n  top: 30px;\n  z-index: 1;\n  text-align: center;\n  border-radius: 0.3rem;\n  border: 1px solid #aeaeae;\n}\n\n.react-datepicker__year-dropdown:hover,\n.react-datepicker__month-dropdown:hover {\n  cursor: pointer;\n}\n\n.react-datepicker__year-dropdown--scrollable,\n.react-datepicker__month-dropdown--scrollable {\n  height: 150px;\n  overflow-y: scroll;\n}\n\n.react-datepicker__year-option,\n.react-datepicker__month-option {\n  line-height: 20px;\n  width: 100%;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.react-datepicker__year-option:first-of-type,\n.react-datepicker__month-option:first-of-type {\n  border-top-left-radius: 0.3rem;\n  border-top-right-radius: 0.3rem;\n}\n\n.react-datepicker__year-option:last-of-type,\n.react-datepicker__month-option:last-of-type {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  border-bottom-left-radius: 0.3rem;\n  border-bottom-right-radius: 0.3rem;\n}\n\n.react-datepicker__year-option:hover,\n.react-datepicker__month-option:hover {\n  background-color: #ccc;\n}\n\n.react-datepicker__year-option:hover .react-datepicker__navigation--years-upcoming,\n.react-datepicker__month-option:hover .react-datepicker__navigation--years-upcoming {\n  border-bottom-color: #b3b3b3;\n}\n\n.react-datepicker__year-option:hover .react-datepicker__navigation--years-previous,\n.react-datepicker__month-option:hover .react-datepicker__navigation--years-previous {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__year-option--selected,\n.react-datepicker__month-option--selected {\n  position: absolute;\n  left: 15px;\n}\n\n.react-datepicker__close-icon {\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  display: inline-block;\n  height: 0;\n  outline: 0;\n  padding: 0;\n  vertical-align: middle;\n}\n\n.react-datepicker__close-icon::after {\n  background-color: #216ba5;\n  border-radius: 50%;\n  bottom: 0;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  content: \"\\D7\";\n  cursor: pointer;\n  font-size: 12px;\n  height: 16px;\n  width: 16px;\n  line-height: 1;\n  margin: -8px auto 0;\n  padding: 2px;\n  position: absolute;\n  right: 7px;\n  text-align: center;\n  top: 50%;\n}\n\n.react-datepicker__today-button {\n  background: #f0f0f0;\n  border-top: 1px solid #aeaeae;\n  cursor: pointer;\n  text-align: center;\n  font-weight: bold;\n  padding: 5px 0;\n  clear: left;\n}\n\n.react-datepicker__portal {\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.8);\n  left: 0;\n  top: 0;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  z-index: 2147483647;\n}\n\n.react-datepicker__portal .react-datepicker__day-name,\n.react-datepicker__portal .react-datepicker__day,\n.react-datepicker__portal .react-datepicker__time-name {\n  width: 3rem;\n  line-height: 3rem;\n}\n\n@media (max-width: 400px), (max-height: 550px) {\n  .react-datepicker__portal .react-datepicker__day-name,\n  .react-datepicker__portal .react-datepicker__day,\n  .react-datepicker__portal .react-datepicker__time-name {\n    width: 2rem;\n    line-height: 2rem;\n  }\n}\n\n.react-datepicker__portal .react-datepicker__current-month,\n.react-datepicker__portal .react-datepicker-time__header {\n  font-size: 1.44rem;\n}\n\n.react-datepicker__portal .react-datepicker__navigation {\n  border: 0.81rem solid transparent;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--previous {\n  border-right-color: #ccc;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--previous:hover {\n  border-right-color: #b3b3b3;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--next {\n  border-left-color: #ccc;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--next:hover {\n  border-left-color: #b3b3b3;\n}\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"importLoaders\":1}!./node_modules/postcss-loader/index.js!./src/styles/react-datepicker.css":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow {\n  margin-left: -8px;\n  position: absolute;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow, .react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle::before, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before {\n  -webkit-box-sizing: content-box;\n          box-sizing: content-box;\n  position: absolute;\n  border: 8px solid transparent;\n  height: 0;\n  width: 1px;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle::before, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before {\n  content: \"\";\n  z-index: -1;\n  border-width: 8px;\n  left: -8px;\n  border-bottom-color: #aeaeae;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle {\n  top: 0;\n  margin-top: -8px;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle, .react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle::before {\n  border-top: none;\n  border-bottom-color: #f0f0f0;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] .react-datepicker__triangle::before {\n  top: -1px;\n  border-bottom-color: #aeaeae;\n}\n\n.react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow {\n  bottom: 0;\n  margin-bottom: -8px;\n}\n\n.react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle, .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow, .react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before {\n  border-bottom: none;\n  border-top-color: #fff;\n}\n\n.react-datepicker-popper[data-placement^=\"top\"] .react-datepicker__triangle::before, .react-datepicker__year-read-view--down-arrow::before,\n.react-datepicker__month-read-view--down-arrow::before {\n  bottom: -1px;\n  border-top-color: #aeaeae;\n}\n\n.react-datepicker-wrapper {\n  display: inline-block;\n  width: 100%;\n}\n\n.react-datepicker {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 0.8rem;\n  background-color: #fff;\n  color: #000;\n  border: 1px solid #aeaeae;\n  border-radius: 0.3rem;\n  display: inline-block;\n  position: relative;\n}\n\n.react-datepicker__triangle {\n  position: absolute;\n  left: 50px;\n}\n\n.react-datepicker-popper {\n  z-index: 1;\n}\n\n.react-datepicker-popper[data-placement^=\"bottom\"] {\n  margin-top: 10px;\n}\n\n.react-datepicker-popper[data-placement^=\"top\"] {\n  margin-bottom: 10px;\n}\n\n.react-datepicker-popper[data-placement^=\"right\"] {\n  margin-left: 8px;\n}\n\n.react-datepicker-popper[data-placement^=\"right\"] .react-datepicker__triangle {\n  left: auto;\n  right: 42px;\n}\n\n.react-datepicker-popper[data-placement^=\"left\"] {\n  margin-right: 8px;\n}\n\n.react-datepicker-popper[data-placement^=\"left\"] .react-datepicker__triangle {\n  left: 42px;\n  right: auto;\n}\n\n.react-datepicker__header {\n  text-align: center;\n  background-color: #f0f0f0;\n  border-bottom: 1px solid #aeaeae;\n  border-top-left-radius: 0.3rem;\n  border-top-right-radius: 0.3rem;\n  padding-top: 8px;\n  position: relative;\n}\n\n.react-datepicker__header--time {\n  padding-bottom: 8px;\n}\n\n.react-datepicker__year-dropdown-container--select,\n.react-datepicker__month-dropdown-container--select,\n.react-datepicker__year-dropdown-container--scroll,\n.react-datepicker__month-dropdown-container--scroll {\n  display: inline-block;\n  margin: 0 2px;\n}\n\n.react-datepicker__current-month,\n.react-datepicker-time__header {\n  margin-top: 0;\n  color: #000;\n  font-weight: bold;\n  font-size: 0.944rem;\n}\n\n.react-datepicker__navigation {\n  line-height: 1.7rem;\n  text-align: center;\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  width: 0;\n  border: 0.45rem solid transparent;\n  z-index: 1;\n}\n\n.react-datepicker__navigation--previous {\n  left: 10px;\n  border-right-color: #ccc;\n}\n\n.react-datepicker__navigation--previous:hover {\n  border-right-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--next {\n  right: 10px;\n  border-left-color: #ccc;\n}\n\n.react-datepicker__navigation--next--with-time:not(.react-datepicker__navigation--next--with-today-button) {\n  right: 80px;\n}\n\n.react-datepicker__navigation--next:hover {\n  border-left-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--years {\n  position: relative;\n  top: 0;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.react-datepicker__navigation--years-previous {\n  top: 4px;\n  border-top-color: #ccc;\n}\n\n.react-datepicker__navigation--years-previous:hover {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__navigation--years-upcoming {\n  top: -4px;\n  border-bottom-color: #ccc;\n}\n\n.react-datepicker__navigation--years-upcoming:hover {\n  border-bottom-color: #b3b3b3;\n}\n\n.react-datepicker__month-container {\n  float: left;\n}\n\n.react-datepicker__month {\n  margin: 0.4rem;\n  text-align: center;\n}\n\n.react-datepicker__time-container {\n  float: right;\n  border-left: 1px solid #aeaeae;\n}\n\n.react-datepicker__time-container--with-today-button {\n  display: inline;\n  border: 1px solid #aeaeae;\n  border-radius: 0.3rem;\n  position: absolute;\n  right: -72px;\n  top: 0;\n}\n\n.react-datepicker__time-container .react-datepicker__time {\n  position: relative;\n  background: white;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box {\n  width: 70px;\n  overflow-x: hidden;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list {\n  list-style: none;\n  margin: 0;\n  height: calc(195px + (1.7rem / 2));\n  overflow-y: scroll;\n  padding-right: 30px;\n  width: 100%;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item {\n  padding: 5px 10px;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item:hover {\n  cursor: pointer;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected {\n  background-color: #216ba5;\n  color: white;\n  font-weight: bold;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--selected:hover {\n  background-color: #216ba5;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled {\n  color: #ccc;\n}\n\n.react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box ul.react-datepicker__time-list li.react-datepicker__time-list-item--disabled:hover {\n  cursor: default;\n  background-color: transparent;\n}\n\n.react-datepicker__week-number {\n  color: #ccc;\n  display: inline-block;\n  width: 1.7rem;\n  line-height: 1.7rem;\n  text-align: center;\n  margin: 0.166rem;\n}\n\n.react-datepicker__week-number.react-datepicker__week-number--clickable {\n  cursor: pointer;\n}\n\n.react-datepicker__week-number.react-datepicker__week-number--clickable:hover {\n  border-radius: 0.3rem;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__day-names,\n.react-datepicker__week {\n  white-space: nowrap;\n}\n\n.react-datepicker__day-name,\n.react-datepicker__day,\n.react-datepicker__time-name {\n  color: #000;\n  display: inline-block;\n  width: 1.7rem;\n  line-height: 1.7rem;\n  text-align: center;\n  margin: 0.166rem;\n}\n\n.react-datepicker__day {\n  cursor: pointer;\n}\n\n.react-datepicker__day:hover {\n  border-radius: 0.3rem;\n  background-color: #f0f0f0;\n}\n\n.react-datepicker__day--today {\n  font-weight: bold;\n}\n\n.react-datepicker__day--highlighted {\n  border-radius: 0.3rem;\n  background-color: #3dcc4a;\n  color: #fff;\n}\n\n.react-datepicker__day--highlighted:hover {\n  background-color: #32be3f;\n}\n\n.react-datepicker__day--highlighted-custom-1 {\n  color: magenta;\n}\n\n.react-datepicker__day--highlighted-custom-2 {\n  color: green;\n}\n\n.react-datepicker__day--selected, .react-datepicker__day--in-selecting-range, .react-datepicker__day--in-range {\n  border-radius: 0.3rem;\n  background-color: #216ba5;\n  color: #fff;\n}\n\n.react-datepicker__day--selected:hover, .react-datepicker__day--in-selecting-range:hover, .react-datepicker__day--in-range:hover {\n  background-color: #1d5d90;\n}\n\n.react-datepicker__day--keyboard-selected {\n  border-radius: 0.3rem;\n  background-color: #2a87d0;\n  color: #fff;\n}\n\n.react-datepicker__day--keyboard-selected:hover {\n  background-color: #1d5d90;\n}\n\n.react-datepicker__day--in-selecting-range:not(.react-datepicker__day--in-range) {\n  background-color: rgba(33, 107, 165, 0.5);\n}\n\n.react-datepicker__month--selecting-range .react-datepicker__day--in-range:not(.react-datepicker__day--in-selecting-range) {\n  background-color: #f0f0f0;\n  color: #000;\n}\n\n.react-datepicker__day--disabled {\n  cursor: default;\n  color: #ccc;\n}\n\n.react-datepicker__day--disabled:hover {\n  background-color: transparent;\n}\n\n.react-datepicker__input-container {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n}\n\n.react-datepicker__year-read-view,\n.react-datepicker__month-read-view {\n  border: 1px solid transparent;\n  border-radius: 0.3rem;\n}\n\n.react-datepicker__year-read-view:hover,\n.react-datepicker__month-read-view:hover {\n  cursor: pointer;\n}\n\n.react-datepicker__year-read-view:hover .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__year-read-view:hover .react-datepicker__month-read-view--down-arrow,\n.react-datepicker__month-read-view:hover .react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view:hover .react-datepicker__month-read-view--down-arrow {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__year-read-view--down-arrow,\n.react-datepicker__month-read-view--down-arrow {\n  border-top-color: #ccc;\n  float: right;\n  margin-left: 20px;\n  top: 8px;\n  position: relative;\n  border-width: 0.45rem;\n}\n\n.react-datepicker__year-dropdown,\n.react-datepicker__month-dropdown {\n  background-color: #f0f0f0;\n  position: absolute;\n  width: 50%;\n  left: 25%;\n  top: 30px;\n  z-index: 1;\n  text-align: center;\n  border-radius: 0.3rem;\n  border: 1px solid #aeaeae;\n}\n\n.react-datepicker__year-dropdown:hover,\n.react-datepicker__month-dropdown:hover {\n  cursor: pointer;\n}\n\n.react-datepicker__year-dropdown--scrollable,\n.react-datepicker__month-dropdown--scrollable {\n  height: 150px;\n  overflow-y: scroll;\n}\n\n.react-datepicker__year-option,\n.react-datepicker__month-option {\n  line-height: 20px;\n  width: 100%;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.react-datepicker__year-option:first-of-type,\n.react-datepicker__month-option:first-of-type {\n  border-top-left-radius: 0.3rem;\n  border-top-right-radius: 0.3rem;\n}\n\n.react-datepicker__year-option:last-of-type,\n.react-datepicker__month-option:last-of-type {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  border-bottom-left-radius: 0.3rem;\n  border-bottom-right-radius: 0.3rem;\n}\n\n.react-datepicker__year-option:hover,\n.react-datepicker__month-option:hover {\n  background-color: #ccc;\n}\n\n.react-datepicker__year-option:hover .react-datepicker__navigation--years-upcoming,\n.react-datepicker__month-option:hover .react-datepicker__navigation--years-upcoming {\n  border-bottom-color: #b3b3b3;\n}\n\n.react-datepicker__year-option:hover .react-datepicker__navigation--years-previous,\n.react-datepicker__month-option:hover .react-datepicker__navigation--years-previous {\n  border-top-color: #b3b3b3;\n}\n\n.react-datepicker__year-option--selected,\n.react-datepicker__month-option--selected {\n  position: absolute;\n  left: 15px;\n}\n\n.react-datepicker__close-icon {\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  display: inline-block;\n  height: 0;\n  outline: 0;\n  padding: 0;\n  vertical-align: middle;\n}\n\n.react-datepicker__close-icon::after {\n  background-color: #216ba5;\n  border-radius: 50%;\n  bottom: 0;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  content: \"\\D7\";\n  cursor: pointer;\n  font-size: 12px;\n  height: 16px;\n  width: 16px;\n  line-height: 1;\n  margin: -8px auto 0;\n  padding: 2px;\n  position: absolute;\n  right: 7px;\n  text-align: center;\n  top: 50%;\n}\n\n.react-datepicker__today-button {\n  background: #f0f0f0;\n  border-top: 1px solid #aeaeae;\n  cursor: pointer;\n  text-align: center;\n  font-weight: bold;\n  padding: 5px 0;\n  clear: left;\n}\n\n.react-datepicker__portal {\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.8);\n  left: 0;\n  top: 0;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  z-index: 2147483647;\n}\n\n.react-datepicker__portal .react-datepicker__day-name,\n.react-datepicker__portal .react-datepicker__day,\n.react-datepicker__portal .react-datepicker__time-name {\n  width: 3rem;\n  line-height: 3rem;\n}\n\n@media (max-width: 400px), (max-height: 550px) {\n  .react-datepicker__portal .react-datepicker__day-name,\n  .react-datepicker__portal .react-datepicker__day,\n  .react-datepicker__portal .react-datepicker__time-name {\n    width: 2rem;\n    line-height: 2rem;\n  }\n}\n\n.react-datepicker__portal .react-datepicker__current-month,\n.react-datepicker__portal .react-datepicker-time__header {\n  font-size: 1.44rem;\n}\n\n.react-datepicker__portal .react-datepicker__navigation {\n  border: 0.81rem solid transparent;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--previous {\n  border-right-color: #ccc;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--previous:hover {\n  border-right-color: #b3b3b3;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--next {\n  border-left-color: #ccc;\n}\n\n.react-datepicker__portal .react-datepicker__navigation--next:hover {\n  border-left-color: #b3b3b3;\n}\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/DataForm.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".DataForm-main__1Ln6 {\n  border: 1px solid #DDD;\n  max-height: 100vh;\n  max-width: 800px;\n  width: 100vw;\n  background: white;\n  overflow-x: hidden;\n  overflow-y: auto; }\n  .DataForm-main__1Ln6 .DataForm-importCard__2ebc {\n    height: 165px;\n    width: 330px;\n    padding: 50px 20px;\n    text-align: center;\n    margin-left: 6%;\n    border: 1px solid #A05599;\n    background-color: #FFFFFF;\n    font-family: \"Arvo\", sans-serif;\n    font-size: 21px;\n    cursor: pointer; }\n    .DataForm-main__1Ln6 .DataForm-importCard__2ebc.DataForm-disable__3KQ3 {\n      cursor: no-drop; }\n    .DataForm-main__1Ln6 .DataForm-importCard__2ebc .DataForm-overlay__Jnpr {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0, 0, 0, 0.2); }\n    .DataForm-main__1Ln6 .DataForm-importCard__2ebc span {\n      color: #666666;\n      font-family: Arial;\n      font-size: 15px;\n      line-height: 17px;\n      text-align: center; }\n    .DataForm-main__1Ln6 .DataForm-importCard__2ebc i {\n      font-size: 23px;\n      background-color: rgba(160, 85, 153, 0.2);\n      padding: 0 15px;\n      color: #A05599; }\n\ninput, select, textarea {\n  background: #FFFFFF;\n  font-size: 16px;\n  color: #4A4A4A;\n  letter-spacing: 1.14px;\n  border-radius: 2px;\n  display: block;\n  width: 100%;\n  height: 50px;\n  padding: 25px 20px;\n  border: 1px solid #A05599;\n  margin-top: 10px; }\n\ntextarea {\n  height: 80px; }\n\nselect {\n  padding: 0; }\n\nlabel {\n  font-size: 16px;\n  color: #A05599;\n  letter-spacing: 1.14px;\n  line-height: 24px;\n  margin-bottom: 16px;\n  display: block;\n  font-variant: all-small-caps; }\n\n.DataForm-hidden__1Wnq {\n  display: none; }\n\n.DataForm-adress__ZCBc input {\n  margin: 10px; }\n\n.DataForm-header__2Q65 h3 {\n  height: 39px;\n  width: 730px;\n  color: #262626;\n  font-family: Arvo;\n  font-size: 32px;\n  line-height: 40px;\n  text-align: center; }\n\n.DataForm-header__2Q65 h4 {\n  height: 25px;\n  width: 730px;\n  color: #535353;\n  font-family: Arial;\n  font-size: 22px;\n  line-height: 26px;\n  text-align: center; }\n\n.DataForm-footer__JG2A {\n  margin: 20px 0;\n  text-align: right; }\n\n.DataForm-button__1mIv {\n  margin-top: 20px;\n  margin-right: 20px; }\n  .DataForm-button__1mIv:disabled {\n    background-color: rgba(128, 128, 128, 0.7);\n    border: 1px solid grey; }\n\n.DataForm-steps__1F3Y {\n  text-align: right; }\n", ""]);

// exports
exports.locals = {
	"main": "DataForm-main__1Ln6",
	"importCard": "DataForm-importCard__2ebc",
	"disable": "DataForm-disable__3KQ3",
	"overlay": "DataForm-overlay__Jnpr",
	"hidden": "DataForm-hidden__1Wnq",
	"adress": "DataForm-adress__ZCBc",
	"header": "DataForm-header__2Q65",
	"footer": "DataForm-footer__JG2A",
	"button": "DataForm-button__1mIv",
	"steps": "DataForm-steps__1F3Y"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/DirectoryPicker.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".DirectoryPicker-main__3e3z {\n  border: 1px solid #333;\n  overflow: auto;\n  border-radius: 5px; }\n\n.DirectoryPicker-container__1u_w {\n  margin: 10px;\n  background-color: white;\n  height: 338px;\n  text-align: left;\n  position: relative; }\n\n.DirectoryPicker-name__yZ42 {\n  cursor: pointer;\n  font-size: 14px;\n  color: #4A4A4A;\n  letter-spacing: 1px;\n  line-height: 2em;\n  display: block;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n  .DirectoryPicker-name__yZ42.DirectoryPicker-selected__4LJ-, .DirectoryPicker-name__yZ42:hover {\n    background-color: #E7E7E7; }\n\n.DirectoryPicker-icon__2e5I {\n  padding-right: 5px;\n  width: 15px;\n  display: inline-block; }\n  .DirectoryPicker-icon__2e5I.DirectoryPicker-file__IzV9 {\n    margin-left: 10px; }\n\n.DirectoryPicker-content__2yy6 {\n  margin: 0;\n  list-style: none;\n  margin-left: 16px;\n  padding-left: 0px;\n  position: relative; }\n", ""]);

// exports
exports.locals = {
	"main": "DirectoryPicker-main__3e3z",
	"container": "DirectoryPicker-container__1u_w",
	"name": "DirectoryPicker-name__yZ42",
	"selected": "DirectoryPicker-selected__4LJ-",
	"icon": "DirectoryPicker-icon__2e5I",
	"file": "DirectoryPicker-file__IzV9",
	"content": "DirectoryPicker-content__2yy6"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/FuneralList.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".FuneralList-main__1rNJ {\n  position: relative; }\n  .FuneralList-main__1rNJ input {\n    width: 100%;\n    padding: 10px;\n    border-radius: 10px;\n    border: 2px solid #8f8f8f;\n    max-width: 800px; }\n    .FuneralList-main__1rNJ input:focus {\n      outline: 0; }\n  .FuneralList-main__1rNJ .FuneralList-header__30zZ {\n    border: 15px solid #EDE9E2;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    line-height: 1px; }\n\n.FuneralList-modal__1ylf {\n  border: 1px solid #DDD;\n  max-height: 100vh;\n  max-width: 800px;\n  width: 100vw;\n  background: white;\n  text-align: right; }\n\n.FuneralList-titleHome__3PnE {\n  color: #A05599;\n  font-weight: bolder; }\n\n#FuneralList-search__17GU {\n  width: 100%;\n  border-radius: 20px; }\n\n.FuneralList-gaugeBox___75P {\n  position: fixed;\n  height: 57vh;\n  -webkit-transform: translateX(-40px);\n  -ms-transform: translateX(-40px);\n  transform: translateX(-40px);\n  width: 35px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.FuneralList-gauge__3Ctn {\n  height: 95%;\n  border: 1px solid #E1D9CC;\n  border-radius: 10px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: end;\n  -ms-flex-align: end;\n  align-items: flex-end;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  width: 15px;\n  background-image: -webkit-gradient(linear, right top, left top, from(#c3c3c3), color-stop(67%, #f6f6f6));\n  background-image: -o-linear-gradient(right, #c3c3c3 0%, #f6f6f6 67%);\n  background-image: linear-gradient(to left, #c3c3c3 0%, #f6f6f6 67%);\n  overflow: hidden; }\n  .FuneralList-gauge__3Ctn .FuneralList-progress__1d_U {\n    background-image: -webkit-gradient(linear, right top, left top, from(#89892b), color-stop(67%, #c8c951));\n    background-image: -o-linear-gradient(right, #89892b 0%, #c8c951 67%);\n    background-image: linear-gradient(to left, #89892b 0%, #c8c951 67%);\n    width: 100%;\n    height: 0; }\n\n.FuneralList-entries__1n1w {\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  max-width: 880px; }\n\n.FuneralList-list__FgBv {\n  padding: 0;\n  margin: 0; }\n\n.FuneralList-add__2sWa {\n  margin-right: 10px; }\n\n.FuneralList-sectionSearch__37YC {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: end;\n  -ms-flex-align: end;\n  align-items: flex-end;\n  margin-top: 20px;\n  margin-bottom: 10px;\n  padding: 30px;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap; }\n  .FuneralList-sectionSearch__37YC > * {\n    margin: 0; }\n  .FuneralList-sectionSearch__37YC h3 {\n    -webkit-box-flex: 1;\n    -ms-flex: 1;\n    flex: 1; }\n\n.FuneralList-row__28-5 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-bottom: 10px;\n  border: 14px solid #EDE9E2;\n  cursor: pointer; }\n  .FuneralList-row__28-5.FuneralList-disable__iK8j {\n    opacity: 0.4; }\n\n.FuneralList-rowAd__2IKS {\n  background-color: #E1D9CC;\n  border: 20px solid #E1D9CC;\n  width: 100%; }\n  .FuneralList-rowAd__2IKS .FuneralList-firstTitle__PCSk {\n    margin-bottom: 10px;\n    font-family: Arial;\n    font-size: 16px;\n    font-weight: bold;\n    line-height: 18px; }\n  .FuneralList-rowAd__2IKS .FuneralList-secondTitle__1wPj {\n    margin-bottom: 10px;\n    color: #262626;\n    font-family: Arvo;\n    font-size: 21px;\n    line-height: 26px; }\n  .FuneralList-rowAd__2IKS .FuneralList-Adtext__Lh8V {\n    margin-bottom: 10px;\n    color: #535353;\n    font-family: Arial;\n    font-size: 15px;\n    line-height: 17px; }\n\n.FuneralList-profileLink__22VZ {\n  padding: 10px;\n  text-decoration: underline;\n  color: #262626;\n  /* visited link */\n  /* mouse over link */\n  /* selected link */ }\n  .FuneralList-profileLink__22VZ:link {\n    color: #262626; }\n  .FuneralList-profileLink__22VZ:visited {\n    color: #262626; }\n  .FuneralList-profileLink__22VZ:hover {\n    color: #262626;\n    cursor: pointer;\n    background-color: #E1D9CC; }\n  .FuneralList-profileLink__22VZ:active {\n    color: #262626; }\n\n.FuneralList-col__ii8A {\n  height: 50px;\n  border-left: 0;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.FuneralList-check__22bs {\n  background-color: #EDE9E2;\n  width: 75px;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  font-size: 30px;\n  color: white;\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 50px;\n  flex: 0 0 50px;\n  border-right: 1px solid #CCCCCC;\n  border-left: 1px solid #CCCCCC;\n  padding: 23px; }\n  .FuneralList-check__22bs.FuneralList-checked__1Z7q {\n    color: #A05599; }\n  .FuneralList-check__22bs .FuneralList-circle__1AM7 {\n    border: 3px solid;\n    border-radius: 50%;\n    padding: 10px;\n    height: 48px;\n    border-color: #E1D9CC;\n    color: #757575;\n    min-width: 48px;\n    font-family: \"Arial\", sans-serif;\n    font-size: 10px;\n    font-weight: bold;\n    line-height: 24px;\n    text-align: center; }\n\n.FuneralList-name__3Dwr {\n  padding: 0 20px;\n  -webkit-box-flex: 9999;\n  -ms-flex: 9999 0 210px;\n  flex: 9999 0 210px;\n  color: #262626;\n  font-family: Arvo;\n  font-size: 21px;\n  line-height: 26px; }\n\n.FuneralList-excerpt__3mRf {\n  color: #535353;\n  font-family: Arial;\n  font-size: 15px;\n  line-height: 17px; }\n\n.FuneralList-button__ElQS {\n  -webkit-box-flex: 1;\n  -ms-flex: 1 0 130px;\n  flex: 1 0 130px;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center; }\n  @media (max-width: 449px) {\n    .FuneralList-button__ElQS {\n      border-top: 0;\n      border-left: 1px solid #333; } }\n\n.FuneralList-legend__3ZBu {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap; }\n  .FuneralList-legend__3ZBu li {\n    -webkit-box-flex: 1;\n    -ms-flex: 1;\n    flex: 1;\n    margin: 0 5px; }\n\n.FuneralList-legendRow__2Wvu {\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  -ms-flex-wrap: nowrap;\n  flex-wrap: nowrap; }\n\n.FuneralList-legendName__iMe4 {\n  padding: 0 10px;\n  font-size: 13px;\n  -webkit-box-flex: 1;\n  -ms-flex: 1 0 0%;\n  flex: 1 0 0%;\n  height: 35px;\n  white-space: nowrap; }\n\n.FuneralList-legendCheck__1eGD {\n  height: 35px;\n  width: 35px;\n  font-size: 20px;\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 35px;\n  flex: 0 0 35px; }\n\n.FuneralList-separator__27Kg {\n  height: 2px;\n  width: 105%;\n  margin: 15px auto 15px auto;\n  border-bottom: 1px solid #CCCCCC; }\n\n.FuneralList-AdlinkObseque__1acx {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  background-color: #A05599;\n  color: white !important;\n  padding: 18px;\n  font-family: Arvo;\n  font-size: 13px;\n  line-height: 15px; }\n\n.FuneralList-Adlink__3AlX {\n  color: #262626;\n  font-family: Arvo;\n  font-size: 13px;\n  line-height: 15px;\n  /* visited link */\n  /* mouse over link */\n  /* selected link */ }\n  .FuneralList-Adlink__3AlX span:link, .FuneralList-Adlink__3AlX a:link {\n    color: #262626; }\n  .FuneralList-Adlink__3AlX span:visited, .FuneralList-Adlink__3AlX a:visited {\n    color: #262626; }\n  .FuneralList-Adlink__3AlX span:hover, .FuneralList-Adlink__3AlX a:hover {\n    color: #262626;\n    cursor: pointer;\n    text-decoration: underline; }\n  .FuneralList-Adlink__3AlX span:active, .FuneralList-Adlink__3AlX a:active {\n    color: #262626; }\n\n.FuneralList-ModalMain__1zLp {\n  border: 1px solid #DDD;\n  max-height: 80vh;\n  max-width: 800px;\n  width: 100vw; }\n\n.FuneralList-edition__1zmN { }\n  .FuneralList-edition__1zmN .FuneralList-group__2cC7 {\n    margin-bottom: 15px; }\n    .FuneralList-edition__1zmN .FuneralList-group__2cC7 label {\n      font-size: 16px;\n      color: #A05599;\n      letter-spacing: 1.14px;\n      line-height: 24px;\n      margin-bottom: 16px;\n      display: block; }\n    .FuneralList-edition__1zmN .FuneralList-group__2cC7 input, .FuneralList-edition__1zmN .FuneralList-group__2cC7 select, .FuneralList-edition__1zmN .FuneralList-group__2cC7 textarea {\n      background: #FFFFFF;\n      font-size: 16px;\n      color: #4A4A4A;\n      letter-spacing: 1.14px;\n      border-radius: 2px;\n      display: block;\n      width: 100%;\n      height: 50px;\n      padding: 25px 20px;\n      border: 1px solid #A05599; }\n    .FuneralList-edition__1zmN .FuneralList-group__2cC7 select {\n      padding: 0; }\n    .FuneralList-edition__1zmN .FuneralList-group__2cC7 textarea {\n      height: auto;\n      resize: vertical; }\n    .FuneralList-edition__1zmN .FuneralList-group__2cC7 .FuneralList-inline__gRwT {\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      margin-bottom: 10px; }\n  .FuneralList-edition__1zmN .FuneralList-row__28-5 {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n    align-items: flex-start;\n    border: none; }\n    .FuneralList-edition__1zmN .FuneralList-row__28-5 .FuneralList-group__2cC7 {\n      -webkit-box-flex: 1;\n      -ms-flex: 1;\n      flex: 1;\n      margin-right: 10px; }\n  .FuneralList-edition__1zmN .FuneralList-header__30zZ {\n    background-color: white;\n    height: 160px;\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n    padding: 10px 1px;\n    text-align: justify;\n    text-align-last: center;\n    text-transform: uppercase; }\n    @media (min-width: 770px) {\n      .FuneralList-edition__1zmN .FuneralList-header__30zZ {\n        padding: 16px; } }\n    .FuneralList-edition__1zmN .FuneralList-header__30zZ h1 {\n      -webkit-box-flex: 1;\n      -ms-flex: 1;\n      flex: 1;\n      font-size: 24px;\n      color: #32363F;\n      letter-spacing: 1px;\n      line-height: 40px;\n      font-weight: 500; }\n    .FuneralList-edition__1zmN .FuneralList-header__30zZ h2 {\n      font-size: 17px;\n      color: #535353; }\n    .FuneralList-edition__1zmN .FuneralList-header__30zZ button {\n      margin-left: 5px;\n      height: 54px; }\n      @media (min-width: 770px) {\n        .FuneralList-edition__1zmN .FuneralList-header__30zZ button {\n          margin-left: 16px; } }\n      .FuneralList-edition__1zmN .FuneralList-header__30zZ button i {\n        line-height: 20px; }\n  .FuneralList-edition__1zmN .FuneralList-content__1itJ {\n    padding: 16px;\n    background-color: white; }\n    .FuneralList-edition__1zmN .FuneralList-content__1itJ h3 {\n      font-size: 16px;\n      color: #95999D;\n      letter-spacing: 1.14px;\n      line-height: 24px;\n      margin: 0;\n      margin-bottom: 10px;\n      font-weight: lighter; }\n    .FuneralList-edition__1zmN .FuneralList-content__1itJ p {\n      font-size: 16px;\n      color: #4A4A4A;\n      letter-spacing: 1.14px;\n      line-height: 24px;\n      margin: 0;\n      margin-bottom: 32px;\n      font-weight: lighter; }\n    .FuneralList-edition__1zmN .FuneralList-content__1itJ p + p {\n      margin-top: -32px; }\n    .FuneralList-edition__1zmN .FuneralList-content__1itJ a,\n    .FuneralList-edition__1zmN .FuneralList-content__1itJ a:visited {\n      color: #4A4A4A; }\n  .FuneralList-edition__1zmN .FuneralList-footer__-ZF1 {\n    background-color: white;\n    padding: 0 0 30px 0; }\n    .FuneralList-edition__1zmN .FuneralList-footer__-ZF1 button {\n      margin-right: 35px; }\n    .FuneralList-edition__1zmN .FuneralList-footer__-ZF1 .FuneralList-footerRight__1vXV {\n      text-align: right; }\n    .FuneralList-edition__1zmN .FuneralList-footer__-ZF1 .FuneralList-button__ElQS {\n      margin-right: 30px; }\n\n.FuneralList-icon__2BfA {\n  font-size: 25px;\n  background-color: rgba(160, 85, 153, 0.2);\n  color: #A05599;\n  padding: 10px 20px;\n  border-radius: 65%;\n  margin: 0 15px 0px 0px; }\n\n.FuneralList-done__3Hn_ {\n  width: 45px; }\n\n.FuneralList-introHome__1YHS, .FuneralList-introFuneral__21YJ {\n  font-size: 17px; }\n\n.FuneralList-introContact__3O0k {\n  padding: 28px;\n  font-size: 18px; }\n", ""]);

// exports
exports.locals = {
	"main": "FuneralList-main__1rNJ",
	"header": "FuneralList-header__30zZ",
	"modal": "FuneralList-modal__1ylf",
	"titleHome": "FuneralList-titleHome__3PnE",
	"search": "FuneralList-search__17GU",
	"gaugeBox": "FuneralList-gaugeBox___75P",
	"gauge": "FuneralList-gauge__3Ctn",
	"progress": "FuneralList-progress__1d_U",
	"entries": "FuneralList-entries__1n1w",
	"list": "FuneralList-list__FgBv",
	"add": "FuneralList-add__2sWa",
	"sectionSearch": "FuneralList-sectionSearch__37YC",
	"row": "FuneralList-row__28-5",
	"disable": "FuneralList-disable__iK8j",
	"rowAd": "FuneralList-rowAd__2IKS",
	"firstTitle": "FuneralList-firstTitle__PCSk",
	"secondTitle": "FuneralList-secondTitle__1wPj",
	"Adtext": "FuneralList-Adtext__Lh8V",
	"profileLink": "FuneralList-profileLink__22VZ",
	"col": "FuneralList-col__ii8A",
	"check": "FuneralList-check__22bs FuneralList-col__ii8A",
	"checked": "FuneralList-checked__1Z7q",
	"circle": "FuneralList-circle__1AM7",
	"name": "FuneralList-name__3Dwr",
	"excerpt": "FuneralList-excerpt__3mRf",
	"button": "FuneralList-button__ElQS FuneralList-col__ii8A",
	"legend": "FuneralList-legend__3ZBu FuneralList-list__FgBv",
	"legendRow": "FuneralList-legendRow__2Wvu FuneralList-row__28-5",
	"legendName": "FuneralList-legendName__iMe4 FuneralList-col__ii8A FuneralList-name__3Dwr",
	"legendCheck": "FuneralList-legendCheck__1eGD FuneralList-col__ii8A FuneralList-check__22bs FuneralList-col__ii8A",
	"separator": "FuneralList-separator__27Kg",
	"AdlinkObseque": "FuneralList-AdlinkObseque__1acx",
	"Adlink": "FuneralList-Adlink__3AlX",
	"ModalMain": "FuneralList-ModalMain__1zLp",
	"edition": "FuneralList-edition__1zmN FuneralList-ModalMain__1zLp",
	"group": "FuneralList-group__2cC7",
	"inline": "FuneralList-inline__gRwT",
	"content": "FuneralList-content__1itJ",
	"footer": "FuneralList-footer__-ZF1",
	"footerRight": "FuneralList-footerRight__1vXV",
	"icon": "FuneralList-icon__2BfA",
	"done": "FuneralList-done__3Hn_",
	"introHome": "FuneralList-introHome__1YHS",
	"introFuneral": "FuneralList-introFuneral__21YJ",
	"introContact": "FuneralList-introContact__3O0k"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/ImporterModal.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".ImporterModal-main__2R1u {\n  width: 100vw;\n  max-width: 600px;\n  background: #FFF;\n  -webkit-box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2);\n  box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2);\n  padding: 16px;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  margin-bottom: 40px; }\n\n.ImporterModal-header__1JH4 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.ImporterModal-content__1rQo {\n  padding: 25px 0; }\n\n.ImporterModal-footer__3DmO {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap; }\n\n.ImporterModal-dropzone__30R5 {\n  height: 355px;\n  width: 100%;\n  overflow: auto;\n  border-color: grey;\n  border-width: 2px;\n  border-style: dashed;\n  border-radius: 5px;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  padding: 5px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-top: 5px;\n  position: relative; }\n  .ImporterModal-dropzone__30R5.ImporterModal-active__2-tk {\n    border-color: steelblue;\n    background-color: rgba(10, 158, 200, 0.1); }\n\n.ImporterModal-message__3Khq {\n  text-align: center;\n  text-transform: uppercase;\n  color: rgba(0, 0, 0, 0.3);\n  font-weight: bold;\n  font-size: 50px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n  -ms-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  width: 100%;\n  max-width: 250px; }\n\n.ImporterModal-doc__l1MB {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  border: 1px solid grey;\n  border-radius: 10px;\n  height: 32vw;\n  width: 32vw;\n  max-width: 150px;\n  max-height: 190px;\n  margin: 10px;\n  padding: 5px 0; }\n\n.ImporterModal-image__2d1y {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  width: 100%; }\n  .ImporterModal-image__2d1y img {\n    border-radius: 5px;\n    max-width: 85%;\n    max-height: 100%;\n    width: 100%; }\n\n.ImporterModal-docName__3FXH {\n  margin: 5px 0;\n  overflow: hidden;\n  max-width: 130px; }\n\n.ImporterModal-select__Qdz6 {\n  width: 90%; }\n", ""]);

// exports
exports.locals = {
	"main": "ImporterModal-main__2R1u",
	"header": "ImporterModal-header__1JH4",
	"content": "ImporterModal-content__1rQo",
	"footer": "ImporterModal-footer__3DmO",
	"dropzone": "ImporterModal-dropzone__30R5",
	"active": "ImporterModal-active__2-tk",
	"message": "ImporterModal-message__3Khq",
	"doc": "ImporterModal-doc__l1MB",
	"image": "ImporterModal-image__2d1y",
	"docName": "ImporterModal-docName__3FXH",
	"select": "ImporterModal-select__Qdz6"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/Modal.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Modal-modal__2gEe {\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  z-index: 30;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  font-family: \"Roboto\";\n  background-color: rgba(0, 0, 0, 0.4);\n  -webkit-transition: all 0.2s linear;\n  -o-transition: all 0.2s linear;\n  transition: all 0.2s linear; }\n\n.Modal-popup__18YK {\n  position: fixed;\n  top: 10%;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n  -ms-transform: translateX(-50%);\n  transform: translateX(-50%);\n  z-index: 30;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  font-family: \"Roboto\";\n  opacity: 0;\n  max-width: 350px;\n  width: 100%;\n  border: 1px solid #333;\n  background-color: #f6f6f6;\n  border-radius: 5px;\n  -webkit-box-shadow: 0 2px 20px rgba(0, 0, 0, 0.4);\n  box-shadow: 0 2px 20px rgba(0, 0, 0, 0.4); }\n  .Modal-popup__18YK .Modal-header__3oBv {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    padding: 0 20px; }\n    .Modal-popup__18YK .Modal-header__3oBv h2 {\n      -webkit-box-flex: 1;\n      -ms-flex: 1;\n      flex: 1;\n      margin: 10px 0; }\n  .Modal-popup__18YK .Modal-content__3rdO {\n    padding: 5px 20px;\n    text-align: justify;\n    word-wrap: break-word; }\n  .Modal-popup__18YK.Modal-openActive__3kw0 {\n    -webkit-transition: all 0.3s ease-in-out;\n    -o-transition: all 0.3s ease-in-out;\n    transition: all 0.3s ease-in-out;\n    opacity: 1; }\n  .Modal-popup__18YK.Modal-closeActive__38Id {\n    -webkit-transition: all 0.2s ease-in-out;\n    -o-transition: all 0.2s ease-in-out;\n    transition: all 0.2s ease-in-out; }\n  .Modal-popup__18YK.Modal-error__24w3 {\n    color: white;\n    background-color: #ff3f3a; }\n", ""]);

// exports
exports.locals = {
	"modal": "Modal-modal__2gEe",
	"popup": "Modal-popup__18YK",
	"header": "Modal-header__3oBv",
	"content": "Modal-content__3rdO",
	"openActive": "Modal-openActive__3kw0",
	"closeActive": "Modal-closeActive__38Id",
	"error": "Modal-error__24w3"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/Navigation.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("./node_modules/css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: 'Roboto-Thin';\n  font-style: normal;\n  font-weight: 100;\n  src: url(" + escape(__webpack_require__("./src/public/fonts/Roboto-Thin.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-ThinItalic';\n  font-style: italic;\n  font-weight: 100;\n  src: url(" + escape(__webpack_require__("./src/public/fonts/Roboto-ThinItalic.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-Light';\n  font-style: normal;\n  font-weight: 300;\n  src: url(" + escape(__webpack_require__("./src/public/fonts/Roboto-Light.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-LightItalic';\n  font-style: italic;\n  font-weight: 300;\n  src: url(" + escape(__webpack_require__("./src/public/fonts/Roboto-LightItalic.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: url(" + escape(__webpack_require__("./src/public/fonts/Roboto-Regular.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-Italic';\n  font-style: normal;\n  font-weight: 400;\n  src: url(" + escape(__webpack_require__("./src/public/fonts/Roboto-Italic.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-Bold';\n  font-style: normal;\n  font-weight: 700;\n  src: url(" + escape(__webpack_require__("./src/public/fonts/Roboto-Bold.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-BoldItalic';\n  font-style: italic;\n  font-weight: 700;\n  src: url(" + escape(__webpack_require__("./src/public/fonts/Roboto-BoldItalic.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: Arvo;\n  font-style: normal;\n  font-weight: 100;\n  src: url(" + escape(__webpack_require__("./src/public/fonts/Arvo-Regular.ttf")) + ") format(\"truetype\"); }\n\n.Navigation-main__xjf4 {\n  font-family: \"Roboto-Light\";\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  overflow: auto;\n  background-color: #EDE9E2;\n  width: 0;\n  padding: 0; }\n\n.Navigation-divLogo__sakV {\n  margin-bottom: 20px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n  .Navigation-divLogo__sakV .Navigation-logoMaif__1gU8 {\n    width: 80px;\n    height: 80px; }\n\n.Navigation-nav__3M2H {\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  background-color: #EDE9E2;\n  z-index: 20; }\n\n.Navigation-seperator__2J1F {\n  border-top-color: #CCCCCC; }\n\n.Navigation-list__1Wrg {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap; }\n\n.Navigation-chevron__1nJ0 {\n  margin-right: 10px; }\n\n.Navigation-button__3-1M {\n  color: \"#262626\";\n  border: 1px solid;\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  margin: 10px;\n  max-height: 50px; }\n  .Navigation-button__3-1M i {\n    margin-right: 0;\n    color: \"#262626\"; }\n  .Navigation-button__3-1M a {\n    font-size: 18px;\n    line-height: 21px;\n    text-decoration: none;\n    width: 100%;\n    text-transform: uppercase !important;\n    height: 100%;\n    font-weight: bolder;\n    letter-spacing: 1.5px;\n    color: inherit;\n    text-decoration: none;\n    display: block;\n    cursor: pointer;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    padding: 5px;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    text-align: center;\n    overflow: hidden; }\n  .Navigation-button__3-1M .Navigation-active__o8MT, .Navigation-button__3-1M a:hover, .Navigation-button__3-1M .Navigation-button__3-1M:hover {\n    background-color: transparent;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n    color: \"#262626\";\n    text-decoration: none;\n    text-transform: uppercase !important; }\n    .Navigation-button__3-1M .Navigation-active__o8MT i, .Navigation-button__3-1M a:hover i, .Navigation-button__3-1M .Navigation-button__3-1M:hover i {\n      color: \"#262626\"; }\n\n.Navigation-help__m4PZ {\n  color: #888888;\n  font-weight: bolder;\n  font-size: 12px; }\n\n@media (min-width: 770px) {\n  .Navigation-main__xjf4 {\n    width: 275px;\n    padding: 19px 0;\n    margin-left: 155px; }\n  .Navigation-nav__3M2H {\n    position: static;\n    background-color: transparent; }\n  .Navigation-list__1Wrg {\n    display: block; }\n  .Navigation-button__3-1M {\n    border: 0;\n    max-height: initial; }\n    .Navigation-button__3-1M i {\n      margin-right: 14px; }\n    .Navigation-button__3-1M a {\n      font-size: 18px;\n      display: block;\n      padding: 15px 13px;\n      text-align: left; }\n      .Navigation-button__3-1M a:hover {\n        background-color: #E1D9CC;\n        color: inherit; }\n    .Navigation-button__3-1M .Navigation-active__o8MT, .Navigation-button__3-1M a:hover, .Navigation-button__3-1M .Navigation-button__3-1M:hover {\n      background-color: #E1D9CC;\n      color: inherit; } }\n", ""]);

// exports
exports.locals = {
	"main": "Navigation-main__xjf4",
	"divLogo": "Navigation-divLogo__sakV",
	"logoMaif": "Navigation-logoMaif__1gU8",
	"nav": "Navigation-nav__3M2H",
	"seperator": "Navigation-seperator__2J1F",
	"list": "Navigation-list__1Wrg",
	"chevron": "Navigation-chevron__1nJ0",
	"button": "Navigation-button__3-1M",
	"active": "Navigation-active__o8MT",
	"help": "Navigation-help__m4PZ"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/Page.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Page-main__3Izj {\n  -webkit-box-flex: 1;\n  -ms-flex: 1 0 auto;\n  flex: 1 0 auto;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  padding: 19px; }\n\n.Page-flex__1zpH {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column; }\n\n.Page-titlePage__yglX {\n  color: #A05599;\n  font-weight: bolder; }\n\n.Page-information__Jvlo {\n  margin-left: 10px; }\n\n.Page-header__2ifS {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  border-bottom: 1px solid #ddd;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  padding: 8px 10px 0 10px; }\n  @media (min-width: 770px) {\n    .Page-header__2ifS {\n      padding-left: 32px;\n      padding-right: 32px; } }\n  .Page-header__2ifS h1 {\n    font-size: 32px; }\n  .Page-header__2ifS h2 {\n    font-size: 22px;\n    font-family: \"Arial\", sans-serif;\n    color: #535353; }\n\n.Page-row1__3vha {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  padding: 0;\n  padding-bottom: 5px;\n  min-height: 42px;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-pack: end;\n  -ms-flex-pack: end;\n  justify-content: flex-end; }\n  @media (min-width: 770px) {\n    .Page-row1__3vha {\n      padding: 14px 0; } }\n\n.Page-row2__3hNh {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  padding: 12px 0;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box; }\n  .Page-row2__3hNh:empty {\n    padding: 0; }\n\n.Page-simpleList__7tTH {\n  list-style: none;\n  margin: 0;\n  padding: 0; }\n\n.Page-actions__3Xhs {\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  margin-top: 4px; }\n  .Page-actions__3Xhs li {\n    margin-left: 10px; }\n\n.Page-options__3fkq {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box; }\n\n.Page-headline__lvL6 {\n  margin: 0;\n  letter-spacing: 1px;\n  font-weight: 500;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box; }\n\n.Page-title__2LMb {\n  font-size: 20px;\n  height: 44px;\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.Page-subtitle__1h86 {\n  font-size: 12px; }\n\n.Page-content__3NEH {\n  padding: 16px 10px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column; }\n  @media (min-width: 770px) {\n    .Page-content__3NEH {\n      padding-left: 32px;\n      padding-right: 32px; } }\n\n.Page-back__1J_H {\n  color: #333;\n  padding: 6px 14px;\n  font-size: 22px;\n  margin-right: 15px; }\n  .Page-back__1J_H i {\n    margin: 0 !important; }\n\n@media (min-width: 770px) {\n  .Page-title__2LMb {\n    -webkit-box-ordinal-group: 3;\n    -ms-flex-order: 2;\n    order: 2;\n    min-width: auto;\n    font-size: 24px;\n    height: auto; }\n  .Page-actions__3Xhs {\n    -webkit-box-ordinal-group: 4;\n    -ms-flex-order: 3;\n    order: 3;\n    margin: 0; }\n  .Page-back__1J_H {\n    -webkit-box-ordinal-group: 2;\n    -ms-flex-order: 1;\n    order: 1; } }\n", ""]);

// exports
exports.locals = {
	"main": "Page-main__3Izj",
	"flex": "Page-flex__1zpH",
	"titlePage": "Page-titlePage__yglX",
	"information": "Page-information__Jvlo",
	"header": "Page-header__2ifS",
	"row1": "Page-row1__3vha",
	"row2": "Page-row2__3hNh",
	"simpleList": "Page-simpleList__7tTH",
	"actions": "Page-actions__3Xhs Page-simpleList__7tTH",
	"options": "Page-options__3fkq Page-simpleList__7tTH",
	"headline": "Page-headline__lvL6",
	"title": "Page-title__2LMb Page-headline__lvL6",
	"subtitle": "Page-subtitle__1h86 Page-headline__lvL6",
	"content": "Page-content__3NEH",
	"back": "Page-back__1J_H"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/buttons.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".buttons-button__25Bk {\n  border: solid 1px #9b9b9b;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  font-family: \"Arvo\", sans-serif;\n  font-size: 0.85em;\n  letter-spacing: 1px;\n  color: #dddddd;\n  padding: 12px 15px;\n  font-weight: 300;\n  cursor: pointer; }\n  .buttons-button__25Bk:disabled {\n    cursor: not-allowed; }\n  .buttons-button__25Bk.buttons-disabled__1qWF {\n    background-color: rgba(200, 200, 200, 0.2) !important;\n    border: 1px solid rgba(200, 200, 200, 0.6) !important;\n    color: rgba(200, 200, 200, 0.6) !important;\n    cursor: not-allowed; }\n  .buttons-button__25Bk.buttons-positive__3hGc {\n    background-color: #c8c951;\n    color: #dddddd; }\n  .buttons-button__25Bk.buttons-light__3_CY {\n    background-color: #FFF;\n    color: #444; }\n  .buttons-button__25Bk.buttons-assertive__2sar {\n    background-color: white;\n    color: #ff3f3a;\n    border: 1px solid #ff2621;\n    width: 210px; }\n  .buttons-button__25Bk.buttons-stable__J4ya {\n    background-color: #f6f6f6;\n    color: #444;\n    height: 55px;\n    width: 210px; }\n  .buttons-button__25Bk.buttons-default__3gFB {\n    min-width: 210px;\n    width: auto;\n    background-color: #A05599;\n    color: #dddddd;\n    border: 1px solid #A05599; }\n  .buttons-button__25Bk.buttons-defaultLight__1-Po {\n    width: 255px;\n    background-color: white;\n    color: #A05599;\n    border: 1px solid #A05599; }\n  .buttons-button__25Bk.buttons-clear__3e6b {\n    background-color: transparent;\n    border: none; }\n    .buttons-button__25Bk.buttons-clear__3e6b > i:first-child {\n      margin-right: 0; }\n  .buttons-button__25Bk > i:first-child {\n    margin-right: 8px;\n    vertical-align: middle;\n    font-size: 20px; }\n  .buttons-button__25Bk.buttons-icon__23QM {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center; }\n    .buttons-button__25Bk.buttons-icon__23QM i:first-child {\n      line-height: 0;\n      margin: 0;\n      padding: 0;\n      font-size: 25px;\n      height: 18px;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-align: center;\n      -ms-flex-align: center;\n      align-items: center;\n      -webkit-box-pack: center;\n      -ms-flex-pack: center;\n      justify-content: center;\n      overflow: visible; }\n  @media (max-width: 1155px) {\n    .buttons-button__25Bk .buttons-text__3V63 {\n      display: none; }\n    .buttons-button__25Bk > i:first-child {\n      margin: 0; } }\n", ""]);

// exports
exports.locals = {
	"button": "buttons-button__25Bk",
	"disabled": "buttons-disabled__1qWF",
	"positive": "buttons-positive__3hGc",
	"light": "buttons-light__3_CY",
	"assertive": "buttons-assertive__2sar",
	"stable": "buttons-stable__J4ya",
	"default": "buttons-default__3gFB",
	"defaultLight": "buttons-defaultLight__1-Po",
	"clear": "buttons-clear__3e6b",
	"icon": "buttons-icon__23QM",
	"text": "buttons-text__3V63"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/App.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("./node_modules/css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: 'Roboto-Thin';\n  font-style: normal;\n  font-weight: 100;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-Thin.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-ThinItalic';\n  font-style: italic;\n  font-weight: 100;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-ThinItalic.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-Light';\n  font-style: normal;\n  font-weight: 300;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-Light.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-LightItalic';\n  font-style: italic;\n  font-weight: 300;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-LightItalic.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-Regular.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-Italic';\n  font-style: normal;\n  font-weight: 400;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-Italic.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-Bold';\n  font-style: normal;\n  font-weight: 700;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-Bold.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-BoldItalic';\n  font-style: italic;\n  font-weight: 700;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-BoldItalic.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: Arvo;\n  font-style: normal;\n  font-weight: 100;\n  src: url(" + escape(__webpack_require__("./src/fonts/Arvo-Regular.ttf")) + ") format(\"truetype\"); }\n\nhtml {\n  font-size: 16px !important;\n  min-width: 320px; }\n\nhtml, body {\n  height: 100vh;\n  background-color: #EDE9E2; }\n\nbody, [role='application'] {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  min-height: 0;\n  background-color: #EDE9E2; }\n\n[role='application'] {\n  height: 100%; }\n\nul {\n  list-style: none; }\n\n.App-app__2Alg {\n  font-family: \"Arvo\", sans-serif;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  min-height: 0;\n  margin-bottom: 101px; }\n  @media (min-width: 530px) {\n    .App-app__2Alg {\n      margin-bottom: 50.5px; } }\n  @media (min-width: 770px) {\n    .App-app__2Alg {\n      margin: 0; } }\n\n/*\n.main {\n  min-height: 80%;\n  max-width: 1020px;\n  display: flex;\n  flex-direction: column;\n}\n*/\n.App-container__2uJr {\n  /*display: flex;\n  flex: 1;\n  min-height: 0;*/\n  display: -webkit-box; }\n\n.App-page__x07c {\n  overflow-y: auto;\n  overflow-x: hidden;\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1; }\n  .App-page__x07c::-webkit-scrollbar {\n    width: 5px; }\n  .App-page__x07c::-webkit-scrollbar-thumb {\n    border-radius: 2px;\n    padding: 0 1px;\n    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n    background-color: rgba(0, 0, 0, 0.3); }\n\n.App-myContainer__2g5V {\n  background-color: #EDE9E2; }\n", ""]);

// exports
exports.locals = {
	"app": "App-app__2Alg",
	"container": "App-container__2uJr",
	"page": "App-page__x07c",
	"myContainer": "App-myContainer__2g5V"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/AssistanceList.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".AssistanceList-titleStep__Ekmq {\n  color: #A05599;\n  font-weight: bolder;\n  font-size: 30px; }\n\n.AssistanceList-iconList__3MG9 {\n  width: 40px;\n  margin: 12px 12px 12px 12px; }\n\n.AssistanceList-iconListAmbulance__215Z {\n  width: 45px;\n  margin: 17px 12px 12px 12px; }\n\n.AssistanceList-ambulance__13_3 {\n  width: 80px;\n  height: 65px; }\n\n.AssistanceList-pharmacie__2oGZ {\n  margin-top: 3px; }\n\n.AssistanceList-row__2f-b .AssistanceList-content__MkJj h4, .AssistanceList-row__2f-b .AssistanceList-content__MkJj h3 {\n  font-family: Arvo; }\n\n.AssistanceList-row__2f-b .AssistanceList-content__MkJj .AssistanceList-cardGroup__ldxO {\n  height: 195px;\n  margin: 0 -15px; }\n  .AssistanceList-row__2f-b .AssistanceList-content__MkJj .AssistanceList-cardGroup__ldxO .AssistanceList-card__Amvw {\n    border: 7.5px solid #EDE9E2;\n    min-height: 195px;\n    max-height: 345px;\n    background-color: #E1D9CC; }\n    .AssistanceList-row__2f-b .AssistanceList-content__MkJj .AssistanceList-cardGroup__ldxO .AssistanceList-card__Amvw .AssistanceList-icon__bNIp {\n      height: 64px;\n      width: 64px;\n      margin-left: auto;\n      margin-right: auto;\n      margin-top: 20px; }\n    .AssistanceList-row__2f-b .AssistanceList-content__MkJj .AssistanceList-cardGroup__ldxO .AssistanceList-card__Amvw h4, .AssistanceList-row__2f-b .AssistanceList-content__MkJj .AssistanceList-cardGroup__ldxO .AssistanceList-card__Amvw h3 {\n      font-family: Arvo;\n      font-size: 21px;\n      line-height: 26px;\n      text-align: center; }\n    .AssistanceList-row__2f-b .AssistanceList-content__MkJj .AssistanceList-cardGroup__ldxO .AssistanceList-card__Amvw:hover {\n      cursor: pointer;\n      background-color: rgba(160, 85, 153, 0.2); }\n      .AssistanceList-row__2f-b .AssistanceList-content__MkJj .AssistanceList-cardGroup__ldxO .AssistanceList-card__Amvw:hover h4 {\n        color: #8D3E87; }\n\n.AssistanceList-row__2f-b .AssistanceList-content__MkJj p {\n  color: #262626;\n  font-family: Arial;\n  font-size: 15px;\n  line-height: 17px; }\n  .AssistanceList-row__2f-b .AssistanceList-content__MkJj p .AssistanceList-separator__2pXD {\n    height: 25px; }\n\n.AssistanceList-row__2f-b .AssistanceList-content__MkJj .AssistanceList-subRow__1_ZH {\n  margin: 0 -22px; }\n  .AssistanceList-row__2f-b .AssistanceList-content__MkJj .AssistanceList-subRow__1_ZH .AssistanceList-icon__bNIp {\n    height: 65px;\n    width: 65px;\n    background-color: rgba(160, 85, 153, 0.2); }\n", ""]);

// exports
exports.locals = {
	"titleStep": "AssistanceList-titleStep__Ekmq",
	"iconList": "AssistanceList-iconList__3MG9",
	"iconListAmbulance": "AssistanceList-iconListAmbulance__215Z",
	"ambulance": "AssistanceList-ambulance__13_3",
	"pharmacie": "AssistanceList-pharmacie__2oGZ",
	"row": "AssistanceList-row__2f-b",
	"content": "AssistanceList-content__MkJj",
	"cardGroup": "AssistanceList-cardGroup__ldxO",
	"card": "AssistanceList-card__Amvw",
	"icon": "AssistanceList-icon__bNIp",
	"separator": "AssistanceList-separator__2pXD",
	"subRow": "AssistanceList-subRow__1_ZH"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/ConfirmModal.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".ConfirmModal-main__13Fx {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  border: 1px solid #333;\n  background-color: #f6f6f6;\n  border-radius: 5px; }\n\n.ConfirmModal-content__1l-n {\n  padding: 15px 20px; }\n\n.ConfirmModal-actions__1b-5 {\n  padding: 10px 20px;\n  border-top: 1px solid #ddd;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: end;\n  -ms-flex-pack: end;\n  justify-content: flex-end; }\n  .ConfirmModal-actions__1b-5 > * {\n    margin: 0 5px; }\n", ""]);

// exports
exports.locals = {
	"main": "ConfirmModal-main__13Fx",
	"content": "ConfirmModal-content__1l-n",
	"actions": "ConfirmModal-actions__1b-5"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/ContactRecallModal.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".ContactRecallModal-main__1Bwn {\n  border: 1px solid #DDD;\n  overflow-y: auto;\n  max-height: 80vh;\n  max-width: 800px;\n  width: 100vw; }\n  .ContactRecallModal-main__1Bwn .ContactRecallModal-importCard__144B {\n    height: 200px;\n    width: 330px;\n    padding: 25px 20px;\n    text-align: center;\n    margin-left: 6%;\n    border: 1px solid #A05599;\n    background-color: #FFFFFF;\n    font-family: \"Arvo\", sans-serif;\n    font-size: 21px;\n    cursor: pointer; }\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-importCard__144B.ContactRecallModal-disable__wQUc {\n      cursor: no-drop; }\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-importCard__144B .ContactRecallModal-overlay__3a5F {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0, 0, 0, 0.2); }\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-importCard__144B span {\n      color: #666666;\n      font-family: Arial;\n      font-size: 15px;\n      line-height: 17px;\n      text-align: center; }\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-importCard__144B i {\n      font-size: 23px;\n      background-color: rgba(160, 85, 153, 0.2);\n      padding: 0 15px;\n      color: #A05599; }\n  .ContactRecallModal-main__1Bwn .ContactRecallModal-header__16Fj {\n    background-color: white;\n    height: 160px;\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n    padding: 10px 1px;\n    text-align: justify;\n    text-align-last: center;\n    text-transform: uppercase; }\n    @media (min-width: 770px) {\n      .ContactRecallModal-main__1Bwn .ContactRecallModal-header__16Fj {\n        padding: 16px; } }\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-header__16Fj h1 {\n      -webkit-box-flex: 1;\n      -ms-flex: 1;\n      flex: 1;\n      font-size: 24px;\n      color: #32363F;\n      letter-spacing: 1px;\n      line-height: 40px;\n      font-weight: 500; }\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-header__16Fj h2 {\n      font-size: 17px;\n      color: #535353; }\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-header__16Fj button {\n      margin-left: 5px;\n      height: 54px; }\n      @media (min-width: 770px) {\n        .ContactRecallModal-main__1Bwn .ContactRecallModal-header__16Fj button {\n          margin-left: 16px; } }\n      .ContactRecallModal-main__1Bwn .ContactRecallModal-header__16Fj button i {\n        line-height: 20px; }\n  .ContactRecallModal-main__1Bwn .ContactRecallModal-content__1ATy {\n    padding: 16px;\n    background-color: white; }\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-content__1ATy h3 {\n      font-size: 16px;\n      color: #95999D;\n      letter-spacing: 1.14px;\n      line-height: 24px;\n      margin: 0;\n      margin-bottom: 10px;\n      font-weight: lighter; }\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-content__1ATy p {\n      font-size: 16px;\n      color: #4A4A4A;\n      letter-spacing: 1.14px;\n      line-height: 24px;\n      margin: 0;\n      margin-bottom: 32px;\n      font-weight: lighter; }\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-content__1ATy p + p {\n      margin-top: -32px; }\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-content__1ATy a,\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-content__1ATy a:visited {\n      color: #4A4A4A; }\n  .ContactRecallModal-main__1Bwn .ContactRecallModal-footer__3FH- {\n    background-color: white;\n    padding: 0 0 30px 0; }\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-footer__3FH- .ContactRecallModal-footerRight__yCeu {\n      text-align: right; }\n    .ContactRecallModal-main__1Bwn .ContactRecallModal-footer__3FH- .ContactRecallModal-button__MYdg {\n      margin-right: 40px;\n      margin-top: 10px; }\n\n.ContactRecallModal-edition__3FH0 { }\n  .ContactRecallModal-edition__3FH0 .ContactRecallModal-group__150L {\n    margin-bottom: 15px; }\n    .ContactRecallModal-edition__3FH0 .ContactRecallModal-group__150L label {\n      font-size: 16px;\n      color: #A05599;\n      letter-spacing: 1.14px;\n      line-height: 24px;\n      margin-bottom: 16px;\n      display: block; }\n    .ContactRecallModal-edition__3FH0 .ContactRecallModal-group__150L input, .ContactRecallModal-edition__3FH0 .ContactRecallModal-group__150L select, .ContactRecallModal-edition__3FH0 .ContactRecallModal-group__150L textarea {\n      background: #FFFFFF;\n      font-size: 16px;\n      color: #4A4A4A;\n      letter-spacing: 1.14px;\n      border-radius: 2px;\n      display: block;\n      width: 100%;\n      height: 50px;\n      padding: 25px 20px;\n      border: 1px solid #A05599; }\n    .ContactRecallModal-edition__3FH0 .ContactRecallModal-group__150L textarea {\n      height: auto;\n      resize: vertical;\n      padding: 0; }\n    .ContactRecallModal-edition__3FH0 .ContactRecallModal-group__150L .ContactRecallModal-inline__3ofS {\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      margin-bottom: 10px; }\n  .ContactRecallModal-edition__3FH0 .ContactRecallModal-row__3yOE {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n    align-items: flex-start; }\n    .ContactRecallModal-edition__3FH0 .ContactRecallModal-row__3yOE .ContactRecallModal-group__150L {\n      -webkit-box-flex: 1;\n      -ms-flex: 1;\n      flex: 1;\n      margin-right: 10px; }\n", ""]);

// exports
exports.locals = {
	"main": "ContactRecallModal-main__1Bwn",
	"importCard": "ContactRecallModal-importCard__144B",
	"disable": "ContactRecallModal-disable__wQUc",
	"overlay": "ContactRecallModal-overlay__3a5F",
	"header": "ContactRecallModal-header__16Fj",
	"content": "ContactRecallModal-content__1ATy",
	"footer": "ContactRecallModal-footer__3FH-",
	"footerRight": "ContactRecallModal-footerRight__yCeu",
	"button": "ContactRecallModal-button__MYdg",
	"edition": "ContactRecallModal-edition__3FH0 ContactRecallModal-main__1Bwn",
	"group": "ContactRecallModal-group__150L",
	"inline": "ContactRecallModal-inline__3ofS",
	"row": "ContactRecallModal-row__3yOE"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Contacts.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Contacts-add__CQJY {\n  margin-right: 10px; }\n\n.Contacts-contentContact__3PGV {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  margin-bottom: 40px; }\n\n.Contacts-information__22MQ {\n  margin-left: 10px; }\n\n.Contacts-divContact__2RSd {\n  margin: 10px; }\n\n.Contacts-divContact__2RSd:hover {\n  cursor: pointer; }\n\n.Contacts-contactName__2UqI {\n  margin: 0;\n  font-size: 25px;\n  font-weight: 500; }\n\n.Contacts-chevron__wUY8 {\n  margin-left: 10px; }\n\n.Contacts-seperator__WBCK {\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 0;\n  border-top: 1px solid #ddd; }\n\n.Contacts-titlePage__1owt {\n  color: #A05599;\n  font-weight: bolder; }\n\n.Contacts-row__2wVu {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  margin-bottom: 30px; }\n\n.Contacts-introProches__DAWe {\n  font-size: 14px; }\n\n.Contacts-proche__32-4 {\n  font-weight: bolder;\n  font-size: 20px; }\n", ""]);

// exports
exports.locals = {
	"add": "Contacts-add__CQJY",
	"contentContact": "Contacts-contentContact__3PGV",
	"information": "Contacts-information__22MQ",
	"divContact": "Contacts-divContact__2RSd",
	"contactName": "Contacts-contactName__2UqI",
	"chevron": "Contacts-chevron__wUY8",
	"seperator": "Contacts-seperator__WBCK",
	"titlePage": "Contacts-titlePage__1owt",
	"row": "Contacts-row__2wVu",
	"introProches": "Contacts-introProches__DAWe",
	"proche": "Contacts-proche__32-4"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/DataForm.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".DataForm-main__GsxL {\n  border: 1px solid #DDD;\n  max-height: 100vh;\n  max-width: 800px;\n  width: 100vw;\n  background: white;\n  overflow-x: hidden;\n  overflow-y: auto; }\n  .DataForm-main__GsxL .DataForm-importCard__3w3e {\n    height: 165px;\n    width: 330px;\n    padding: 50px 20px;\n    text-align: center;\n    margin-left: 6%;\n    border: 1px solid #A05599;\n    background-color: #FFFFFF;\n    font-family: \"Arvo\", sans-serif;\n    font-size: 21px;\n    cursor: pointer; }\n    .DataForm-main__GsxL .DataForm-importCard__3w3e.DataForm-disable__1Pdv {\n      cursor: no-drop; }\n    .DataForm-main__GsxL .DataForm-importCard__3w3e .DataForm-overlay__1OlI {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0, 0, 0, 0.2); }\n    .DataForm-main__GsxL .DataForm-importCard__3w3e span {\n      color: #666666;\n      font-family: Arial;\n      font-size: 15px;\n      line-height: 17px;\n      text-align: center; }\n    .DataForm-main__GsxL .DataForm-importCard__3w3e i {\n      font-size: 23px;\n      background-color: rgba(160, 85, 153, 0.2);\n      padding: 0 15px;\n      color: #A05599; }\n\ninput, select, textarea {\n  background: #FFFFFF;\n  font-size: 16px;\n  color: #4A4A4A;\n  letter-spacing: 1.14px;\n  border-radius: 2px;\n  display: block;\n  width: 100%;\n  height: 50px;\n  padding: 25px 20px;\n  border: 1px solid #A05599;\n  margin-top: 10px; }\n\ntextarea {\n  height: 80px; }\n\nselect {\n  padding: 0; }\n\nlabel {\n  font-size: 16px;\n  color: #A05599;\n  letter-spacing: 1.14px;\n  line-height: 24px;\n  margin-bottom: 16px;\n  display: block;\n  font-variant: all-small-caps; }\n\n.DataForm-hidden__1hoa {\n  display: none; }\n\n.DataForm-adress__3xHT input {\n  margin: 10px; }\n\n.DataForm-header__3kRn h3 {\n  height: 39px;\n  width: 730px;\n  color: #262626;\n  font-family: Arvo;\n  font-size: 32px;\n  line-height: 40px;\n  text-align: center; }\n\n.DataForm-header__3kRn h4 {\n  height: 25px;\n  width: 730px;\n  color: #535353;\n  font-family: Arial;\n  font-size: 22px;\n  line-height: 26px;\n  text-align: center; }\n\n.DataForm-footer__3u5G {\n  margin: 20px 0;\n  text-align: right; }\n\n.DataForm-button__29hU {\n  margin-top: 20px;\n  margin-right: 20px; }\n  .DataForm-button__29hU:disabled {\n    background-color: rgba(128, 128, 128, 0.7);\n    border: 1px solid grey; }\n\n.DataForm-steps__16Wz {\n  text-align: right; }\n", ""]);

// exports
exports.locals = {
	"main": "DataForm-main__GsxL",
	"importCard": "DataForm-importCard__3w3e",
	"disable": "DataForm-disable__1Pdv",
	"overlay": "DataForm-overlay__1OlI",
	"hidden": "DataForm-hidden__1hoa",
	"adress": "DataForm-adress__3xHT",
	"header": "DataForm-header__3kRn",
	"footer": "DataForm-footer__3u5G",
	"button": "DataForm-button__29hU",
	"steps": "DataForm-steps__16Wz"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/DataTable.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".DataTable-main__1-ML {\n  margin: 16px 0px;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  border: none;\n  padding: 0px; }\n  .DataTable-main__1-ML .DataTable-row__r6VY {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: row;\n    flex-direction: row;\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n    margin: 5px 0; }\n  .DataTable-main__1-ML .DataTable-group__3wOv .DataTable-title__WXmY {\n    font-size: 30px;\n    color: #32363F;\n    letter-spacing: 1.25px;\n    line-height: 40px;\n    padding-right: 15px;\n    padding-left: 15px; }\n  .DataTable-main__1-ML .DataTable-group__3wOv h2 {\n    margin: 0px;\n    padding: 0px;\n    font-size: 30px;\n    color: #32363F;\n    letter-spacing: 1.25px;\n    line-height: 40px; }\n  .DataTable-main__1-ML .DataTable-item__3Y6j .DataTable-title__WXmY {\n    color: #757575;\n    font-family: Arial;\n    font-size: 10px;\n    font-weight: bold;\n    line-height: 11px; }\n  .DataTable-main__1-ML .DataTable-item__3Y6j .DataTable-value__3Sag {\n    color: #535353;\n    font-family: Arial;\n    font-size: 15px;\n    line-height: 30px; }\n    .DataTable-main__1-ML .DataTable-item__3Y6j .DataTable-value__3Sag .DataTable-vitem__135m {\n      min-height: 50px;\n      background-color: #E1D9CC;\n      padding: 10px;\n      margin-bottom: 15px; }\n  .DataTable-main__1-ML .DataTable-item__3Y6j td, .DataTable-main__1-ML .DataTable-item__3Y6j th {\n    border: 1px solid #AAA;\n    padding: 16px;\n    text-align: left; }\n  .DataTable-main__1-ML .DataTable-item__3Y6j th {\n    font-size: 14px;\n    color: #32363F;\n    letter-spacing: 1.17px;\n    background-color: #F6F6F6;\n    font-weight: lighter;\n    max-width: 320px; }\n  .DataTable-main__1-ML .DataTable-item__3Y6j td {\n    font-size: 14px;\n    color: #32363F;\n    letter-spacing: 1.17px;\n    font-weight: 300; }\n    .DataTable-main__1-ML .DataTable-item__3Y6j td input, .DataTable-main__1-ML .DataTable-item__3Y6j td select {\n      -webkit-appearance: none;\n      -moz-appearance: none;\n      appearance: none;\n      background: #FFFFFF;\n      border: 1px solid #9B9B9B;\n      border-radius: 2px;\n      padding: 10px 16px; }\n      .DataTable-main__1-ML .DataTable-item__3Y6j td input[type=\"text\"], .DataTable-main__1-ML .DataTable-item__3Y6j td input[type=\"number\"], .DataTable-main__1-ML .DataTable-item__3Y6j td input[type=\"email\"], .DataTable-main__1-ML .DataTable-item__3Y6j td select[type=\"text\"], .DataTable-main__1-ML .DataTable-item__3Y6j td select[type=\"number\"], .DataTable-main__1-ML .DataTable-item__3Y6j td select[type=\"email\"] {\n        display: block;\n        width: 100%; }\n", ""]);

// exports
exports.locals = {
	"main": "DataTable-main__1-ML",
	"row": "DataTable-row__r6VY",
	"group": "DataTable-group__3wOv",
	"title": "DataTable-title__WXmY",
	"item": "DataTable-item__3Y6j",
	"value": "DataTable-value__3Sag",
	"vitem": "DataTable-vitem__135m"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Devis.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Devis-mainDevis__24ke {\n  line-height: unset !important; }\n\n.Devis-titleDevis__3NGT p {\n  font-size: 17px; }\n\n.Devis-contentDevisUpload__1spo {\n  margin-top: 50px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  -webkit-box-align: end;\n  -ms-flex-align: end;\n  align-items: flex-end;\n  margin-bottom: 50px; }\n\n.Devis-contentDevisUpload__1spo h3 {\n  color: #A05599;\n  font-weight: bold; }\n\n.Devis-buttonAddDevis__3-7q {\n  min-width: 210px;\n  width: auto;\n  background-color: #A05599;\n  color: #dddddd;\n  border: 1px solid #A05599;\n  border: solid 1px #9b9b9b;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  font-family: \"Arvo\", sans-serif;\n  font-size: 0.85em;\n  letter-spacing: 1px;\n  color: #dddddd;\n  padding: 12px 15px;\n  font-weight: 300;\n  cursor: pointer; }\n\n.Devis-devisType__3OUI {\n  min-width: 210px;\n  width: auto;\n  background-color: #A05599;\n  color: #dddddd !important;\n  border: 1px solid #A05599;\n  border: solid 1px #9b9b9b;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  font-family: \"Arvo\", sans-serif;\n  font-size: 0.85em;\n  letter-spacing: 1px;\n  color: #dddddd;\n  padding: 12px 15px;\n  font-weight: 300;\n  cursor: pointer; }\n\n.Devis-dataDevis__Gntm {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: distribute;\n  justify-content: space-around;\n  border-bottom: solid 1px #b3b3b3;\n  -ms-flex-line-pack: center;\n  align-content: center;\n  padding-bottom: 15px;\n  margin-bottom: 20px; }\n\n.Devis-txtDataDevis__3nr7 {\n  border-right: solid 1px #b3b3b3;\n  padding-right: 15px; }\n  .Devis-txtDataDevis__3nr7 h3 {\n    width: 560px; }\n  .Devis-txtDataDevis__3nr7 h3:hover {\n    cursor: pointer; }\n\n.Devis-dateDataDevis__djYj {\n  background-color: #cecece;\n  height: 40px;\n  width: 185px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n  .Devis-dateDataDevis__djYj p {\n    margin: 0; }\n\n.Devis-ctnDataDateDevis__33kR {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.Devis-previewPDF__2plR {\n  height: auto;\n  width: 100%; }\n", ""]);

// exports
exports.locals = {
	"mainDevis": "Devis-mainDevis__24ke",
	"titleDevis": "Devis-titleDevis__3NGT",
	"contentDevisUpload": "Devis-contentDevisUpload__1spo",
	"buttonAddDevis": "Devis-buttonAddDevis__3-7q",
	"devisType": "Devis-devisType__3OUI",
	"dataDevis": "Devis-dataDevis__Gntm",
	"txtDataDevis": "Devis-txtDataDevis__3nr7",
	"dateDataDevis": "Devis-dateDataDevis__djYj",
	"ctnDataDateDevis": "Devis-ctnDataDateDevis__33kR",
	"previewPDF": "Devis-previewPDF__2plR"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/DirectoryPicker.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".DirectoryPicker-main__2-NE {\n  border: 1px solid #333;\n  overflow: auto;\n  border-radius: 5px; }\n\n.DirectoryPicker-container__y22N {\n  margin: 10px;\n  background-color: white;\n  height: 338px;\n  text-align: left;\n  position: relative; }\n\n.DirectoryPicker-name__3dJu {\n  cursor: pointer;\n  font-size: 14px;\n  color: #4A4A4A;\n  letter-spacing: 1px;\n  line-height: 2em;\n  display: block;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n  .DirectoryPicker-name__3dJu.DirectoryPicker-selected__231i, .DirectoryPicker-name__3dJu:hover {\n    background-color: #E7E7E7; }\n\n.DirectoryPicker-icon__2WOZ {\n  padding-right: 5px;\n  width: 15px;\n  display: inline-block; }\n  .DirectoryPicker-icon__2WOZ.DirectoryPicker-file__1a0p {\n    margin-left: 10px; }\n\n.DirectoryPicker-content__1Uvl {\n  margin: 0;\n  list-style: none;\n  margin-left: 16px;\n  padding-left: 0px;\n  position: relative; }\n", ""]);

// exports
exports.locals = {
	"main": "DirectoryPicker-main__2-NE",
	"container": "DirectoryPicker-container__y22N",
	"name": "DirectoryPicker-name__3dJu",
	"selected": "DirectoryPicker-selected__231i",
	"icon": "DirectoryPicker-icon__2WOZ",
	"file": "DirectoryPicker-file__1a0p",
	"content": "DirectoryPicker-content__1Uvl"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Documents.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Documents-breadcrums__19hf a {\n  text-decoration: none;\n  color: #333; }\n  .Documents-breadcrums__19hf a:hover {\n    color: #111;\n    text-decoration: none; }\n\n.Documents-row__3XRF {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between; }\n", ""]);

// exports
exports.locals = {
	"breadcrums": "Documents-breadcrums__19hf",
	"row": "Documents-row__3XRF"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Don.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Don-titleStep__35Sn {\n  color: #A05599 !important;\n  font-weight: bolder !important; }\n", ""]);

// exports
exports.locals = {
	"titleStep": "Don-titleStep__35Sn"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Dossier.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Dossier-delai__2NMN {\n  background-color: #E1D9CC;\n  font-family: Arial, Helvetica, sans-serif;\n  color: #333333; }\n  .Dossier-delai__2NMN p {\n    text-transform: uppercase;\n    font-weight: bolder;\n    font-size: 10px;\n    padding: 7px; }\n", ""]);

// exports
exports.locals = {
	"delai": "Dossier-delai__2NMN"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/ElementList.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".ElementList-list__3xah {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex; }\n\n.ElementList-content__1K28 img {\n  max-height: 100%;\n  display: block; }\n\n.ElementList-checkbox__1oFv {\n  font-size: 24px;\n  color: #32363F; }\n\n.ElementList-viewList__JH5R .ElementList-document__vrZL, .ElementList-viewGrid__2Ogv .ElementList-document__vrZL {\n  overflow: hidden; }\n  .ElementList-viewList__JH5R .ElementList-document__vrZL.ElementList-selected__3nhB .ElementList-content__1K28, .ElementList-viewGrid__2Ogv .ElementList-document__vrZL.ElementList-selected__3nhB .ElementList-content__1K28 {\n    background-color: #E1D9CC; }\n  .ElementList-viewList__JH5R .ElementList-document__vrZL.ElementList-selected__3nhB .ElementList-name__29OL, .ElementList-viewGrid__2Ogv .ElementList-document__vrZL.ElementList-selected__3nhB .ElementList-name__29OL {\n    background-color: #E1D9CC;\n    color: white; }\n  .ElementList-viewList__JH5R .ElementList-document__vrZL.ElementList-selected__3nhB .ElementList-contact__3rPW, .ElementList-viewGrid__2Ogv .ElementList-document__vrZL.ElementList-selected__3nhB .ElementList-contact__3rPW {\n    color: white; }\n  .ElementList-viewList__JH5R .ElementList-document__vrZL.ElementList-selected__3nhB .ElementList-type__qvYo, .ElementList-viewGrid__2Ogv .ElementList-document__vrZL.ElementList-selected__3nhB .ElementList-type__qvYo {\n    color: white; }\n  .ElementList-viewList__JH5R .ElementList-document__vrZL.ElementList-selected__3nhB .ElementList-date__3szc, .ElementList-viewGrid__2Ogv .ElementList-document__vrZL.ElementList-selected__3nhB .ElementList-date__3szc {\n    color: white; }\n  .ElementList-viewList__JH5R .ElementList-document__vrZL.ElementList-selected__3nhB .ElementList-checkbox__1oFv, .ElementList-viewGrid__2Ogv .ElementList-document__vrZL.ElementList-selected__3nhB .ElementList-checkbox__1oFv {\n    display: block;\n    color: white; }\n\n.ElementList-viewList__JH5R {\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column; }\n  .ElementList-viewList__JH5R .ElementList-document__vrZL {\n    cursor: pointer;\n    margin: 16px 0 0;\n    padding: 0 16px;\n    height: 85px;\n    background: #F6F6F6;\n    border: 1px solid #CCCCCC;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center; }\n    .ElementList-viewList__JH5R .ElementList-document__vrZL.ElementList-selected__3nhB {\n      background-color: #E1D9CC; }\n    .ElementList-viewList__JH5R .ElementList-document__vrZL .ElementList-content__1K28 {\n      height: 51px;\n      width: 60px;\n      margin: 0 16px; }\n      .ElementList-viewList__JH5R .ElementList-document__vrZL .ElementList-content__1K28 img {\n        max-width: 60px;\n        max-height: 51px; }\n    .ElementList-viewList__JH5R .ElementList-document__vrZL .ElementList-name__29OL {\n      -webkit-box-flex: 2;\n      -ms-flex: 2;\n      flex: 2; }\n    .ElementList-viewList__JH5R .ElementList-document__vrZL .ElementList-contact__3rPW {\n      display: none;\n      -webkit-box-flex: 3;\n      -ms-flex: 3;\n      flex: 3;\n      -webkit-box-pack: justify;\n      -ms-flex-pack: justify;\n      justify-content: space-between;\n      -webkit-box-orient: vertical;\n      -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n      flex-direction: column; }\n      .ElementList-viewList__JH5R .ElementList-document__vrZL .ElementList-contact__3rPW span {\n        display: inline-block;\n        margin: 0; }\n      @media (min-width: 513.33333px) {\n        .ElementList-viewList__JH5R .ElementList-document__vrZL .ElementList-contact__3rPW {\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; } }\n    .ElementList-viewList__JH5R .ElementList-document__vrZL .ElementList-date__3szc {\n      font-size: 14px;\n      color: #32363F;\n      letter-spacing: 1.17px;\n      font-weight: 100; }\n\n.ElementList-viewGrid__2Ogv {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap; }\n  .ElementList-viewGrid__2Ogv .ElementList-document__vrZL {\n    max-width: 140px;\n    margin: 16px;\n    position: relative; }\n    .ElementList-viewGrid__2Ogv .ElementList-document__vrZL .ElementList-checkbox__1oFv {\n      display: none;\n      position: absolute;\n      top: 2px;\n      left: 7px;\n      z-index: 10; }\n    .ElementList-viewGrid__2Ogv .ElementList-document__vrZL:hover .ElementList-checkbox__1oFv {\n      display: block; }\n    .ElementList-viewGrid__2Ogv .ElementList-document__vrZL .ElementList-content__1K28 {\n      width: 50vw;\n      height: 50vw;\n      max-width: 140px;\n      max-height: 140px;\n      background-color: #f6f6f6;\n      border: solid 1px #cccccc;\n      overflow: hidden;\n      cursor: pointer;\n      margin-bottom: 16px;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-align: center;\n      -ms-flex-align: center;\n      align-items: center;\n      -webkit-box-pack: center;\n      -ms-flex-pack: center;\n      justify-content: center; }\n      .ElementList-viewGrid__2Ogv .ElementList-document__vrZL .ElementList-content__1K28 img {\n        width: 70%;\n        height: auto; }\n    .ElementList-viewGrid__2Ogv .ElementList-document__vrZL .ElementList-name__29OL {\n      font-family: \"Roboto\", sans-serif;\n      font-size: 14px;\n      font-weight: 500;\n      letter-spacing: 1.2px;\n      text-align: center;\n      color: #32363f;\n      overflow: hidden;\n      -o-text-overflow: ellipsis;\n      text-overflow: ellipsis;\n      max-height: 3em; }\n    .ElementList-viewGrid__2Ogv .ElementList-document__vrZL .ElementList-contact__3rPW {\n      display: none; }\n    .ElementList-viewGrid__2Ogv .ElementList-document__vrZL .ElementList-date__3szc {\n      display: none; }\n", ""]);

// exports
exports.locals = {
	"list": "ElementList-list__3xah",
	"content": "ElementList-content__1K28",
	"checkbox": "ElementList-checkbox__1oFv",
	"viewList": "ElementList-viewList__JH5R",
	"document": "ElementList-document__vrZL",
	"viewGrid": "ElementList-viewGrid__2Ogv",
	"selected": "ElementList-selected__3nhB",
	"name": "ElementList-name__29OL",
	"contact": "ElementList-contact__3rPW",
	"type": "ElementList-type__qvYo",
	"date": "ElementList-date__3szc"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Footer.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Footer-main__1Xlr {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: end;\n  -ms-flex-align: end;\n  align-items: flex-end; }\n  .Footer-main__1Xlr .Footer-content__Qe4r {\n    font-family: 'Roboto-Light', sans-serif;\n    padding: 0px 16px;\n    font-size: 14px;\n    font-weight: 300;\n    letter-spacing: 0.9px;\n    color: #4a4a4a;\n    text-align: right; }\n    .Footer-main__1Xlr .Footer-content__Qe4r img {\n      margin: 5px;\n      height: 7vw;\n      max-height: 35px; }\n", ""]);

// exports
exports.locals = {
	"main": "Footer-main__1Xlr",
	"content": "Footer-content__Qe4r"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/FuneralList.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".FuneralList-main__1zYw {\n  position: relative; }\n  .FuneralList-main__1zYw input {\n    width: 100%;\n    padding: 10px;\n    border-radius: 10px;\n    border: 2px solid #8f8f8f;\n    max-width: 800px; }\n    .FuneralList-main__1zYw input:focus {\n      outline: 0; }\n  .FuneralList-main__1zYw .FuneralList-header__3pYy {\n    border: 15px solid #EDE9E2;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    line-height: 1px; }\n\n.FuneralList-modal__3iTu {\n  border: 1px solid #DDD;\n  max-height: 100vh;\n  max-width: 800px;\n  width: 100vw;\n  background: white;\n  text-align: right; }\n\n.FuneralList-titleHome__gHjE {\n  color: #A05599;\n  font-weight: bolder; }\n\n#FuneralList-search__1Dhc {\n  width: 100%;\n  border-radius: 20px; }\n\n.FuneralList-gaugeBox__2uDU {\n  position: fixed;\n  height: 57vh;\n  -webkit-transform: translateX(-40px);\n  -ms-transform: translateX(-40px);\n  transform: translateX(-40px);\n  width: 35px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.FuneralList-gauge__Fouu {\n  height: 95%;\n  border: 1px solid #E1D9CC;\n  border-radius: 10px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: end;\n  -ms-flex-align: end;\n  align-items: flex-end;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  width: 15px;\n  background-image: -webkit-gradient(linear, right top, left top, from(#c3c3c3), color-stop(67%, #f6f6f6));\n  background-image: -o-linear-gradient(right, #c3c3c3 0%, #f6f6f6 67%);\n  background-image: linear-gradient(to left, #c3c3c3 0%, #f6f6f6 67%);\n  overflow: hidden; }\n  .FuneralList-gauge__Fouu .FuneralList-progress__21Mi {\n    background-image: -webkit-gradient(linear, right top, left top, from(#89892b), color-stop(67%, #c8c951));\n    background-image: -o-linear-gradient(right, #89892b 0%, #c8c951 67%);\n    background-image: linear-gradient(to left, #89892b 0%, #c8c951 67%);\n    width: 100%;\n    height: 0; }\n\n.FuneralList-entries__35g2 {\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  max-width: 880px; }\n\n.FuneralList-list__2h-i {\n  padding: 0;\n  margin: 0; }\n\n.FuneralList-add__1nyE {\n  margin-right: 10px; }\n\n.FuneralList-sectionSearch__3Gak {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: end;\n  -ms-flex-align: end;\n  align-items: flex-end;\n  margin-top: 20px;\n  margin-bottom: 10px;\n  padding: 30px;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap; }\n  .FuneralList-sectionSearch__3Gak > * {\n    margin: 0; }\n  .FuneralList-sectionSearch__3Gak h3 {\n    -webkit-box-flex: 1;\n    -ms-flex: 1;\n    flex: 1; }\n\n.FuneralList-row__1rr4 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-bottom: 10px;\n  border: 14px solid #EDE9E2;\n  cursor: pointer; }\n  .FuneralList-row__1rr4.FuneralList-disable__2sZR {\n    opacity: 0.4; }\n\n.FuneralList-rowAd__WMlb {\n  background-color: #E1D9CC;\n  border: 20px solid #E1D9CC;\n  width: 100%; }\n  .FuneralList-rowAd__WMlb .FuneralList-firstTitle__2EEk {\n    margin-bottom: 10px;\n    font-family: Arial;\n    font-size: 16px;\n    font-weight: bold;\n    line-height: 18px; }\n  .FuneralList-rowAd__WMlb .FuneralList-secondTitle__1Fy1 {\n    margin-bottom: 10px;\n    color: #262626;\n    font-family: Arvo;\n    font-size: 21px;\n    line-height: 26px; }\n  .FuneralList-rowAd__WMlb .FuneralList-Adtext__2zWZ {\n    margin-bottom: 10px;\n    color: #535353;\n    font-family: Arial;\n    font-size: 15px;\n    line-height: 17px; }\n\n.FuneralList-profileLink__2Ui2 {\n  padding: 10px;\n  text-decoration: underline;\n  color: #262626;\n  /* visited link */\n  /* mouse over link */\n  /* selected link */ }\n  .FuneralList-profileLink__2Ui2:link {\n    color: #262626; }\n  .FuneralList-profileLink__2Ui2:visited {\n    color: #262626; }\n  .FuneralList-profileLink__2Ui2:hover {\n    color: #262626;\n    cursor: pointer;\n    background-color: #E1D9CC; }\n  .FuneralList-profileLink__2Ui2:active {\n    color: #262626; }\n\n.FuneralList-col__1_yX {\n  height: 50px;\n  border-left: 0;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.FuneralList-check__2xGp {\n  background-color: #EDE9E2;\n  width: 75px;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  font-size: 30px;\n  color: white;\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 50px;\n  flex: 0 0 50px;\n  border-right: 1px solid #CCCCCC;\n  border-left: 1px solid #CCCCCC;\n  padding: 23px; }\n  .FuneralList-check__2xGp.FuneralList-checked__1-lF {\n    color: #A05599; }\n  .FuneralList-check__2xGp .FuneralList-circle__20BQ {\n    border: 3px solid;\n    border-radius: 50%;\n    padding: 10px;\n    height: 48px;\n    border-color: #E1D9CC;\n    color: #757575;\n    min-width: 48px;\n    font-family: \"Arial\", sans-serif;\n    font-size: 10px;\n    font-weight: bold;\n    line-height: 24px;\n    text-align: center; }\n\n.FuneralList-name__1k1n {\n  padding: 0 20px;\n  -webkit-box-flex: 9999;\n  -ms-flex: 9999 0 210px;\n  flex: 9999 0 210px;\n  color: #262626;\n  font-family: Arvo;\n  font-size: 21px;\n  line-height: 26px; }\n\n.FuneralList-excerpt__m5dY {\n  color: #535353;\n  font-family: Arial;\n  font-size: 15px;\n  line-height: 17px; }\n\n.FuneralList-button__3gnD {\n  -webkit-box-flex: 1;\n  -ms-flex: 1 0 130px;\n  flex: 1 0 130px;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center; }\n  @media (max-width: 449px) {\n    .FuneralList-button__3gnD {\n      border-top: 0;\n      border-left: 1px solid #333; } }\n\n.FuneralList-legend__3Qvj {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap; }\n  .FuneralList-legend__3Qvj li {\n    -webkit-box-flex: 1;\n    -ms-flex: 1;\n    flex: 1;\n    margin: 0 5px; }\n\n.FuneralList-legendRow__3F8T {\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  -ms-flex-wrap: nowrap;\n  flex-wrap: nowrap; }\n\n.FuneralList-legendName__5_Kq {\n  padding: 0 10px;\n  font-size: 13px;\n  -webkit-box-flex: 1;\n  -ms-flex: 1 0 0%;\n  flex: 1 0 0%;\n  height: 35px;\n  white-space: nowrap; }\n\n.FuneralList-legendCheck__N85d {\n  height: 35px;\n  width: 35px;\n  font-size: 20px;\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 35px;\n  flex: 0 0 35px; }\n\n.FuneralList-separator__3rzH {\n  height: 2px;\n  width: 105%;\n  margin: 15px auto 15px auto;\n  border-bottom: 1px solid #CCCCCC; }\n\n.FuneralList-AdlinkObseque__3h7- {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  background-color: #A05599;\n  color: white !important;\n  padding: 18px;\n  font-family: Arvo;\n  font-size: 13px;\n  line-height: 15px; }\n\n.FuneralList-Adlink__3QxK {\n  color: #262626;\n  font-family: Arvo;\n  font-size: 13px;\n  line-height: 15px;\n  /* visited link */\n  /* mouse over link */\n  /* selected link */ }\n  .FuneralList-Adlink__3QxK span:link, .FuneralList-Adlink__3QxK a:link {\n    color: #262626; }\n  .FuneralList-Adlink__3QxK span:visited, .FuneralList-Adlink__3QxK a:visited {\n    color: #262626; }\n  .FuneralList-Adlink__3QxK span:hover, .FuneralList-Adlink__3QxK a:hover {\n    color: #262626;\n    cursor: pointer;\n    text-decoration: underline; }\n  .FuneralList-Adlink__3QxK span:active, .FuneralList-Adlink__3QxK a:active {\n    color: #262626; }\n\n.FuneralList-ModalMain__K3rR {\n  border: 1px solid #DDD;\n  max-height: 80vh;\n  max-width: 800px;\n  width: 100vw; }\n\n.FuneralList-edition__26NT { }\n  .FuneralList-edition__26NT .FuneralList-group__6BdA {\n    margin-bottom: 15px; }\n    .FuneralList-edition__26NT .FuneralList-group__6BdA label {\n      font-size: 16px;\n      color: #A05599;\n      letter-spacing: 1.14px;\n      line-height: 24px;\n      margin-bottom: 16px;\n      display: block; }\n    .FuneralList-edition__26NT .FuneralList-group__6BdA input, .FuneralList-edition__26NT .FuneralList-group__6BdA select, .FuneralList-edition__26NT .FuneralList-group__6BdA textarea {\n      background: #FFFFFF;\n      font-size: 16px;\n      color: #4A4A4A;\n      letter-spacing: 1.14px;\n      border-radius: 2px;\n      display: block;\n      width: 100%;\n      height: 50px;\n      padding: 25px 20px;\n      border: 1px solid #A05599; }\n    .FuneralList-edition__26NT .FuneralList-group__6BdA select {\n      padding: 0; }\n    .FuneralList-edition__26NT .FuneralList-group__6BdA textarea {\n      height: auto;\n      resize: vertical; }\n    .FuneralList-edition__26NT .FuneralList-group__6BdA .FuneralList-inline__3oIN {\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      margin-bottom: 10px; }\n  .FuneralList-edition__26NT .FuneralList-row__1rr4 {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n    align-items: flex-start;\n    border: none; }\n    .FuneralList-edition__26NT .FuneralList-row__1rr4 .FuneralList-group__6BdA {\n      -webkit-box-flex: 1;\n      -ms-flex: 1;\n      flex: 1;\n      margin-right: 10px; }\n  .FuneralList-edition__26NT .FuneralList-header__3pYy {\n    background-color: white;\n    height: 160px;\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n    padding: 10px 1px;\n    text-align: justify;\n    text-align-last: center;\n    text-transform: uppercase; }\n    @media (min-width: 770px) {\n      .FuneralList-edition__26NT .FuneralList-header__3pYy {\n        padding: 16px; } }\n    .FuneralList-edition__26NT .FuneralList-header__3pYy h1 {\n      -webkit-box-flex: 1;\n      -ms-flex: 1;\n      flex: 1;\n      font-size: 24px;\n      color: #32363F;\n      letter-spacing: 1px;\n      line-height: 40px;\n      font-weight: 500; }\n    .FuneralList-edition__26NT .FuneralList-header__3pYy h2 {\n      font-size: 17px;\n      color: #535353; }\n    .FuneralList-edition__26NT .FuneralList-header__3pYy button {\n      margin-left: 5px;\n      height: 54px; }\n      @media (min-width: 770px) {\n        .FuneralList-edition__26NT .FuneralList-header__3pYy button {\n          margin-left: 16px; } }\n      .FuneralList-edition__26NT .FuneralList-header__3pYy button i {\n        line-height: 20px; }\n  .FuneralList-edition__26NT .FuneralList-content__Oa1- {\n    padding: 16px;\n    background-color: white; }\n    .FuneralList-edition__26NT .FuneralList-content__Oa1- h3 {\n      font-size: 16px;\n      color: #95999D;\n      letter-spacing: 1.14px;\n      line-height: 24px;\n      margin: 0;\n      margin-bottom: 10px;\n      font-weight: lighter; }\n    .FuneralList-edition__26NT .FuneralList-content__Oa1- p {\n      font-size: 16px;\n      color: #4A4A4A;\n      letter-spacing: 1.14px;\n      line-height: 24px;\n      margin: 0;\n      margin-bottom: 32px;\n      font-weight: lighter; }\n    .FuneralList-edition__26NT .FuneralList-content__Oa1- p + p {\n      margin-top: -32px; }\n    .FuneralList-edition__26NT .FuneralList-content__Oa1- a,\n    .FuneralList-edition__26NT .FuneralList-content__Oa1- a:visited {\n      color: #4A4A4A; }\n  .FuneralList-edition__26NT .FuneralList-footer__150b {\n    background-color: white;\n    padding: 0 0 30px 0; }\n    .FuneralList-edition__26NT .FuneralList-footer__150b button {\n      margin-right: 35px; }\n    .FuneralList-edition__26NT .FuneralList-footer__150b .FuneralList-footerRight__3x4v {\n      text-align: right; }\n    .FuneralList-edition__26NT .FuneralList-footer__150b .FuneralList-button__3gnD {\n      margin-right: 30px; }\n\n.FuneralList-icon__3qm2 {\n  font-size: 25px;\n  background-color: rgba(160, 85, 153, 0.2);\n  color: #A05599;\n  padding: 10px 20px;\n  border-radius: 65%;\n  margin: 0 15px 0px 0px; }\n\n.FuneralList-done__1cdk {\n  width: 45px; }\n\n.FuneralList-introHome__1iWY, .FuneralList-introFuneral__10bC {\n  font-size: 17px; }\n\n.FuneralList-introContact__2LCS {\n  padding: 28px;\n  font-size: 18px; }\n", ""]);

// exports
exports.locals = {
	"main": "FuneralList-main__1zYw",
	"header": "FuneralList-header__3pYy",
	"modal": "FuneralList-modal__3iTu",
	"titleHome": "FuneralList-titleHome__gHjE",
	"search": "FuneralList-search__1Dhc",
	"gaugeBox": "FuneralList-gaugeBox__2uDU",
	"gauge": "FuneralList-gauge__Fouu",
	"progress": "FuneralList-progress__21Mi",
	"entries": "FuneralList-entries__35g2",
	"list": "FuneralList-list__2h-i",
	"add": "FuneralList-add__1nyE",
	"sectionSearch": "FuneralList-sectionSearch__3Gak",
	"row": "FuneralList-row__1rr4",
	"disable": "FuneralList-disable__2sZR",
	"rowAd": "FuneralList-rowAd__WMlb",
	"firstTitle": "FuneralList-firstTitle__2EEk",
	"secondTitle": "FuneralList-secondTitle__1Fy1",
	"Adtext": "FuneralList-Adtext__2zWZ",
	"profileLink": "FuneralList-profileLink__2Ui2",
	"col": "FuneralList-col__1_yX",
	"check": "FuneralList-check__2xGp FuneralList-col__1_yX",
	"checked": "FuneralList-checked__1-lF",
	"circle": "FuneralList-circle__20BQ",
	"name": "FuneralList-name__1k1n",
	"excerpt": "FuneralList-excerpt__m5dY",
	"button": "FuneralList-button__3gnD FuneralList-col__1_yX",
	"legend": "FuneralList-legend__3Qvj FuneralList-list__2h-i",
	"legendRow": "FuneralList-legendRow__3F8T FuneralList-row__1rr4",
	"legendName": "FuneralList-legendName__5_Kq FuneralList-col__1_yX FuneralList-name__1k1n",
	"legendCheck": "FuneralList-legendCheck__N85d FuneralList-col__1_yX FuneralList-check__2xGp FuneralList-col__1_yX",
	"separator": "FuneralList-separator__3rzH",
	"AdlinkObseque": "FuneralList-AdlinkObseque__3h7-",
	"Adlink": "FuneralList-Adlink__3QxK",
	"ModalMain": "FuneralList-ModalMain__K3rR",
	"edition": "FuneralList-edition__26NT FuneralList-ModalMain__K3rR",
	"group": "FuneralList-group__6BdA",
	"inline": "FuneralList-inline__3oIN",
	"content": "FuneralList-content__Oa1-",
	"footer": "FuneralList-footer__150b",
	"footerRight": "FuneralList-footerRight__3x4v",
	"icon": "FuneralList-icon__3qm2",
	"done": "FuneralList-done__1cdk",
	"introHome": "FuneralList-introHome__1iWY",
	"introFuneral": "FuneralList-introFuneral__10bC",
	"introContact": "FuneralList-introContact__2LCS"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/ImporterModal.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".ImporterModal-main__hcYS {\n  width: 100vw;\n  max-width: 600px;\n  background: #FFF;\n  -webkit-box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2);\n  box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2);\n  padding: 16px;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  margin-bottom: 40px; }\n\n.ImporterModal-header__2MBe {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.ImporterModal-content__T3K8 {\n  padding: 25px 0; }\n\n.ImporterModal-footer__Ofyh {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap; }\n\n.ImporterModal-dropzone__3MEO {\n  height: 355px;\n  width: 100%;\n  overflow: auto;\n  border-color: grey;\n  border-width: 2px;\n  border-style: dashed;\n  border-radius: 5px;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  padding: 5px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-top: 5px;\n  position: relative; }\n  .ImporterModal-dropzone__3MEO.ImporterModal-active__2l-g {\n    border-color: steelblue;\n    background-color: rgba(10, 158, 200, 0.1); }\n\n.ImporterModal-message__XZ8w {\n  text-align: center;\n  text-transform: uppercase;\n  color: rgba(0, 0, 0, 0.3);\n  font-weight: bold;\n  font-size: 50px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n  -ms-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  width: 100%;\n  max-width: 250px; }\n\n.ImporterModal-doc__3W60 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  border: 1px solid grey;\n  border-radius: 10px;\n  height: 32vw;\n  width: 32vw;\n  max-width: 150px;\n  max-height: 190px;\n  margin: 10px;\n  padding: 5px 0; }\n\n.ImporterModal-image__3bH1 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  width: 100%; }\n  .ImporterModal-image__3bH1 img {\n    border-radius: 5px;\n    max-width: 85%;\n    max-height: 100%;\n    width: 100%; }\n\n.ImporterModal-docName__aNfx {\n  margin: 5px 0;\n  overflow: hidden;\n  max-width: 130px; }\n\n.ImporterModal-select__384h {\n  width: 90%; }\n", ""]);

// exports
exports.locals = {
	"main": "ImporterModal-main__hcYS",
	"header": "ImporterModal-header__2MBe",
	"content": "ImporterModal-content__T3K8",
	"footer": "ImporterModal-footer__Ofyh",
	"dropzone": "ImporterModal-dropzone__3MEO",
	"active": "ImporterModal-active__2l-g",
	"message": "ImporterModal-message__XZ8w",
	"doc": "ImporterModal-doc__3W60",
	"image": "ImporterModal-image__3bH1",
	"docName": "ImporterModal-docName__aNfx",
	"select": "ImporterModal-select__384h"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Loader.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Localisation.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Localisation-controls__2Ap9 {\n  height: 48px !important;\n  width: 300px !important;\n  border: 4px solid #E1D9CC !important;\n  border-radius: 4px !important;\n  background-color: #FFFFFF !important;\n  font-family: Arial, Helvetica, sans-serif;\n  background-image: url(\"/media/search.png\");\n  background-repeat: no-repeat;\n  background-position: right center;\n  background-origin: content-box; }\n\n.Localisation-contentMap__1oeZ {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex; }\n\n#Localisation-type-selector__2lCs {\n  color: #fff;\n  background-color: #4d90fe;\n  padding: 5px 11px 0px 11px; }\n\n#Localisation-type-selector__2lCs label {\n  font-family: Roboto;\n  font-size: 13px;\n  font-weight: 300; }\n\n#Localisation-target__2bNL {\n  width: 345px; }\n\n.Localisation-map__3AEn {\n  position: relative;\n  overflow: hidden;\n  width: 500px;\n  height: 500px; }\n\nhtml, body {\n  height: 100%;\n  margin: 0;\n  padding: 0; }\n\n.Localisation-right__xxbI {\n  width: 100%;\n  height: 100%; }\n\n.Localisation-dataAdress__1O5t {\n  line-height: 15px; }\n\n.Localisation-printedAddress__1NI5 {\n  height: 460px;\n  overflow-y: auto;\n  overflow-x: hidden; }\n\n.Localisation-dataOpening__1U-t {\n  line-height: 30px; }\n\n.Localisation-row__18AR {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-bottom: 10px;\n  border: 14px solid #EDE9E2; }\n\n.Localisation-name__A_GE {\n  -webkit-box-flex: 9999;\n  -ms-flex: 9999 0 210px;\n  flex: 9999 0 210px;\n  color: #262626;\n  font-family: Arvo;\n  font-size: 21px;\n  line-height: 26px; }\n", ""]);

// exports
exports.locals = {
	"controls": "Localisation-controls__2Ap9",
	"contentMap": "Localisation-contentMap__1oeZ",
	"type-selector": "Localisation-type-selector__2lCs",
	"target": "Localisation-target__2bNL",
	"map": "Localisation-map__3AEn",
	"right": "Localisation-right__xxbI",
	"dataAdress": "Localisation-dataAdress__1O5t",
	"printedAddress": "Localisation-printedAddress__1NI5",
	"dataOpening": "Localisation-dataOpening__1U-t",
	"row": "Localisation-row__18AR",
	"name": "Localisation-name__A_GE"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Modal.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Modal-modal__1R1A {\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  z-index: 30;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  font-family: \"Roboto\";\n  background-color: rgba(0, 0, 0, 0.4);\n  -webkit-transition: all 0.2s linear;\n  -o-transition: all 0.2s linear;\n  transition: all 0.2s linear; }\n\n.Modal-popup__1PDE {\n  position: fixed;\n  top: 10%;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n  -ms-transform: translateX(-50%);\n  transform: translateX(-50%);\n  z-index: 30;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  font-family: \"Roboto\";\n  opacity: 0;\n  max-width: 350px;\n  width: 100%;\n  border: 1px solid #333;\n  background-color: #f6f6f6;\n  border-radius: 5px;\n  -webkit-box-shadow: 0 2px 20px rgba(0, 0, 0, 0.4);\n  box-shadow: 0 2px 20px rgba(0, 0, 0, 0.4); }\n  .Modal-popup__1PDE .Modal-header__VQaj {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    padding: 0 20px; }\n    .Modal-popup__1PDE .Modal-header__VQaj h2 {\n      -webkit-box-flex: 1;\n      -ms-flex: 1;\n      flex: 1;\n      margin: 10px 0; }\n  .Modal-popup__1PDE .Modal-content__3a9f {\n    padding: 5px 20px;\n    text-align: justify;\n    word-wrap: break-word; }\n  .Modal-popup__1PDE.Modal-openActive__V6N9 {\n    -webkit-transition: all 0.3s ease-in-out;\n    -o-transition: all 0.3s ease-in-out;\n    transition: all 0.3s ease-in-out;\n    opacity: 1; }\n  .Modal-popup__1PDE.Modal-closeActive__aGe0 {\n    -webkit-transition: all 0.2s ease-in-out;\n    -o-transition: all 0.2s ease-in-out;\n    transition: all 0.2s ease-in-out; }\n  .Modal-popup__1PDE.Modal-error__3NZo {\n    color: white;\n    background-color: #ff3f3a; }\n", ""]);

// exports
exports.locals = {
	"modal": "Modal-modal__1R1A",
	"popup": "Modal-popup__1PDE",
	"header": "Modal-header__VQaj",
	"content": "Modal-content__3a9f",
	"openActive": "Modal-openActive__V6N9",
	"closeActive": "Modal-closeActive__aGe0",
	"error": "Modal-error__3NZo"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Navigation.scss":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("./node_modules/css-loader/lib/url/escape.js");
exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: 'Roboto-Thin';\n  font-style: normal;\n  font-weight: 100;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-Thin.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-ThinItalic';\n  font-style: italic;\n  font-weight: 100;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-ThinItalic.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-Light';\n  font-style: normal;\n  font-weight: 300;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-Light.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-LightItalic';\n  font-style: italic;\n  font-weight: 300;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-LightItalic.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-Regular.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-Italic';\n  font-style: normal;\n  font-weight: 400;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-Italic.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-Bold';\n  font-style: normal;\n  font-weight: 700;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-Bold.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Roboto-BoldItalic';\n  font-style: italic;\n  font-weight: 700;\n  src: url(" + escape(__webpack_require__("./src/fonts/Roboto-BoldItalic.ttf")) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: Arvo;\n  font-style: normal;\n  font-weight: 100;\n  src: url(" + escape(__webpack_require__("./src/fonts/Arvo-Regular.ttf")) + ") format(\"truetype\"); }\n\n.Navigation-main__MYXG {\n  font-family: \"Roboto-Light\";\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  overflow: auto;\n  background-color: #EDE9E2;\n  width: 0;\n  padding: 0;\n  position: fixed; }\n\n.Navigation-divLogo__XJbq {\n  margin-bottom: 20px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n  .Navigation-divLogo__XJbq .Navigation-logoMaif__3yIR {\n    width: 80px;\n    height: 80px; }\n\n.Navigation-nav__12UG {\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  background-color: #EDE9E2;\n  z-index: 20; }\n\n.Navigation-seperator__1-De {\n  border-top-color: #CCCCCC; }\n\n.Navigation-list__3ZY9 {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap; }\n\n.Navigation-chevron__1vzP {\n  margin-right: 10px; }\n\n.Navigation-button__210t {\n  color: \"#262626\";\n  border: 1px solid;\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  margin: 10px;\n  max-height: 50px; }\n  .Navigation-button__210t i {\n    margin-right: 0;\n    color: \"#262626\"; }\n  .Navigation-button__210t a {\n    font-size: 18px;\n    line-height: 21px;\n    text-decoration: none;\n    width: 100%;\n    text-transform: uppercase !important;\n    height: 100%;\n    font-weight: bolder;\n    letter-spacing: 1.5px;\n    color: inherit;\n    text-decoration: none;\n    display: block;\n    cursor: pointer;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    padding: 5px;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    text-align: center;\n    overflow: hidden; }\n  .Navigation-button__210t .Navigation-active__3x_c, .Navigation-button__210t a:hover, .Navigation-button__210t .Navigation-button__210t:hover {\n    background-color: transparent;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n    color: \"#262626\";\n    text-decoration: none;\n    text-transform: uppercase !important; }\n    .Navigation-button__210t .Navigation-active__3x_c i, .Navigation-button__210t a:hover i, .Navigation-button__210t .Navigation-button__210t:hover i {\n      color: \"#262626\"; }\n\n.Navigation-help__2OJH {\n  color: #888888;\n  font-weight: bolder;\n  font-size: 12px; }\n\n@media (min-width: 770px) {\n  .Navigation-main__MYXG {\n    width: 275px;\n    padding: 19px 0;\n    margin-left: 155px; }\n  .Navigation-nav__12UG {\n    position: static;\n    background-color: transparent; }\n  .Navigation-list__3ZY9 {\n    display: block; }\n  .Navigation-button__210t {\n    border: 0;\n    max-height: initial; }\n    .Navigation-button__210t i {\n      margin-right: 14px; }\n    .Navigation-button__210t a {\n      font-size: 18px;\n      display: block;\n      padding: 15px 13px;\n      text-align: left; }\n      .Navigation-button__210t a:hover {\n        background-color: #E1D9CC;\n        color: inherit; }\n    .Navigation-button__210t .Navigation-active__3x_c, .Navigation-button__210t a:hover, .Navigation-button__210t .Navigation-button__210t:hover {\n      background-color: #E1D9CC;\n      color: inherit; } }\n", ""]);

// exports
exports.locals = {
	"main": "Navigation-main__MYXG",
	"divLogo": "Navigation-divLogo__XJbq",
	"logoMaif": "Navigation-logoMaif__3yIR",
	"nav": "Navigation-nav__12UG",
	"seperator": "Navigation-seperator__1-De",
	"list": "Navigation-list__3ZY9",
	"chevron": "Navigation-chevron__1vzP",
	"button": "Navigation-button__210t",
	"active": "Navigation-active__3x_c",
	"help": "Navigation-help__2OJH"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Page.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Page-main__2Hx- {\n  display: block;\n  margin-left: 400px;\n  position: absolute;\n  padding: 19px; }\n\n.Page-flex__1Ds4 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column; }\n\n.Page-titlePage__2Sgd {\n  color: #A05599;\n  font-weight: bolder; }\n\n.Page-information__14_W {\n  margin-left: 10px; }\n\n.Page-header__3Lgz {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  border-bottom: 1px solid #ddd;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  padding: 8px 10px 0 10px; }\n  @media (min-width: 770px) {\n    .Page-header__3Lgz {\n      padding-left: 32px;\n      padding-right: 32px; } }\n  .Page-header__3Lgz h1 {\n    font-size: 32px; }\n  .Page-header__3Lgz h2 {\n    font-size: 22px;\n    font-family: \"Arial\", sans-serif;\n    color: #535353; }\n\n.Page-row1__2eqI {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  padding: 0;\n  padding-bottom: 5px;\n  min-height: 42px;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-pack: end;\n  -ms-flex-pack: end;\n  justify-content: flex-end; }\n  @media (min-width: 770px) {\n    .Page-row1__2eqI {\n      padding: 14px 0; } }\n\n.Page-row2__6s_X {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  padding: 12px 0;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box; }\n  .Page-row2__6s_X:empty {\n    padding: 0; }\n\n.Page-simpleList__2nmL {\n  list-style: none;\n  margin: 0;\n  padding: 0; }\n\n.Page-actions__1p5E {\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  margin-top: 4px; }\n  .Page-actions__1p5E li {\n    margin-left: 10px; }\n\n.Page-options__il5- {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box; }\n\n.Page-headline__2xit {\n  margin: 0;\n  letter-spacing: 1px;\n  font-weight: 500;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box; }\n\n.Page-title__23R6 {\n  font-size: 20px;\n  height: 44px;\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.Page-subtitle__BIzQ {\n  font-size: 12px; }\n\n.Page-content__27B6 {\n  padding: 16px 10px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column; }\n  @media (min-width: 770px) {\n    .Page-content__27B6 {\n      padding-left: 32px;\n      padding-right: 32px; } }\n\n.Page-back__3Tkp {\n  color: #333;\n  padding: 6px 14px;\n  font-size: 22px;\n  margin-right: 15px; }\n  .Page-back__3Tkp i {\n    margin: 0 !important; }\n\n@media (min-width: 770px) {\n  .Page-title__23R6 {\n    -webkit-box-ordinal-group: 3;\n    -ms-flex-order: 2;\n    order: 2;\n    min-width: auto;\n    font-size: 24px;\n    height: auto; }\n  .Page-actions__1p5E {\n    -webkit-box-ordinal-group: 4;\n    -ms-flex-order: 3;\n    order: 3;\n    margin: 0; }\n  .Page-back__3Tkp {\n    -webkit-box-ordinal-group: 2;\n    -ms-flex-order: 1;\n    order: 1; } }\n", ""]);

// exports
exports.locals = {
	"main": "Page-main__2Hx-",
	"flex": "Page-flex__1Ds4",
	"titlePage": "Page-titlePage__2Sgd",
	"information": "Page-information__14_W",
	"header": "Page-header__3Lgz",
	"row1": "Page-row1__2eqI",
	"row2": "Page-row2__6s_X",
	"simpleList": "Page-simpleList__2nmL",
	"actions": "Page-actions__1p5E Page-simpleList__2nmL",
	"options": "Page-options__il5- Page-simpleList__2nmL",
	"headline": "Page-headline__2xit",
	"title": "Page-title__23R6 Page-headline__2xit",
	"subtitle": "Page-subtitle__BIzQ Page-headline__2xit",
	"content": "Page-content__27B6",
	"back": "Page-back__3Tkp"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Preferences.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Preferences-title__3wFt {\n  font-weight: 500; }\n\n.Preferences-article__2i-q {\n  background-color: #f6f6f6;\n  border: solid 1px #cccccc;\n  padding: 16px; }\n  .Preferences-article__2i-q p {\n    margin-top: 0px; }\n  .Preferences-article__2i-q button {\n    margin: 5px; }\n\n.Preferences-load__6i0j::after {\n  content: \"\";\n  width: 30px;\n  height: 30px;\n  display: inline-block;\n  vertical-align: middle;\n  background-position: center;\n  background-size: cover;\n  margin-left: 8px; }\n", ""]);

// exports
exports.locals = {
	"title": "Preferences-title__3wFt",
	"article": "Preferences-article__2i-q",
	"load": "Preferences-load__6i0j"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Prestataire.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Prestataire-titlePresta__3rA1 h3 {\n  color: #A05599;\n  font-weight: bold; }\n\n.Prestataire-containerPicto__1iYQ {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: space-evenly;\n  -ms-flex-pack: space-evenly;\n  justify-content: space-evenly;\n  margin-bottom: 20px; }\n\n.Prestataire-contentCube__37vh {\n  background-color: #E1D9CC;\n  display: block;\n  text-align: -webkit-center;\n  width: 250px;\n  height: 196px;\n  padding-top: 29px; }\n\n.Prestataire-contentCube__37vh:hover {\n  color: #A05599;\n  background-color: rgba(160, 85, 152, 0.445);\n  cursor: pointer; }\n\n.Prestataire-contentCube__37vh h4 {\n  color: inherit;\n  text-transform: none;\n  text-decoration: none;\n  font-weight: 600; }\n\n.Prestataire-stepDiv__3oc7 {\n  background-color: #E1D9CC;\n  padding: 5px 0px 5px 5px; }\n\n.Prestataire-stepDiv__3oc7 p {\n  text-transform: uppercase;\n  font-weight: bold;\n  margin: 0; }\n\n.Prestataire-contentStep__3A9O {\n  border-bottom: 1px solid #ddd;\n  margin: 40px 0px 40px 40px; }\n\n.Prestataire-contentStep__3A9O h3 {\n  font-weight: bold; }\n\n.Prestataire-imgLocalisation__1m-X {\n  background-image: url(\"/media/localisation.png\");\n  width: 50px;\n  height: 50px;\n  background-size: contain; }\n\n.Prestataire-imgLocalisationHover__-w6v {\n  background-image: url(\"/media/localisationOnHover.png\");\n  width: 50px;\n  height: 50px;\n  background-size: contain; }\n\na, a:hover {\n  color: inherit !important;\n  text-transform: none !important;\n  text-decoration: none !important; }\n", ""]);

// exports
exports.locals = {
	"titlePresta": "Prestataire-titlePresta__3rA1",
	"containerPicto": "Prestataire-containerPicto__1iYQ",
	"contentCube": "Prestataire-contentCube__37vh",
	"stepDiv": "Prestataire-stepDiv__3oc7",
	"contentStep": "Prestataire-contentStep__3A9O",
	"imgLocalisation": "Prestataire-imgLocalisation__1m-X",
	"imgLocalisationHover": "Prestataire-imgLocalisationHover__-w6v"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Retraite.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".Retraite-titleRetraite__2Xpa {\n  color: #A05599 !important;\n  font-weight: bolder !important; }\n\n.Retraite-titleRetraiteCourrier__2CwV {\n  color: #A05599 !important;\n  font-weight: bolder !important;\n  margin-left: -15px; }\n\n.Retraite-dataTxt__39zR {\n  margin: 10px;\n  line-height: initial;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 20px;\n  margin-bottom: 30px; }\n\nlabel {\n  font-family: Arial, Helvetica, sans-serif;\n  color: #888888;\n  text-transform: uppercase;\n  letter-spacing: normal; }\n\n.Retraite-inputForm__16U1 {\n  width: 100% !important;\n  background-color: #E1D9CC;\n  color: #666666;\n  font-family: Arial;\n  font-size: 15px;\n  line-height: 17px;\n  border: solid 1px #E1D9CC !important;\n  border-radius: 0px !important;\n  max-width: 100% !important; }\n\n.Retraite-adresse__zBAf {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: start;\n  -ms-flex-pack: start;\n  justify-content: flex-start;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  margin-bottom: 20px; }\n\n.Retraite-adaptSize__2BCB {\n  margin-left: 30px; }\n\n.Retraite-adaptSizeT__1UDG {\n  width: 300px !important;\n  max-width: 300px !important;\n  margin-right: 20px; }\n\n.Retraite-sizeRue__YDdN {\n  width: 645px !important; }\n\n.Retraite-labelAdresse__1UOw {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  -webkit-box-pack: start;\n  -ms-flex-pack: start;\n  justify-content: flex-start; }\n  .Retraite-labelAdresse__1UOw label {\n    margin-right: 140px; }\n\n.Retraite-labelDemarche__2ln0 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  -webkit-box-pack: start;\n  -ms-flex-pack: start;\n  justify-content: flex-start; }\n  .Retraite-labelDemarche__2ln0 label {\n    margin-right: 205px; }\n\n.Retraite-afour__3mi3 {\n  background: white;\n  width: 21cm;\n  height: 29.7cm;\n  font-size: 17px;\n  display: block;\n  margin: 0 auto;\n  margin-bottom: 0.5cm;\n  -webkit-box-shadow: 0 0 0.5cm rgba(0, 0, 0, 0.5);\n  box-shadow: 0 0 0.5cm rgba(0, 0, 0, 0.5);\n  font-family: Arial, Helvetica, sans-serif; }\n\n@media print {\n  body, .Retraite-afour__3mi3 {\n    margin: 0;\n    -webkit-box-shadow: 0;\n    box-shadow: 0; } }\n\n.Retraite-expediteur__3OPE {\n  width: 220px;\n  padding-top: 40px;\n  padding-left: 50px; }\n\n.Retraite-ToCaisse__3rUB {\n  padding-left: 500px;\n  padding-top: 40px; }\n\n.Retraite-date__1dw3 {\n  margin-top: 40px; }\n\n.Retraite-contentLetter__1DUG {\n  margin: 60px; }\n\n.Retraite-signature__3ZyG {\n  margin-left: 470px;\n  margin-top: 70px; }\n\n.Retraite-mention__AYPc {\n  margin-top: 200px;\n  margin-left: 50px; }\n\n.Retraite-mentionComplementaire__9X7J {\n  margin-top: 100px !important;\n  margin-left: 60px; }\n\n.Retraite-mentionBanque__1JN- {\n  margin-top: 160px;\n  margin-left: 50px; }\n\n.Retraite-mentionEmployeur__c5Ll {\n  margin-top: 90px;\n  margin-left: 50px; }\n\n.Retraite-mentionAssurance__NTFm {\n  margin-top: 80px;\n  margin-left: 50px; }\n\n.Retraite-buttonCustom__3hoq {\n  min-width: 210px;\n  width: auto;\n  background-color: #A05599;\n  color: #dddddd;\n  border: 1px solid #A05599;\n  border: solid 1px #9b9b9b;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  font-family: \"Arvo\", sans-serif;\n  font-size: 0.85em;\n  letter-spacing: 1px;\n  color: #dddddd;\n  padding: 12px 15px;\n  font-weight: 300;\n  cursor: pointer; }\n\n.Retraite-divButton__3cjv {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -ms-flex-pack: distribute;\n  justify-content: space-around;\n  margin-top: 50px;\n  margin-bottom: 50px; }\n\n.Retraite-bloc__10DS {\n  background-color: #E1D9CC;\n  font-family: Arial, Helvetica, sans-serif;\n  color: #333333;\n  height: 30px; }\n  .Retraite-bloc__10DS p {\n    text-transform: uppercase;\n    font-weight: bolder;\n    font-size: 14px;\n    padding: 8px; }\n\n.Retraite-divContact__1tPb {\n  margin: 30px; }\n\n.Retraite-contentContact__1ZAQ {\n  margin-bottom: 40px; }\n\n.Retraite-contactName__1y5k {\n  margin: 0;\n  font-size: 25px;\n  font-weight: 500; }\n\n.Retraite-seperator__27Xr {\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 0;\n  border-top: 1px solid #ddd; }\n\n.Retraite-description__1gl1 {\n  margin-top: 30px; }\n", ""]);

// exports
exports.locals = {
	"titleRetraite": "Retraite-titleRetraite__2Xpa",
	"titleRetraiteCourrier": "Retraite-titleRetraiteCourrier__2CwV",
	"dataTxt": "Retraite-dataTxt__39zR",
	"inputForm": "Retraite-inputForm__16U1",
	"adresse": "Retraite-adresse__zBAf",
	"adaptSize": "Retraite-adaptSize__2BCB",
	"adaptSizeT": "Retraite-adaptSizeT__1UDG",
	"sizeRue": "Retraite-sizeRue__YDdN",
	"labelAdresse": "Retraite-labelAdresse__1UOw",
	"labelDemarche": "Retraite-labelDemarche__2ln0",
	"afour": "Retraite-afour__3mi3",
	"expediteur": "Retraite-expediteur__3OPE",
	"ToCaisse": "Retraite-ToCaisse__3rUB",
	"date": "Retraite-date__1dw3",
	"contentLetter": "Retraite-contentLetter__1DUG",
	"signature": "Retraite-signature__3ZyG",
	"mention": "Retraite-mention__AYPc",
	"mentionComplementaire": "Retraite-mentionComplementaire__9X7J",
	"mentionBanque": "Retraite-mentionBanque__1JN-",
	"mentionEmployeur": "Retraite-mentionEmployeur__c5Ll",
	"mentionAssurance": "Retraite-mentionAssurance__NTFm",
	"buttonCustom": "Retraite-buttonCustom__3hoq",
	"divButton": "Retraite-divButton__3cjv",
	"bloc": "Retraite-bloc__10DS",
	"divContact": "Retraite-divContact__1tPb",
	"contentContact": "Retraite-contentContact__1ZAQ",
	"contactName": "Retraite-contactName__1y5k",
	"seperator": "Retraite-seperator__27Xr",
	"description": "Retraite-description__1gl1"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/ToolBoxOptions.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".ToolBoxOptions-toolBox__2gkL {\n  position: relative; }\n  .ToolBoxOptions-toolBox__2gkL button i {\n    margin: 0 !important; }\n\n.ToolBoxOptions-triangle__2PVu {\n  position: absolute;\n  width: 10px;\n  height: 10px;\n  border: 1px solid #9B9B9B;\n  border-left: none;\n  border-bottom: none;\n  background-color: #F6F6F6;\n  -webkit-transform: rotate(-45deg);\n  -ms-transform: rotate(-45deg);\n  transform: rotate(-45deg);\n  top: -6px;\n  right: 20px; }\n\n.ToolBoxOptions-content__3Qvg {\n  position: absolute;\n  min-width: 250px;\n  border: 1px solid #9B9B9B;\n  background: #F6F6F6;\n  z-index: 999;\n  right: 0px;\n  padding: 6px 0px;\n  margin-top: 10px; }\n  .ToolBoxOptions-content__3Qvg ul {\n    list-style: none;\n    padding: 0px;\n    margin: 0px; }\n    .ToolBoxOptions-content__3Qvg ul li {\n      padding: 16px;\n      margin: 0;\n      cursor: pointer;\n      font-size: 14px;\n      color: #4A4A4A;\n      letter-spacing: 1px; }\n      .ToolBoxOptions-content__3Qvg ul li:hover, .ToolBoxOptions-content__3Qvg ul li.ToolBoxOptions-active__3_5o {\n        background-color: #E7E7E7; }\n", ""]);

// exports
exports.locals = {
	"toolBox": "ToolBoxOptions-toolBox__2gkL",
	"triangle": "ToolBoxOptions-triangle__2PVu",
	"content": "ToolBoxOptions-content__3Qvg",
	"active": "ToolBoxOptions-active__3_5o"
};

/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/buttons.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".buttons-button__268y {\n  border: solid 1px #9b9b9b;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  font-family: \"Arvo\", sans-serif;\n  font-size: 0.85em;\n  letter-spacing: 1px;\n  color: #dddddd;\n  padding: 12px 15px;\n  font-weight: 300;\n  cursor: pointer; }\n  .buttons-button__268y:disabled {\n    cursor: not-allowed; }\n  .buttons-button__268y.buttons-disabled__3sdb {\n    background-color: rgba(200, 200, 200, 0.2) !important;\n    border: 1px solid rgba(200, 200, 200, 0.6) !important;\n    color: rgba(200, 200, 200, 0.6) !important;\n    cursor: not-allowed; }\n  .buttons-button__268y.buttons-positive__1PKZ {\n    background-color: #c8c951;\n    color: #dddddd; }\n  .buttons-button__268y.buttons-light__1ewi {\n    background-color: #FFF;\n    color: #444; }\n  .buttons-button__268y.buttons-assertive__3RMP {\n    background-color: white;\n    color: #ff3f3a;\n    border: 1px solid #ff2621;\n    width: 210px; }\n  .buttons-button__268y.buttons-stable__LUaZ {\n    background-color: #f6f6f6;\n    color: #444;\n    height: 55px;\n    width: 210px; }\n  .buttons-button__268y.buttons-default__2cKA {\n    min-width: 210px;\n    width: auto;\n    background-color: #A05599;\n    color: #dddddd;\n    border: 1px solid #A05599; }\n  .buttons-button__268y.buttons-defaultLight__GoIN {\n    width: 255px;\n    background-color: white;\n    color: #A05599;\n    border: 1px solid #A05599; }\n  .buttons-button__268y.buttons-clear__brEC {\n    background-color: transparent;\n    border: none; }\n    .buttons-button__268y.buttons-clear__brEC > i:first-child {\n      margin-right: 0; }\n  .buttons-button__268y > i:first-child {\n    margin-right: 8px;\n    vertical-align: middle;\n    font-size: 20px; }\n  .buttons-button__268y.buttons-icon__1uqq {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center; }\n    .buttons-button__268y.buttons-icon__1uqq i:first-child {\n      line-height: 0;\n      margin: 0;\n      padding: 0;\n      font-size: 25px;\n      height: 18px;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-align: center;\n      -ms-flex-align: center;\n      align-items: center;\n      -webkit-box-pack: center;\n      -ms-flex-pack: center;\n      justify-content: center;\n      overflow: visible; }\n  @media (max-width: 1155px) {\n    .buttons-button__268y .buttons-text__2dE5 {\n      display: none; }\n    .buttons-button__268y > i:first-child {\n      margin: 0; } }\n", ""]);

// exports
exports.locals = {
	"button": "buttons-button__268y",
	"disabled": "buttons-disabled__3sdb",
	"positive": "buttons-positive__1PKZ",
	"light": "buttons-light__1ewi",
	"assertive": "buttons-assertive__3RMP",
	"stable": "buttons-stable__LUaZ",
	"default": "buttons-default__2cKA",
	"defaultLight": "buttons-defaultLight__GoIN",
	"clear": "buttons-clear__brEC",
	"icon": "buttons-icon__1uqq",
	"text": "buttons-text__2dE5"
};

/***/ }),

/***/ "./src/App.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _reactRouter = __webpack_require__("./node_modules/react-router/es/index.js");

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _history = __webpack_require__("./node_modules/history/es/index.js");

var _Home = __webpack_require__("./src/containers/Home.js");

var _Home2 = _interopRequireDefault(_Home);

var _Navigation = __webpack_require__("./src/containers/Navigation.js");

var _Navigation2 = _interopRequireDefault(_Navigation);

var _Contacts = __webpack_require__("./src/containers/Contacts.js");

var _Contacts2 = _interopRequireDefault(_Contacts);

var _Preferences = __webpack_require__("./src/containers/Preferences.js");

var _Preferences2 = _interopRequireDefault(_Preferences);

var _FuneralList = __webpack_require__("./src/containers/FuneralList.js");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _Data = __webpack_require__("./src/containers/Data.js");

var _Data2 = _interopRequireDefault(_Data);

var _App = __webpack_require__("./src/styles/App.scss");

var _App2 = _interopRequireDefault(_App);

var _tracker = __webpack_require__("./src/tracker.js");

var _index = __webpack_require__("./src/constants/index.js");

var _index2 = _interopRequireDefault(_index);

var _AssistanceList = __webpack_require__("./src/components/AssistanceList.js");

var _AssistanceList2 = _interopRequireDefault(_AssistanceList);

var _index3 = __webpack_require__("./src/components/elements/index.js");

var _index4 = _interopRequireDefault(_index3);

var _Footer = __webpack_require__("./src/components/elements/Footer.jsx");

var _Footer2 = _interopRequireDefault(_Footer);

var _Prestataire = __webpack_require__("./src/components/elements/Prestataire.jsx");

var _Prestataire2 = _interopRequireDefault(_Prestataire);

var _Localisation = __webpack_require__("./src/components/elements/Localisation.jsx");

var _Localisation2 = _interopRequireDefault(_Localisation);

var _Devis = __webpack_require__("./src/containers/Devis.js");

var _Devis2 = _interopRequireDefault(_Devis);

var _Dossier = __webpack_require__("./src/containers/Dossier.js");

var _Dossier2 = _interopRequireDefault(_Dossier);

var _Home3 = __webpack_require__("./src/public/containers/Home.js");

var _Home4 = _interopRequireDefault(_Home3);

var _Don = __webpack_require__("./src/containers/Don.js");

var _Don2 = _interopRequireDefault(_Don);

var _DonDevis = __webpack_require__("./src/containers/DonDevis.js");

var _DonDevis2 = _interopRequireDefault(_DonDevis);

var _Retraite = __webpack_require__("./src/containers/Retraite.js");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _Complementaire = __webpack_require__("./src/containers/Complementaire.js");

var _Complementaire2 = _interopRequireDefault(_Complementaire);

var _Banque = __webpack_require__("./src/containers/Banque.js");

var _Banque2 = _interopRequireDefault(_Banque);

var _Mairie = __webpack_require__("./src/containers/Mairie.js");

var _Mairie2 = _interopRequireDefault(_Mairie);

var _Employeur = __webpack_require__("./src/containers/Employeur.js");

var _Employeur2 = _interopRequireDefault(_Employeur);

var _Medecin = __webpack_require__("./src/containers/Medecin.js");

var _Medecin2 = _interopRequireDefault(_Medecin);

var _Credit = __webpack_require__("./src/containers/Credit.js");

var _Credit2 = _interopRequireDefault(_Credit);

var _Association = __webpack_require__("./src/containers/Association.js");

var _Association2 = _interopRequireDefault(_Association);

var _SecuriteSociale = __webpack_require__("./src/containers/SecuriteSociale.js");

var _SecuriteSociale2 = _interopRequireDefault(_SecuriteSociale);

var _Assurance = __webpack_require__("./src/containers/Assurance.js");

var _Assurance2 = _interopRequireDefault(_Assurance);

var _Notaire = __webpack_require__("./src/containers/Notaire.js");

var _Notaire2 = _interopRequireDefault(_Notaire);

var _Bailleur = __webpack_require__("./src/containers/Bailleur.js");

var _Bailleur2 = _interopRequireDefault(_Bailleur);

var _CaisseAllocation = __webpack_require__("./src/containers/CaisseAllocation.js");

var _CaisseAllocation2 = _interopRequireDefault(_CaisseAllocation);

var _Organisme = __webpack_require__("./src/containers/Organisme.js");

var _Organisme2 = _interopRequireDefault(_Organisme);

var _Impot = __webpack_require__("./src/containers/Impot.js");

var _Impot2 = _interopRequireDefault(_Impot);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var history = (0, _history.createHashHistory)();

history.listen(function () {
  return window.scrollTo(0, 0);
});

// app component
var App = function App(props) {

  if ((0, _tracker.shouldEnableTracking)() && (0, _tracker.getTracker)()) {
    var trackerInstance = (0, _tracker.getTracker)();
    history = trackerInstance.connectToHistory(history);
    trackerInstance.track(history.location.pathname); // when using a hash history, the initial visit is not tracked by piwik react router
  }

  cozy.client.files.statByPath(_index2.default).then(function () {
    props.initilizeDocs();
  }).catch(function (err) {
    console.log('No route file');
    props.initilizeDocs();
  });

  // render
  return _react2.default.createElement(
    _reactRouter.Router,
    { history: history },
    _react2.default.createElement(
      'div',
      { className: _App2.default.app },
      _react2.default.createElement(
        'div',
        { className: _App2.default.container },
        _react2.default.createElement(_Navigation2.default, null),
        _react2.default.createElement(
          'div',
          { className: _App2.default.page },
          _react2.default.createElement(
            'main',
            { className: _App2.default.main },
            _react2.default.createElement(_reactRouterDom.Route, { path: '/', component: _index4.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/home', component: _Home2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/relation', component: _Contacts2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/funerals', component: _FuneralList2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/assistances', component: _AssistanceList2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/funerals/:slug', component: _DataForm2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/data/:slug/:id', component: _Data2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/preferences', component: _Preferences2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/prestataire', component: _Prestataire2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/localisation-funeraire', component: _Localisation2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/devis', component: _Devis2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/dossier', component: _Dossier2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/don', component: _Don2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/devis-don', component: _DonDevis2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/retraite', component: _Retraite2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/complementaire-maladie', component: _Complementaire2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/banque', component: _Banque2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/mairie', component: _Mairie2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/employeur', component: _Employeur2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/medecin', component: _Medecin2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/credit', component: _Credit2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/association', component: _Association2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/securite-sociale', component: _SecuriteSociale2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/assurance', component: _Assurance2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/notaire', component: _Notaire2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/bailleur', component: _Bailleur2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/caf', component: _CaisseAllocation2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/organisme', component: _Organisme2.default }),
            _react2.default.createElement(_reactRouterDom.Route, { path: '/impot', component: _Impot2.default }),
            _react2.default.createElement(_Footer2.default, null)
          )
        )
      )
    )
  );
};
exports.default = App;

/***/ }),

/***/ "./src/actions/alerts.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.alertClear = exports.alertDismiss = exports.alertShow = exports.ALERT_CLEAR = exports.ALERT_DISMISS = exports.ALERT_SHOW = undefined;

var _constants = __webpack_require__("./src/constants/index.js");

var ALERT_SHOW = exports.ALERT_SHOW = 'ALERT_SHOW';
var ALERT_DISMISS = exports.ALERT_DISMISS = 'ALERT_DISMISS';
var ALERT_CLEAR = exports.ALERT_CLEAR = 'ALERT_CLEAR';

var alertShow = exports.alertShow = function alertShow(message) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.ALERT_LEVEL_INFO;
    return {
        type: ALERT_SHOW,
        alert: {
            id: Date.now(),
            message: message,
            level: level
        }
    };
};

var alertDismiss = exports.alertDismiss = function alertDismiss(id) {
    return { type: ALERT_DISMISS, id: id };
};

var alertClear = exports.alertClear = function alertClear() {
    return { type: ALERT_CLEAR };
};

/***/ }),

/***/ "./src/actions/contacts.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.contactsSave = exports.contactsNew = exports.contactsRestore = exports.contactsRemove = exports.contactsSelect = exports.CONTACTS_SELECT = exports.CONTACTS_RESTORE_FAILURE = exports.CONTACTS_RESTORE_SUCCESS = exports.CONTACTS_RESTORE = exports.CONTACTS_REMOVE_FAILURE = exports.CONTACTS_REMOVE_SUCCESS = exports.CONTACTS_REMOVE = exports.CONTACTS_SAVE_FAILURE = exports.CONTACTS_SAVE_SUCCESS = exports.CONTACTS_SAVE = exports.CONTACTS_NEW_FAILURE = exports.CONTACTS_NEW_SUCCESS = exports.CONTACTS_NEW = undefined;

var _constants = __webpack_require__("./src/constants/index.js");

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var CONTACTS_NEW = exports.CONTACTS_NEW = "CONTACTS_NEW";
var CONTACTS_NEW_SUCCESS = exports.CONTACTS_NEW_SUCCESS = "CONTACTS_NEW_SUCCESS";
var CONTACTS_NEW_FAILURE = exports.CONTACTS_NEW_FAILURE = "CONTACTS_NEW_FAILURE";
var CONTACTS_SAVE = exports.CONTACTS_SAVE = "CONTACTS_SAVE";
var CONTACTS_SAVE_SUCCESS = exports.CONTACTS_SAVE_SUCCESS = "CONTACTS_SAVE_SUCCESS";
var CONTACTS_SAVE_FAILURE = exports.CONTACTS_SAVE_FAILURE = "CONTACTS_SAVE_FAILURE";
var CONTACTS_REMOVE = exports.CONTACTS_REMOVE = "CONTACTS_REMOVE";
var CONTACTS_REMOVE_SUCCESS = exports.CONTACTS_REMOVE_SUCCESS = "CONTACTS_REMOVE_SUCCESS";
var CONTACTS_REMOVE_FAILURE = exports.CONTACTS_REMOVE_FAILURE = "CONTACTS_REMOVE_FAILURE";
var CONTACTS_RESTORE = exports.CONTACTS_RESTORE = "CONTACTS_RESTORE";
var CONTACTS_RESTORE_SUCCESS = exports.CONTACTS_RESTORE_SUCCESS = "CONTACTS_RESTORE_SUCCESS";
var CONTACTS_RESTORE_FAILURE = exports.CONTACTS_RESTORE_FAILURE = "CONTACTS_RESTORE_FAILURE";
var CONTACTS_SELECT = exports.CONTACTS_SELECT = "CONTACTS_SELECT";

var contactsSelect = exports.contactsSelect = function contactsSelect(contact) {
    return { type: CONTACTS_SELECT, contact: contact };
}; //or with id

var contactsRemove = exports.contactsRemove = function contactsRemove(contacts) {
    return function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {
            var removed, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, contact;

            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            dispatch({ type: CONTACTS_REMOVE, contacts: contacts });
                            _context.prev = 1;
                            removed = [];
                            _iteratorNormalCompletion = true;
                            _didIteratorError = false;
                            _iteratorError = undefined;
                            _context.prev = 6;
                            _iterator = contacts[Symbol.iterator]();

                        case 8:
                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                _context.next = 18;
                                break;
                            }

                            contact = _step.value;
                            _context.t0 = removed;
                            _context.next = 13;
                            return cozy.client.data.updateAttributes(_constants.DOCTYPE_CONTACTS, contact._id, { trash: true });

                        case 13:
                            _context.t1 = _context.sent;

                            _context.t0.push.call(_context.t0, _context.t1);

                        case 15:
                            _iteratorNormalCompletion = true;
                            _context.next = 8;
                            break;

                        case 18:
                            _context.next = 24;
                            break;

                        case 20:
                            _context.prev = 20;
                            _context.t2 = _context["catch"](6);
                            _didIteratorError = true;
                            _iteratorError = _context.t2;

                        case 24:
                            _context.prev = 24;
                            _context.prev = 25;

                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }

                        case 27:
                            _context.prev = 27;

                            if (!_didIteratorError) {
                                _context.next = 30;
                                break;
                            }

                            throw _iteratorError;

                        case 30:
                            return _context.finish(27);

                        case 31:
                            return _context.finish(24);

                        case 32:
                            return _context.abrupt("return", dispatch({ type: CONTACTS_REMOVE_SUCCESS, ids: removed.map(function (f) {
                                    return f._id;
                                }) }));

                        case 35:
                            _context.prev = 35;
                            _context.t3 = _context["catch"](1);
                            return _context.abrupt("return", dispatch({ type: CONTACTS_REMOVE_FAILURE, err: _context.t3 }));

                        case 38:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, undefined, [[1, 35], [6, 20, 24, 32], [25,, 27, 31]]);
        }));

        return function (_x, _x2) {
            return _ref.apply(this, arguments);
        };
    }();
};

var contactsRestore = exports.contactsRestore = function contactsRestore(contacts) {
    return function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dispatch, getState) {
            var restored, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, contact;

            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            dispatch({ type: CONTACTS_RESTORE, contacts: contacts });
                            _context2.prev = 1;
                            restored = [];
                            _iteratorNormalCompletion2 = true;
                            _didIteratorError2 = false;
                            _iteratorError2 = undefined;
                            _context2.prev = 6;
                            _iterator2 = contacts[Symbol.iterator]();

                        case 8:
                            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                _context2.next = 18;
                                break;
                            }

                            contact = _step2.value;
                            _context2.t0 = restored;
                            _context2.next = 13;
                            return cozy.client.data.updateAttributes(_constants.DOCTYPE_CONTACTS, contact._id, { trash: false });

                        case 13:
                            _context2.t1 = _context2.sent;

                            _context2.t0.push.call(_context2.t0, _context2.t1);

                        case 15:
                            _iteratorNormalCompletion2 = true;
                            _context2.next = 8;
                            break;

                        case 18:
                            _context2.next = 24;
                            break;

                        case 20:
                            _context2.prev = 20;
                            _context2.t2 = _context2["catch"](6);
                            _didIteratorError2 = true;
                            _iteratorError2 = _context2.t2;

                        case 24:
                            _context2.prev = 24;
                            _context2.prev = 25;

                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }

                        case 27:
                            _context2.prev = 27;

                            if (!_didIteratorError2) {
                                _context2.next = 30;
                                break;
                            }

                            throw _iteratorError2;

                        case 30:
                            return _context2.finish(27);

                        case 31:
                            return _context2.finish(24);

                        case 32:
                            return _context2.abrupt("return", dispatch({ type: CONTACTS_RESTORE_SUCCESS, ids: restored.map(function (f) {
                                    return f._id;
                                }) }));

                        case 35:
                            _context2.prev = 35;
                            _context2.t3 = _context2["catch"](1);
                            return _context2.abrupt("return", dispatch({ type: CONTACTS_RESTORE_FAILURE, err: _context2.t3 }));

                        case 38:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, _callee2, undefined, [[1, 35], [6, 20, 24, 32], [25,, 27, 31]]);
        }));

        return function (_x3, _x4) {
            return _ref2.apply(this, arguments);
        };
    }();
};

var contactsNew = exports.contactsNew = function contactsNew(name, data) {
    return function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(dispatch, getState) {
            var contact;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            dispatch({ type: CONTACTS_NEW, name: name });

                            _context3.prev = 1;
                            _context3.next = 4;
                            return cozy.client.data.create(_constants.DOCTYPE_CONTACTS, data);

                        case 4:
                            contact = _context3.sent;
                            return _context3.abrupt("return", dispatch({ type: CONTACTS_NEW_SUCCESS, contact: contact }));

                        case 8:
                            _context3.prev = 8;
                            _context3.t0 = _context3["catch"](1);
                            return _context3.abrupt("return", dispatch({ type: CONTACTS_NEW_FAILURE, err: _context3.t0 }));

                        case 11:
                        case "end":
                            return _context3.stop();
                    }
                }
            }, _callee3, undefined, [[1, 8]]);
        }));

        return function (_x5, _x6) {
            return _ref3.apply(this, arguments);
        };
    }();
};

var contactsSave = exports.contactsSave = function contactsSave(id, data) {
    debug.log(data);
    return function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(dispatch, getState) {
            var contact;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            dispatch({ type: CONTACTS_SAVE, id: id });

                            _context4.prev = 1;
                            _context4.next = 4;
                            return cozy.client.data.updateAttributes(_constants.DOCTYPE_CONTACTS, id, data);

                        case 4:
                            contact = _context4.sent;
                            return _context4.abrupt("return", dispatch({ type: CONTACTS_SAVE_SUCCESS, contact: contact }));

                        case 8:
                            _context4.prev = 8;
                            _context4.t0 = _context4["catch"](1);
                            return _context4.abrupt("return", dispatch({ type: CONTACTS_SAVE_FAILURE, err: _context4.t0 }));

                        case 11:
                        case "end":
                            return _context4.stop();
                    }
                }
            }, _callee4, undefined, [[1, 8]]);
        }));

        return function (_x7, _x8) {
            return _ref4.apply(this, arguments);
        };
    }();
};

/***/ }),

/***/ "./src/actions/data.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var DATA_REMOVE = exports.DATA_REMOVE = "DATA_REMOVE";
var DATA_REMOVE_SUCCESS = exports.DATA_REMOVE_SUCCESS = "DATA_REMOVE_SUCCESS";
var DATA_REMOVE_FAILURE = exports.DATA_REMOVE_FAILURE = "DATA_REMOVE_FAILURE";
var DATA_NEW = exports.DATA_NEW = "DATA_NEW";
var DATA_NEW_SUCCESS = exports.DATA_NEW_SUCCESS = "DATA_NEW_SUCCESS";
var DATA_NEW_FAILURE = exports.DATA_NEW_FAILURE = "DATA_NEW_FAILURE";
var DATA_SAVE = exports.DATA_SAVE = "DATA_SAVE";
var DATA_SAVE_SUCCESS = exports.DATA_SAVE_SUCCESS = "DATA_SAVE_SUCCESS";
var DATA_SAVE_FAILURE = exports.DATA_SAVE_FAILURE = "DATA_SAVE_FAILURE";
var DATA_RESTORE = exports.DATA_RESTORE = "DATA_RESTORE";
var DATA_RESTORE_SUCCESS = exports.DATA_RESTORE_SUCCESS = "DATA_RESTORE_SUCCESS";
var DATA_RESTORE_FAILURE = exports.DATA_RESTORE_FAILURE = "DATA_RESTORE_FAILURE";
var DATA_SELECT = exports.DATA_SELECT = "DATA_SELECT";
var DATA_LOAD = exports.DATA_LOAD = "DATA_LOAD";
var DATA_LOAD_SUCCESS = exports.DATA_LOAD_SUCCESS = "DATA_LOAD_SUCCESS";
var DATA_LOAD_FAILURE = exports.DATA_LOAD_FAILURE = "DATA_LOAD_FAILURE";

var dataSelect = exports.dataSelect = function dataSelect(data) {
    return {
        type: DATA_SELECT, data: data
    };
};

var dataRemove = exports.dataRemove = function dataRemove(doctype, data) {
    return function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {
            var removed, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, d;

            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            dispatch({ type: DATA_REMOVE, data: data, doctype: doctype });

                            _context.prev = 1;
                            removed = [];
                            _iteratorNormalCompletion = true;
                            _didIteratorError = false;
                            _iteratorError = undefined;
                            _context.prev = 6;
                            _iterator = data[Symbol.iterator]();

                        case 8:
                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                _context.next = 18;
                                break;
                            }

                            d = _step.value;
                            _context.t0 = removed;
                            _context.next = 13;
                            return cozy.client.data.delete(doctype, d);

                        case 13:
                            _context.t1 = _context.sent;

                            _context.t0.push.call(_context.t0, _context.t1);

                        case 15:
                            _iteratorNormalCompletion = true;
                            _context.next = 8;
                            break;

                        case 18:
                            _context.next = 24;
                            break;

                        case 20:
                            _context.prev = 20;
                            _context.t2 = _context["catch"](6);
                            _didIteratorError = true;
                            _iteratorError = _context.t2;

                        case 24:
                            _context.prev = 24;
                            _context.prev = 25;

                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }

                        case 27:
                            _context.prev = 27;

                            if (!_didIteratorError) {
                                _context.next = 30;
                                break;
                            }

                            throw _iteratorError;

                        case 30:
                            return _context.finish(27);

                        case 31:
                            return _context.finish(24);

                        case 32:
                            return _context.abrupt("return", dispatch({ type: DATA_REMOVE_SUCCESS, ids: removed.map(function (f) {
                                    return f._id;
                                }), doctype: doctype }));

                        case 35:
                            _context.prev = 35;
                            _context.t3 = _context["catch"](1);
                            return _context.abrupt("return", dispatch({ type: DATA_REMOVE_FAILURE, err: _context.t3 }));

                        case 38:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, undefined, [[1, 35], [6, 20, 24, 32], [25,, 27, 31]]);
        }));

        return function (_x, _x2) {
            return _ref.apply(this, arguments);
        };
    }();
};

var dataRestore = exports.dataRestore = function dataRestore(data) {
    return function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dispatch, getState) {
            var restored, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, d;

            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            dispatch({ type: DATA_RESTORE, data: data });
                            _context2.prev = 1;
                            restored = [];
                            _iteratorNormalCompletion2 = true;
                            _didIteratorError2 = false;
                            _iteratorError2 = undefined;
                            _context2.prev = 6;
                            _iterator2 = data[Symbol.iterator]();

                        case 8:
                            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                _context2.next = 18;
                                break;
                            }

                            d = _step2.value;
                            _context2.t0 = restored;
                            _context2.next = 13;
                            return cozy.client.data.updateAttributes(d.doctype, d._id, { trash: false });

                        case 13:
                            _context2.t1 = _context2.sent;

                            _context2.t0.push.call(_context2.t0, _context2.t1);

                        case 15:
                            _iteratorNormalCompletion2 = true;
                            _context2.next = 8;
                            break;

                        case 18:
                            _context2.next = 24;
                            break;

                        case 20:
                            _context2.prev = 20;
                            _context2.t2 = _context2["catch"](6);
                            _didIteratorError2 = true;
                            _iteratorError2 = _context2.t2;

                        case 24:
                            _context2.prev = 24;
                            _context2.prev = 25;

                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }

                        case 27:
                            _context2.prev = 27;

                            if (!_didIteratorError2) {
                                _context2.next = 30;
                                break;
                            }

                            throw _iteratorError2;

                        case 30:
                            return _context2.finish(27);

                        case 31:
                            return _context2.finish(24);

                        case 32:
                            return _context2.abrupt("return", dispatch({ type: DATA_RESTORE_SUCCESS, ids: restored.map(function (f) {
                                    return f._id;
                                }), doctypes: restored.map(function (f) {
                                    return f._type;
                                }) }));

                        case 35:
                            _context2.prev = 35;
                            _context2.t3 = _context2["catch"](1);
                            return _context2.abrupt("return", dispatch({ type: DATA_RESTORE_FAILURE, err: _context2.t3 }));

                        case 38:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, _callee2, undefined, [[1, 35], [6, 20, 24, 32], [25,, 27, 31]]);
        }));

        return function (_x3, _x4) {
            return _ref2.apply(this, arguments);
        };
    }();
};

var dataNew = exports.dataNew = function dataNew(doctype, data) {
    return function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(dispatch, getState) {
            var newData;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            dispatch({ type: DATA_NEW, data: data, doctype: doctype });

                            _context3.prev = 1;
                            _context3.next = 4;
                            return cozy.client.data.create(doctype, data);

                        case 4:
                            newData = _context3.sent;

                            console.log(newData);
                            return _context3.abrupt("return", dispatch({ type: DATA_NEW_SUCCESS, data: newData, doctype: doctype }));

                        case 9:
                            _context3.prev = 9;
                            _context3.t0 = _context3["catch"](1);
                            return _context3.abrupt("return", dispatch({ type: DATA_NEW_FAILURE, err: _context3.t0 }));

                        case 12:
                        case "end":
                            return _context3.stop();
                    }
                }
            }, _callee3, undefined, [[1, 9]]);
        }));

        return function (_x5, _x6) {
            return _ref3.apply(this, arguments);
        };
    }();
};

var dataSave = exports.dataSave = function dataSave(doctype, id, data) {
    return function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(dispatch, getState) {
            var newData;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            dispatch({ type: DATA_SAVE, id: id, data: data, doctype: doctype });

                            _context4.prev = 1;
                            _context4.next = 4;
                            return cozy.client.data.updateAttributes(doctype, id, data);

                        case 4:
                            newData = _context4.sent;
                            return _context4.abrupt("return", dispatch({ type: DATA_SAVE_SUCCESS, data: newData, doctype: doctype }));

                        case 8:
                            _context4.prev = 8;
                            _context4.t0 = _context4["catch"](1);
                            return _context4.abrupt("return", dispatch({ type: DATA_SAVE_FAILURE, err: _context4.t0 }));

                        case 11:
                        case "end":
                            return _context4.stop();
                    }
                }
            }, _callee4, undefined, [[1, 8]]);
        }));

        return function (_x7, _x8) {
            return _ref4.apply(this, arguments);
        };
    }();
};

var dataLoad = exports.dataLoad = function dataLoad(doctype, id) {
    return function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(dispatch, getState) {
            var data;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            dispatch({ type: DATA_LOAD, id: id, doctype: doctype });

                            _context5.prev = 1;
                            _context5.next = 4;
                            return cozy.client.data.find(doctype, id);

                        case 4:
                            data = _context5.sent;
                            return _context5.abrupt("return", dispatch({ type: DATA_LOAD_SUCCESS, data: data, doctype: doctype }));

                        case 8:
                            _context5.prev = 8;
                            _context5.t0 = _context5["catch"](1);
                            return _context5.abrupt("return", dispatch({ type: DATA_LOAD_FAILURE, err: _context5.t0 }));

                        case 11:
                        case "end":
                            return _context5.stop();
                    }
                }
            }, _callee5, undefined, [[1, 8]]);
        }));

        return function (_x9, _x10) {
            return _ref5.apply(this, arguments);
        };
    }();
};

/***/ }),

/***/ "./src/actions/documents.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.documentsChangeType = exports.documentsMove = exports.documentsRename = exports.documentsRestore = exports.documentsRemove = exports.documentsInitialize = exports.documentsNewFolder = exports.documentsDownload = exports.documentsClick = exports.documentsChangeViewMode = exports.documentsChangeFilter = exports.documentsSelect = exports.HTTP_CODE_CONFLICT = exports.DOCUMENTS_CHANGE_TYPE_FAILURE = exports.DOCUMENTS_CHANGE_TYPE_SUCCESS = exports.DOCUMENTS_CHANGE_TYPE = exports.DOCUMENTS_MOVE_FAILURE = exports.DOCUMENTS_MOVE_SUCCESS = exports.DOCUMENTS_MOVE = exports.DOCUMENTS_RENAME_FAILURE = exports.DOCUMENTS_RENAME_SUCCESS = exports.DOCUMENTS_RENAME = exports.DOCUMENTS_CHANGE_FILTER = exports.DOCUMENTS_CLICK = exports.DOCUMENTS_NEW_FOLDER_FAILURE_DUPLICATE = exports.DOCUMENTS_NEW_FOLDER_FAILURE_GENERIC = exports.DOCUMENTS_NEW_FOLDER_SUCCESS = exports.DOCUMENTS_NEW_FOLDER = exports.DOCUMENTS_CHANGE_VIEW_MODE = exports.DOCUMENTS_DOWNLOAD_ALL = exports.DOCUMENTS_DOWNLOAD = exports.DOCUMENTS_INITIALIZE_FAILURE = exports.DOCUMENTS_INITIALIZE_SUCCESS = exports.DOCUMENTS_INITIALIZE = exports.DOCUMENTS_RESTORE_FAILURE = exports.DOCUMENTS_RESTORE_SUCCESS = exports.DOCUMENTS_RESTORE = exports.DOCUMENTS_REMOVE_FAILURE = exports.DOCUMENTS_REMOVE_SUCCESS = exports.DOCUMENTS_REMOVE = exports.DOCUMENTS_SELECT = undefined;

var _tools = __webpack_require__("./src/tools/index.js");

var _constants = __webpack_require__("./src/constants/index.js");

var _load = __webpack_require__("./src/actions/load.js");

var _gauge = __webpack_require__("./src/actions/gauge.js");

var _importer = __webpack_require__("./src/actions/importer.js");

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var DOCUMENTS_SELECT = exports.DOCUMENTS_SELECT = "DOCUMENTS_SELECT";
var DOCUMENTS_REMOVE = exports.DOCUMENTS_REMOVE = "DOCUMENTS_REMOVE";
var DOCUMENTS_REMOVE_SUCCESS = exports.DOCUMENTS_REMOVE_SUCCESS = "DOCUMENTS_REMOVE_SUCCESS";
var DOCUMENTS_REMOVE_FAILURE = exports.DOCUMENTS_REMOVE_FAILURE = "DOCUMENTS_REMOVE_FAILURE";
var DOCUMENTS_RESTORE = exports.DOCUMENTS_RESTORE = "DOCUMENTS_RESTORE";
var DOCUMENTS_RESTORE_SUCCESS = exports.DOCUMENTS_RESTORE_SUCCESS = "DOCUMENTS_RESTORE_SUCCESS";
var DOCUMENTS_RESTORE_FAILURE = exports.DOCUMENTS_RESTORE_FAILURE = "DOCUMENTS_RESTORE_FAILURE";
var DOCUMENTS_INITIALIZE = exports.DOCUMENTS_INITIALIZE = "DOCUMENTS_INITIALIZE";
var DOCUMENTS_INITIALIZE_SUCCESS = exports.DOCUMENTS_INITIALIZE_SUCCESS = "DOCUMENTS_INITIALIZE_SUCCESS";
var DOCUMENTS_INITIALIZE_FAILURE = exports.DOCUMENTS_INITIALIZE_FAILURE = "DOCUMENTS_INITIALIZE_FAILURE";
var DOCUMENTS_DOWNLOAD = exports.DOCUMENTS_DOWNLOAD = "DOCUMENTS_DOWNLOAD";
var DOCUMENTS_DOWNLOAD_ALL = exports.DOCUMENTS_DOWNLOAD_ALL = "DOCUMENTS_DOWNLOAD_ALL";
var DOCUMENTS_CHANGE_VIEW_MODE = exports.DOCUMENTS_CHANGE_VIEW_MODE = "DOCUMENTS_CHANGE_VIEW_MODE";
var DOCUMENTS_NEW_FOLDER = exports.DOCUMENTS_NEW_FOLDER = "DOCUMENTS_NEW_FOLDER";
var DOCUMENTS_NEW_FOLDER_SUCCESS = exports.DOCUMENTS_NEW_FOLDER_SUCCESS = "DOCUMENTS_NEW_FOLDER_SUCCESS";
var DOCUMENTS_NEW_FOLDER_FAILURE_GENERIC = exports.DOCUMENTS_NEW_FOLDER_FAILURE_GENERIC = "DOCUMENTS_NEW_FOLDER_FAILURE_GENERIC";
var DOCUMENTS_NEW_FOLDER_FAILURE_DUPLICATE = exports.DOCUMENTS_NEW_FOLDER_FAILURE_DUPLICATE = "DOCUMENTS_NEW_FOLDER_FAILURE_DUPLICATE";
var DOCUMENTS_CLICK = exports.DOCUMENTS_CLICK = "DOCUMENTS_CLICK";
var DOCUMENTS_CHANGE_FILTER = exports.DOCUMENTS_CHANGE_FILTER = "DOCUMENTS_CHANGE_FILTER";
var DOCUMENTS_RENAME = exports.DOCUMENTS_RENAME = "DOCUMENTS_RENAME";
var DOCUMENTS_RENAME_SUCCESS = exports.DOCUMENTS_RENAME_SUCCESS = "DOCUMENTS_RENAME_SUCCESS";
var DOCUMENTS_RENAME_FAILURE = exports.DOCUMENTS_RENAME_FAILURE = "DOCUMENTS_RENAME_FAILURE";
var DOCUMENTS_MOVE = exports.DOCUMENTS_MOVE = "DOCUMENTS_MOVE";
var DOCUMENTS_MOVE_SUCCESS = exports.DOCUMENTS_MOVE_SUCCESS = "DOCUMENTS_MOVE_SUCCESS";
var DOCUMENTS_MOVE_FAILURE = exports.DOCUMENTS_MOVE_FAILURE = "DOCUMENTS_MOVE_FAILURE";
var DOCUMENTS_CHANGE_TYPE = exports.DOCUMENTS_CHANGE_TYPE = "DOCUMENTS_CHANGE_TYPE";
var DOCUMENTS_CHANGE_TYPE_SUCCESS = exports.DOCUMENTS_CHANGE_TYPE_SUCCESS = "DOCUMENTS_CHANGE_TYPE_SUCCESS";
var DOCUMENTS_CHANGE_TYPE_FAILURE = exports.DOCUMENTS_CHANGE_TYPE_FAILURE = "DOCUMENTS_CHANGE_TYPE_FAILURE";

var HTTP_CODE_CONFLICT = exports.HTTP_CODE_CONFLICT = 409;

var documentsSelect = exports.documentsSelect = function documentsSelect(document) {
    return {
        type: DOCUMENTS_SELECT, document: document
    };
};
var documentsChangeFilter = exports.documentsChangeFilter = function documentsChangeFilter(filter) {
    return {
        type: DOCUMENTS_CHANGE_FILTER, filter: filter
    };
};
var documentsChangeViewMode = exports.documentsChangeViewMode = function documentsChangeViewMode() {
    return {
        type: DOCUMENTS_CHANGE_VIEW_MODE
    };
};
var documentsClick = exports.documentsClick = function documentsClick(document) {
    return {
        type: DOCUMENTS_CLICK,
        document: document
    };
};

var documentsDownload = exports.documentsDownload = function documentsDownload(selected) {
    console.log('Download', selected);
    return function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch) {
            var paths, href, fullpath;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            if (!(selected.length === 1 && !(0, _tools.isDirectory)(selected[0]))) {
                                _context.next = 2;
                                break;
                            }

                            return _context.abrupt('return', dispatch(downloadFile(selected[0])));

                        case 2:
                            paths = selected.map(function (f) {
                                return f.path;
                            });
                            _context.next = 5;
                            return cozy.client.files.getArchiveLinkByPaths(paths);

                        case 5:
                            href = _context.sent;
                            _context.next = 8;
                            return cozy.client.fullpath(href);

                        case 8:
                            fullpath = _context.sent;

                            (0, _tools.forceFileDownload)(fullpath, 'empreinte.zip');
                            return _context.abrupt('return', dispatch({
                                type: DOCUMENTS_DOWNLOAD,
                                selected: selected
                            }));

                        case 11:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined);
        }));

        return function (_x) {
            return _ref.apply(this, arguments);
        };
    }();
};

var downloadFile = function downloadFile(file) {
    return function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dispatch) {
            var response, blob, filename;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _context2.next = 2;
                            return cozy.client.files.downloadById(file.id).catch(function (error) {
                                throw error;
                            });

                        case 2:
                            response = _context2.sent;
                            _context2.next = 5;
                            return response.blob();

                        case 5:
                            blob = _context2.sent;
                            filename = file.name;


                            (0, _tools.forceFileDownload)(window.URL.createObjectURL(blob), filename);
                            return _context2.abrupt('return', dispatch({
                                type: DOCUMENTS_DOWNLOAD,
                                file: file
                            }));

                        case 9:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, undefined);
        }));

        return function (_x2) {
            return _ref2.apply(this, arguments);
        };
    }();
};

var documentsNewFolder = exports.documentsNewFolder = function documentsNewFolder(name) {
    if (!name) {
        return {
            type: DOCUMENTS_NEW_FOLDER_FAILURE_GENERIC,
            alert: {
                message: 'Veuillez donner un nom au nouveau dossier'
            }
        };
    }

    return function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(dispatch, getState) {
            var files, existingFolder, parent, folder;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            files = getState().documents.files;
                            existingFolder = files && files.find(function (f) {
                                return (0, _tools.isDirectory)(f) && f.name === name;
                            });

                            if (!existingFolder) {
                                _context3.next = 4;
                                break;
                            }

                            return _context3.abrupt('return', dispatch({
                                type: DOCUMENTS_NEW_FOLDER_FAILURE_DUPLICATE,
                                alert: {
                                    message: 'L\'\xE9l\xE9ment ' + name + ' existe d\xE9j\xE0, merci de choisir un nouveau nom.'
                                }
                            }));

                        case 4:

                            dispatch({
                                type: DOCUMENTS_NEW_FOLDER,
                                name: name
                            });

                            _context3.prev = 5;
                            parent = getState().documents.folder;
                            _context3.next = 9;
                            return cozy.client.files.createDirectory({
                                name: name,
                                dirID: parent.id
                            });

                        case 9:
                            folder = _context3.sent;

                            dispatch((0, _importer.importerTree)());
                            dispatch({
                                type: DOCUMENTS_NEW_FOLDER_SUCCESS,
                                folder: (0, _tools.extractFileAttributes)(folder),
                                parent: parent
                            });
                            _context3.next = 18;
                            break;

                        case 14:
                            _context3.prev = 14;
                            _context3.t0 = _context3['catch'](5);

                            if (_context3.t0.response && _context3.t0.response.status === HTTP_CODE_CONFLICT) {
                                dispatch({
                                    type: DOCUMENTS_NEW_FOLDER_FAILURE_DUPLICATE,
                                    alert: {
                                        message: 'L\'\xE9l\xE9ment ' + name + ' existe d\xE9j\xE0, merci de choisir un nouveau nom.',
                                        level: _constants.ALERT_LEVEL_ERROR
                                    }
                                });
                            } else {
                                dispatch({
                                    type: DOCUMENTS_NEW_FOLDER_FAILURE_GENERIC,
                                    err: _context3.t0,
                                    alert: {
                                        message: 'Impossible de créer le nouveau dossier ' + name,
                                        level: _constants.ALERT_LEVEL_ERROR
                                    }
                                });
                            }
                            throw _context3.t0;

                        case 18:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, undefined, [[5, 14]]);
        }));

        return function (_x3, _x4) {
            return _ref3.apply(this, arguments);
        };
    }();
};

var testFolder = function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(path, dirID) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
                switch (_context4.prev = _context4.next) {
                    case 0:
                        _context4.next = 2;
                        return cozy.client.files.statByPath(path).catch(function (err) {
                            //create root folder
                            var name = path.substring(path.lastIndexOf('/') + 1);
                            console.log('Create initial folder', name);
                            return cozy.client.files.createDirectory({ name: name, dirID: dirID }).then(function (folder) {
                                folder.new = true;
                                return folder;
                            });
                        });

                    case 2:
                        return _context4.abrupt('return', _context4.sent);

                    case 3:
                    case 'end':
                        return _context4.stop();
                }
            }
        }, _callee4, undefined);
    }));

    return function testFolder(_x5, _x6) {
        return _ref4.apply(this, arguments);
    };
}();

var documentsInitialize = exports.documentsInitialize = function documentsInitialize() {
    return function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(dispatch, getState) {
            var useful, root, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, path, folder;

            return regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            dispatch({
                                type: DOCUMENTS_INITIALIZE
                            });

                            useful = false;
                            _context5.prev = 2;
                            _context5.next = 5;
                            return testFolder(_constants.ROOT_PATH, _constants.COZY_ROOT_ID);

                        case 5:
                            root = _context5.sent;
                            _iteratorNormalCompletion = true;
                            _didIteratorError = false;
                            _iteratorError = undefined;
                            _context5.prev = 9;
                            _iterator = _constants.FOLDER_LIST[Symbol.iterator]();

                        case 11:
                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                _context5.next = 20;
                                break;
                            }

                            path = _step.value;
                            _context5.next = 15;
                            return testFolder(path, root._id);

                        case 15:
                            folder = _context5.sent;

                            if (folder.new) useful = true;

                        case 17:
                            _iteratorNormalCompletion = true;
                            _context5.next = 11;
                            break;

                        case 20:
                            _context5.next = 26;
                            break;

                        case 22:
                            _context5.prev = 22;
                            _context5.t0 = _context5['catch'](9);
                            _didIteratorError = true;
                            _iteratorError = _context5.t0;

                        case 26:
                            _context5.prev = 26;
                            _context5.prev = 27;

                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }

                        case 29:
                            _context5.prev = 29;

                            if (!_didIteratorError) {
                                _context5.next = 32;
                                break;
                            }

                            throw _iteratorError;

                        case 32:
                            return _context5.finish(29);

                        case 33:
                            return _context5.finish(26);

                        case 34:

                            if (useful) {
                                dispatch((0, _load.loadFolder)(_constants.ROOT_PATH));
                            }
                            dispatch((0, _gauge.gaugeInitialize)());
                            return _context5.abrupt('return', dispatch({
                                type: DOCUMENTS_INITIALIZE_SUCCESS,
                                useful: useful
                            }));

                        case 39:
                            _context5.prev = 39;
                            _context5.t1 = _context5['catch'](2);
                            return _context5.abrupt('return', dispatch({
                                type: DOCUMENTS_INITIALIZE_FAILURE,
                                err: _context5.t1,
                                alert: {
                                    message: 'Impossible d\'initialiser Homebook',
                                    level: _constants.ALERT_LEVEL_ERROR
                                }
                            }));

                        case 42:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, undefined, [[2, 39], [9, 22, 26, 34], [27,, 29, 33]]);
        }));

        return function (_x7, _x8) {
            return _ref5.apply(this, arguments);
        };
    }();
};

var protectedFolders = _constants.DATA_LIST.map(function (item) {
    return item.path;
});

var getTypeOf = function getTypeOf(file) {
    return file.attributes.tags && file.attributes.tags[0];
};

var documentsRemove = exports.documentsRemove = function documentsRemove(files) {
    return function () {
        var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(dispatch) {
            var trashed, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, file;

            return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            dispatch({
                                type: DOCUMENTS_REMOVE,
                                files: files
                            });
                            trashed = [];
                            _context6.prev = 2;
                            _iteratorNormalCompletion2 = true;
                            _didIteratorError2 = false;
                            _iteratorError2 = undefined;
                            _context6.prev = 6;
                            _iterator2 = files[Symbol.iterator]();

                        case 8:
                            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                _context6.next = 20;
                                break;
                            }

                            file = _step2.value;

                            if (!(file.path && protectedFolders.indexOf(file.path) !== -1)) {
                                _context6.next = 12;
                                break;
                            }

                            return _context6.abrupt('continue', 17);

                        case 12:
                            _context6.t0 = trashed;
                            _context6.next = 15;
                            return cozy.client.files.trashById(file.id);

                        case 15:
                            _context6.t1 = _context6.sent;

                            _context6.t0.push.call(_context6.t0, _context6.t1);

                        case 17:
                            _iteratorNormalCompletion2 = true;
                            _context6.next = 8;
                            break;

                        case 20:
                            _context6.next = 26;
                            break;

                        case 22:
                            _context6.prev = 22;
                            _context6.t2 = _context6['catch'](6);
                            _didIteratorError2 = true;
                            _iteratorError2 = _context6.t2;

                        case 26:
                            _context6.prev = 26;
                            _context6.prev = 27;

                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }

                        case 29:
                            _context6.prev = 29;

                            if (!_didIteratorError2) {
                                _context6.next = 32;
                                break;
                            }

                            throw _iteratorError2;

                        case 32:
                            return _context6.finish(29);

                        case 33:
                            return _context6.finish(26);

                        case 34:
                            return _context6.abrupt('return', dispatch({
                                type: DOCUMENTS_REMOVE_SUCCESS,
                                ids: trashed.map(function (f) {
                                    return f._id;
                                }),
                                types: trashed.map(function (f) {
                                    return getTypeOf(f);
                                }).filter(function (f) {
                                    return f !== undefined;
                                })
                            }));

                        case 37:
                            _context6.prev = 37;
                            _context6.t3 = _context6['catch'](2);
                            return _context6.abrupt('return', dispatch({
                                type: DOCUMENTS_REMOVE_FAILURE,
                                err: _context6.t3,
                                alert: {
                                    message: 'Impossible de deplacer ces éléments dans la corbeille',
                                    level: _constants.ALERT_LEVEL_ERROR
                                }
                            }));

                        case 40:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, _callee6, undefined, [[2, 37], [6, 22, 26, 34], [27,, 29, 33]]);
        }));

        return function (_x9) {
            return _ref6.apply(this, arguments);
        };
    }();
};

var documentsRestore = exports.documentsRestore = function documentsRestore(files) {
    return function () {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(dispatch) {
            var restored, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, file;

            return regeneratorRuntime.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            dispatch({
                                type: DOCUMENTS_RESTORE,
                                files: files
                            });
                            restored = [];
                            _context7.prev = 2;
                            _iteratorNormalCompletion3 = true;
                            _didIteratorError3 = false;
                            _iteratorError3 = undefined;
                            _context7.prev = 6;
                            _iterator3 = files[Symbol.iterator]();

                        case 8:
                            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                                _context7.next = 18;
                                break;
                            }

                            file = _step3.value;
                            _context7.t0 = restored;
                            _context7.next = 13;
                            return cozy.client.files.restoreById(file.id);

                        case 13:
                            _context7.t1 = _context7.sent;

                            _context7.t0.push.call(_context7.t0, _context7.t1);

                        case 15:
                            _iteratorNormalCompletion3 = true;
                            _context7.next = 8;
                            break;

                        case 18:
                            _context7.next = 24;
                            break;

                        case 20:
                            _context7.prev = 20;
                            _context7.t2 = _context7['catch'](6);
                            _didIteratorError3 = true;
                            _iteratorError3 = _context7.t2;

                        case 24:
                            _context7.prev = 24;
                            _context7.prev = 25;

                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }

                        case 27:
                            _context7.prev = 27;

                            if (!_didIteratorError3) {
                                _context7.next = 30;
                                break;
                            }

                            throw _iteratorError3;

                        case 30:
                            return _context7.finish(27);

                        case 31:
                            return _context7.finish(24);

                        case 32:
                            _context7.next = 37;
                            break;

                        case 34:
                            _context7.prev = 34;
                            _context7.t3 = _context7['catch'](2);
                            return _context7.abrupt('return', dispatch({
                                type: DOCUMENTS_RESTORE_FAILURE
                            }));

                        case 37:
                            return _context7.abrupt('return', dispatch({
                                type: DOCUMENTS_RESTORE_SUCCESS,
                                ids: files.map(function (f) {
                                    return f.id;
                                }),
                                types: restored.map(function (f) {
                                    return getTypeOf(f);
                                }).filter(function (f) {
                                    return f !== undefined;
                                })
                            }));

                        case 38:
                        case 'end':
                            return _context7.stop();
                    }
                }
            }, _callee7, undefined, [[2, 34], [6, 20, 24, 32], [25,, 27, 31]]);
        }));

        return function (_x10) {
            return _ref7.apply(this, arguments);
        };
    }();
};

var documentsRename = exports.documentsRename = function documentsRename(id, name) {
    return function () {
        var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(dispatch) {
            var file;
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            dispatch({
                                type: DOCUMENTS_RENAME,
                                id: id,
                                name: name
                            });
                            _context8.prev = 1;
                            _context8.next = 4;
                            return cozy.client.files.updateAttributesById(id, { name: name });

                        case 4:
                            file = _context8.sent;
                            return _context8.abrupt('return', dispatch({
                                type: DOCUMENTS_RENAME_SUCCESS,
                                file: (0, _tools.extractFileAttributes)(file)
                            }));

                        case 8:
                            _context8.prev = 8;
                            _context8.t0 = _context8['catch'](1);
                            return _context8.abrupt('return', dispatch({
                                type: DOCUMENTS_RENAME_FAILURE,
                                err: _context8.t0
                            }));

                        case 11:
                        case 'end':
                            return _context8.stop();
                    }
                }
            }, _callee8, undefined, [[1, 8]]);
        }));

        return function (_x11) {
            return _ref8.apply(this, arguments);
        };
    }();
};

var documentsMove = exports.documentsMove = function documentsMove(files, path) {
    return function () {
        var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(dispatch) {
            var moved, parent, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, file, data;

            return regeneratorRuntime.wrap(function _callee9$(_context9) {
                while (1) {
                    switch (_context9.prev = _context9.next) {
                        case 0:
                            dispatch({
                                type: DOCUMENTS_MOVE,
                                files: files,
                                path: path
                            });
                            moved = [];
                            _context9.prev = 2;
                            _context9.next = 5;
                            return cozy.client.files.statByPath(path);

                        case 5:
                            parent = _context9.sent;
                            _iteratorNormalCompletion4 = true;
                            _didIteratorError4 = false;
                            _iteratorError4 = undefined;
                            _context9.prev = 9;
                            _iterator4 = files[Symbol.iterator]();

                        case 11:
                            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                                _context9.next = 23;
                                break;
                            }

                            file = _step4.value;

                            if (!(file.path && protectedFolders.indexOf(file.path) !== -1)) {
                                _context9.next = 15;
                                break;
                            }

                            return _context9.abrupt('continue', 20);

                        case 15:
                            _context9.t0 = moved;
                            _context9.next = 18;
                            return cozy.client.files.updateAttributesById(file.id, { dir_id: parent._id });

                        case 18:
                            _context9.t1 = _context9.sent;

                            _context9.t0.push.call(_context9.t0, _context9.t1);

                        case 20:
                            _iteratorNormalCompletion4 = true;
                            _context9.next = 11;
                            break;

                        case 23:
                            _context9.next = 29;
                            break;

                        case 25:
                            _context9.prev = 25;
                            _context9.t2 = _context9['catch'](9);
                            _didIteratorError4 = true;
                            _iteratorError4 = _context9.t2;

                        case 29:
                            _context9.prev = 29;
                            _context9.prev = 30;

                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                _iterator4.return();
                            }

                        case 32:
                            _context9.prev = 32;

                            if (!_didIteratorError4) {
                                _context9.next = 35;
                                break;
                            }

                            throw _iteratorError4;

                        case 35:
                            return _context9.finish(32);

                        case 36:
                            return _context9.finish(29);

                        case 37:
                            dispatch((0, _importer.importerTree)());
                            return _context9.abrupt('return', dispatch({
                                type: DOCUMENTS_MOVE_SUCCESS,
                                ids: moved.map(function (f) {
                                    return f._id;
                                })
                            }));

                        case 41:
                            _context9.prev = 41;
                            _context9.t3 = _context9['catch'](2);
                            data = {
                                type: DOCUMENTS_MOVE_FAILURE,
                                err: _context9.t3
                            };

                            if (_context9.t3.status === 409) {
                                data.alert = {
                                    message: "Déplacement intérrompu car un élément du même nom existe déjà dans le dossier cible."
                                };
                            }
                            return _context9.abrupt('return', dispatch(data));

                        case 46:
                        case 'end':
                            return _context9.stop();
                    }
                }
            }, _callee9, undefined, [[2, 41], [9, 25, 29, 37], [30,, 32, 36]]);
        }));

        return function (_x12) {
            return _ref9.apply(this, arguments);
        };
    }();
};

var documentsChangeType = exports.documentsChangeType = function documentsChangeType(file, slug) {
    return function () {
        var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(dispatch) {
            var newFile;
            return regeneratorRuntime.wrap(function _callee10$(_context10) {
                while (1) {
                    switch (_context10.prev = _context10.next) {
                        case 0:
                            dispatch({ type: DOCUMENTS_CHANGE_TYPE, file: file, slug: slug });
                            _context10.prev = 1;
                            _context10.next = 4;
                            return cozy.client.files.updateAttributesById(file.id, { tags: [slug] });

                        case 4:
                            newFile = _context10.sent;
                            return _context10.abrupt('return', dispatch({
                                type: DOCUMENTS_CHANGE_TYPE_SUCCESS,
                                file: (0, _tools.extractFileAttributes)(newFile),
                                newTag: slug || undefined,
                                oldTag: file.tags && file.tags[0]
                            }));

                        case 8:
                            _context10.prev = 8;
                            _context10.t0 = _context10['catch'](1);
                            return _context10.abrupt('return', dispatch({ type: DOCUMENTS_CHANGE_TYPE_FAILURE, err: _context10.t0 }));

                        case 11:
                        case 'end':
                            return _context10.stop();
                    }
                }
            }, _callee10, undefined, [[1, 8]]);
        }));

        return function (_x13) {
            return _ref10.apply(this, arguments);
        };
    }();
};

/***/ }),

/***/ "./src/actions/gauge.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.gaugeInitialize = exports.GAUGE_INITIALIZE_FAILURE = exports.GAUGE_INITIALIZE_SUCCESS = exports.GAUGE_INITIALIZE = undefined;

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var fileType = (0, _fileTypes.getFileTypes)().map(function (f) {
    return f.key;
});

var GAUGE_INITIALIZE = exports.GAUGE_INITIALIZE = "GAUGE_INITIALIZE";
var GAUGE_INITIALIZE_SUCCESS = exports.GAUGE_INITIALIZE_SUCCESS = "GAUGE_INITIALIZE_SUCCESS";
var GAUGE_INITIALIZE_FAILURE = exports.GAUGE_INITIALIZE_FAILURE = "GAUGE_INITIALIZE_FAILURE";

var gaugeInitialize = exports.gaugeInitialize = function gaugeInitialize() {
    return function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {
            var types, data;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            dispatch({ type: GAUGE_INITIALIZE });

                            _context.prev = 1;
                            _context.next = 4;
                            return detectUsedTypesV2();

                        case 4:
                            types = _context.sent;
                            data = [];
                            _context.next = 8;
                            return detectCreatedData(data);

                        case 8:
                            return _context.abrupt('return', dispatch({ type: GAUGE_INITIALIZE_SUCCESS, types: types, data: data }));

                        case 11:
                            _context.prev = 11;
                            _context.t0 = _context['catch'](1);
                            return _context.abrupt('return', dispatch({ type: GAUGE_INITIALIZE_FAILURE, err: _context.t0 }));

                        case 14:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined, [[1, 11]]);
        }));

        return function (_x, _x2) {
            return _ref.apply(this, arguments);
        };
    }();
};

// const detectUsedTypesOld = async(path, types) => {
//     const folder = await cozy.client.files.statByPath(path)
//     const content = folder.relations('contents')

//     for(let child of content) {
//         if(child.attributes && child.attributes.type && child.attributes.type === 'directory') {
//             await detectUsedTypes(child.attributes.path, types)
//         } else {
//             if(child.attributes.tags && child.attributes.tags.length > 0) {
//                 const type = extractType(child.attributes.tags[0])
//                 if(!type) continue

//                 let find = false
//                 for(let t of types) {
//                     if(t.type === type) {
//                         t.count = t.count + 1 || 1
//                         find = true
//                         break
//                     }
//                 }
//                 if(!find) {
//                     types.push({type, count:1})
//                 }
//             }
//         }
//     }
// }

var getAllResponse = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(indexRef, selector) {
        var next, res, skip, ret;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        next = true;
                        res = [];
                        skip = 0;

                    case 3:
                        if (!next) {
                            _context2.next = 12;
                            break;
                        }

                        _context2.next = 6;
                        return cozy.client.data.query(indexRef, {
                            "selector": selector,
                            "wholeResponse": true,
                            "skip": skip
                        });

                    case 6:
                        ret = _context2.sent;

                        next = ret.next;
                        skip += ret.limit;
                        res = res.concat(ret.docs);
                        _context2.next = 3;
                        break;

                    case 12:
                        return _context2.abrupt('return', res);

                    case 13:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, undefined);
    }));

    return function getAllResponse(_x3, _x4) {
        return _ref2.apply(this, arguments);
    };
}();

var detectUsedTypesV2 = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(types) {
        var indexRef, allFiles, sorted, counted, ret;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        _context3.next = 2;
                        return cozy.client.data.defineIndex('io.cozy.files', ['_id', 'type']);

                    case 2:
                        indexRef = _context3.sent;
                        _context3.next = 5;
                        return getAllResponse(indexRef, {
                            "_id": {
                                $gt: null
                            },
                            "type": 'file'
                        });

                    case 5:
                        allFiles = _context3.sent;
                        sorted = allFiles.map(function (f) {
                            return f.tags && f.tags.length > 0 && f.tags[0];
                        }).filter(function (f) {
                            return !!f;
                        });
                        counted = _lodash2.default.countBy(sorted);
                        ret = _lodash2.default.map(counted, function (count, type) {
                            return {
                                type: type,
                                count: count
                            };
                        });
                        return _context3.abrupt('return', ret);

                    case 10:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, undefined);
    }));

    return function detectUsedTypesV2(_x5) {
        return _ref3.apply(this, arguments);
    };
}();

var extractType = function extractType(type) {
    if (fileType.indexOf(type) !== 0) return type;
    return false;
};

var detectCreatedData = function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(data) {
        var doctypes, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, doctype, eles, noTrash;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
                switch (_context4.prev = _context4.next) {
                    case 0:
                        doctypes = [_constants.DOCTYPE_F_CONTACTS, _constants.DOCTYPE_F_LASTWILL, _constants.DOCTYPE_DIAGNOSIS, _constants.DOCTYPE_EQUIPMENTS, _constants.DOCTYPE_HOMEDATA, _constants.DOCTYPE_MAINTENANCES, _constants.DOCTYPE_WORKS];
                        _iteratorNormalCompletion = true;
                        _didIteratorError = false;
                        _iteratorError = undefined;
                        _context4.prev = 4;
                        _iterator = doctypes[Symbol.iterator]();

                    case 6:
                        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                            _context4.next = 16;
                            break;
                        }

                        doctype = _step.value;
                        _context4.next = 10;
                        return (0, _tools.getDataElements)(doctype);

                    case 10:
                        eles = _context4.sent;
                        noTrash = eles.filter(function (d) {
                            return !d.trash;
                        });

                        if (noTrash.length > 0) {
                            data.push({ doctype: doctype, count: noTrash.length });
                        }

                    case 13:
                        _iteratorNormalCompletion = true;
                        _context4.next = 6;
                        break;

                    case 16:
                        _context4.next = 22;
                        break;

                    case 18:
                        _context4.prev = 18;
                        _context4.t0 = _context4['catch'](4);
                        _didIteratorError = true;
                        _iteratorError = _context4.t0;

                    case 22:
                        _context4.prev = 22;
                        _context4.prev = 23;

                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }

                    case 25:
                        _context4.prev = 25;

                        if (!_didIteratorError) {
                            _context4.next = 28;
                            break;
                        }

                        throw _iteratorError;

                    case 28:
                        return _context4.finish(25);

                    case 29:
                        return _context4.finish(22);

                    case 30:
                    case 'end':
                        return _context4.stop();
                }
            }
        }, _callee4, undefined, [[4, 18, 22, 30], [23,, 25, 29]]);
    }));

    return function detectCreatedData(_x6) {
        return _ref4.apply(this, arguments);
    };
}();

/***/ }),

/***/ "./src/actions/importer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.importerFilesUpload = exports.importerTree = exports.importerViewChange = exports.importerDirectoryChange = exports.importerClick = exports.IMPORTER_TREE_FAILURE = exports.IMPORTER_TREE_SUCCESS = exports.IMPORTER_TREE = exports.IMPORTER_VIEW_CHANGE = exports.IMPORTER_DIRECTORY_CHANGE = exports.IMPORTER_FILE_UPLOAD_FAILURE = exports.IMPORTER_FILE_UPLOAD_SUCESS = exports.IMPORTER_FILE_UPLOAD = exports.IMPORTER_CLICK = undefined;

var _tools = __webpack_require__("./src/tools/index.js");

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _constants = __webpack_require__("./src/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var IMPORTER_CLICK = exports.IMPORTER_CLICK = "IMPORTER_CLICK";
var IMPORTER_FILE_UPLOAD = exports.IMPORTER_FILE_UPLOAD = "IMPORTER_FILE_UPLOAD";
var IMPORTER_FILE_UPLOAD_SUCESS = exports.IMPORTER_FILE_UPLOAD_SUCESS = "IMPORTER_FILE_UPLOAD_SUCESS";
var IMPORTER_FILE_UPLOAD_FAILURE = exports.IMPORTER_FILE_UPLOAD_FAILURE = "IMPORTER_FILE_UPLOAD_FAILURE";
var IMPORTER_DIRECTORY_CHANGE = exports.IMPORTER_DIRECTORY_CHANGE = "IMPORTER_DIRECTORY_CHANGE";
var IMPORTER_VIEW_CHANGE = exports.IMPORTER_VIEW_CHANGE = "IMPORTER_VIEW_CHANGE";
var IMPORTER_TREE = exports.IMPORTER_TREE = "IMPORTER_TREE";
var IMPORTER_TREE_SUCCESS = exports.IMPORTER_TREE_SUCCESS = "IMPORTER_TREE_SUCCESS";
var IMPORTER_TREE_FAILURE = exports.IMPORTER_TREE_FAILURE = "IMPORTER_TREE_FAILURE";

var importerClick = exports.importerClick = function importerClick() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var slug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

    if (path === "") path = _constants.ROOT_PATH;
    return function (dispatch, getState) {
        if (_lodash2.default.isEmpty(getState().importer.documentsTree)) dispatch(importerTree());
        return dispatch({ type: IMPORTER_CLICK, slug: slug, path: path });
    };
};
var importerDirectoryChange = exports.importerDirectoryChange = function importerDirectoryChange(path) {
    return { type: IMPORTER_DIRECTORY_CHANGE, path: path };
};
var importerViewChange = exports.importerViewChange = function importerViewChange(view) {
    return { type: IMPORTER_VIEW_CHANGE, view: view };
};

var findChildren = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(tree) {
        var result, next, childs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, child, newDir, newFile;

        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.next = 2;
                        return cozy.client.files.statByPath(tree.path);

                    case 2:
                        result = _context.sent;
                        next = [];
                        childs = result.relations('contents');
                        _iteratorNormalCompletion = true;
                        _didIteratorError = false;
                        _iteratorError = undefined;
                        _context.prev = 8;
                        _iterator = childs[Symbol.iterator]();

                    case 10:
                        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                            _context.next = 27;
                            break;
                        }

                        child = _step.value;

                        if (!(child.attributes.type === 'directory')) {
                            _context.next = 22;
                            break;
                        }

                        newDir = {
                            path: child.attributes.path,
                            name: child.attributes.name,
                            childs: [],
                            dir: true
                        };
                        _context.t0 = next;
                        _context.next = 17;
                        return findChildren(newDir);

                    case 17:
                        _context.t1 = _context.sent;

                        _context.t0.push.call(_context.t0, _context.t1);

                        tree.childs.push(newDir);
                        _context.next = 24;
                        break;

                    case 22:
                        newFile = {
                            path: result.attributes.path + '/' + child.attributes.name,
                            name: child.attributes.name
                        };

                        tree.childs.push(newFile);

                    case 24:
                        _iteratorNormalCompletion = true;
                        _context.next = 10;
                        break;

                    case 27:
                        _context.next = 33;
                        break;

                    case 29:
                        _context.prev = 29;
                        _context.t2 = _context['catch'](8);
                        _didIteratorError = true;
                        _iteratorError = _context.t2;

                    case 33:
                        _context.prev = 33;
                        _context.prev = 34;

                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }

                    case 36:
                        _context.prev = 36;

                        if (!_didIteratorError) {
                            _context.next = 39;
                            break;
                        }

                        throw _iteratorError;

                    case 39:
                        return _context.finish(36);

                    case 40:
                        return _context.finish(33);

                    case 41:
                        return _context.abrupt('return', next);

                    case 42:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined, [[8, 29, 33, 41], [34,, 36, 40]]);
    }));

    return function findChildren(_x3) {
        return _ref.apply(this, arguments);
    };
}();

var importerTree = exports.importerTree = function importerTree() {
    return function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dispatch, getState) {
            var tree;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            dispatch({ type: IMPORTER_TREE });

                            _context2.prev = 1;
                            tree = { path: _constants.ROOT_PATH, childs: [], name: _constants.ROOT_NAME.substring(1), dir: true };
                            _context2.next = 5;
                            return findChildren(tree);

                        case 5:
                            return _context2.abrupt('return', dispatch({ type: IMPORTER_TREE_SUCCESS, tree: tree }));

                        case 8:
                            _context2.prev = 8;
                            _context2.t0 = _context2['catch'](1);
                            return _context2.abrupt('return', dispatch({ type: IMPORTER_TREE_FAILURE, err: _context2.t0 }));

                        case 11:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, undefined, [[1, 8]]);
        }));

        return function (_x4, _x5) {
            return _ref2.apply(this, arguments);
        };
    }();
};

var importerFilesUpload = exports.importerFilesUpload = function importerFilesUpload(files, dirId) {
    //console.log('Data', files);
    return function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(dispatch, getState) {
            var newFiles, conflits, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, data, file, newDir, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _file, fullName, lastIndex, name, extention, action, currentDir;

            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            dispatch({
                                type: IMPORTER_FILE_UPLOAD,
                                dirId: dirId
                            });
                            newFiles = [];
                            conflits = [];
                            _context3.prev = 3;
                            _iteratorNormalCompletion2 = true;
                            _didIteratorError2 = false;
                            _iteratorError2 = undefined;
                            _context3.prev = 7;
                            _iterator2 = files[Symbol.iterator]();

                        case 9:
                            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                _context3.next = 93;
                                break;
                            }

                            data = _step2.value;
                            file = void 0;

                            if (!data.isDirectory) {
                                _context3.next = 65;
                                break;
                            }

                            _context3.prev = 13;
                            _context3.next = 16;
                            return cozy.client.files.createDirectory({
                                name: data.name,
                                dirID: dirId
                            });

                        case 16:
                            newDir = _context3.sent;


                            //add content
                            _iteratorNormalCompletion3 = true;
                            _didIteratorError3 = false;
                            _iteratorError3 = undefined;
                            _context3.prev = 20;
                            _iterator3 = data.content[Symbol.iterator]();

                        case 22:
                            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                                _context3.next = 38;
                                break;
                            }

                            _file = _step3.value;

                            if (!(_file.size > _constants.MAX_FILE_SIZE)) {
                                _context3.next = 26;
                                break;
                            }

                            return _context3.abrupt('continue', 35);

                        case 26:
                            _context3.prev = 26;
                            _context3.next = 29;
                            return cozy.client.files.create(_file, {
                                name: _file.name,
                                dirID: newDir._id
                            });

                        case 29:
                            _file = _context3.sent;
                            _context3.next = 35;
                            break;

                        case 32:
                            _context3.prev = 32;
                            _context3.t0 = _context3['catch'](26);
                            throw _context3.t0;

                        case 35:
                            _iteratorNormalCompletion3 = true;
                            _context3.next = 22;
                            break;

                        case 38:
                            _context3.next = 44;
                            break;

                        case 40:
                            _context3.prev = 40;
                            _context3.t1 = _context3['catch'](20);
                            _didIteratorError3 = true;
                            _iteratorError3 = _context3.t1;

                        case 44:
                            _context3.prev = 44;
                            _context3.prev = 45;

                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }

                        case 47:
                            _context3.prev = 47;

                            if (!_didIteratorError3) {
                                _context3.next = 50;
                                break;
                            }

                            throw _iteratorError3;

                        case 50:
                            return _context3.finish(47);

                        case 51:
                            return _context3.finish(44);

                        case 52:

                            newFiles.push(newDir);
                            _context3.next = 63;
                            break;

                        case 55:
                            _context3.prev = 55;
                            _context3.t2 = _context3['catch'](13);

                            if (!(_context3.t2.status === 409)) {
                                _context3.next = 62;
                                break;
                            }

                            console.log('Confict with file', data.name);
                            conflits.push(data);
                            _context3.next = 63;
                            break;

                        case 62:
                            throw _context3.t2;

                        case 63:
                            _context3.next = 90;
                            break;

                        case 65:
                            if (!(data.size > _constants.MAX_FILE_SIZE)) {
                                _context3.next = 67;
                                break;
                            }

                            return _context3.abrupt('continue', 90);

                        case 67:
                            fullName = data.name;
                            lastIndex = fullName.lastIndexOf(".");
                            name = fullName.slice(0, lastIndex);
                            extention = fullName.slice(lastIndex);
                            _context3.prev = 71;
                            _context3.next = 74;
                            return cozy.client.files.create(data, {
                                name: name + '-' + Date.now() + extention,
                                dirID: dirId
                            });

                        case 74:
                            file = _context3.sent;

                            if (!data.typeFile) {
                                _context3.next = 79;
                                break;
                            }

                            _context3.next = 78;
                            return cozy.client.files.updateAttributesById(file._id, { tags: [data.typeFile] });

                        case 78:
                            file = _context3.sent;

                        case 79:
                            newFiles.push(file);

                            _context3.next = 90;
                            break;

                        case 82:
                            _context3.prev = 82;
                            _context3.t3 = _context3['catch'](71);

                            if (!(_context3.t3.status === 409)) {
                                _context3.next = 89;
                                break;
                            }

                            console.log('Confict with file', data.name);
                            conflits.push(data);
                            _context3.next = 90;
                            break;

                        case 89:
                            throw _context3.t3;

                        case 90:
                            _iteratorNormalCompletion2 = true;
                            _context3.next = 9;
                            break;

                        case 93:
                            _context3.next = 99;
                            break;

                        case 95:
                            _context3.prev = 95;
                            _context3.t4 = _context3['catch'](7);
                            _didIteratorError2 = true;
                            _iteratorError2 = _context3.t4;

                        case 99:
                            _context3.prev = 99;
                            _context3.prev = 100;

                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }

                        case 102:
                            _context3.prev = 102;

                            if (!_didIteratorError2) {
                                _context3.next = 105;
                                break;
                            }

                            throw _iteratorError2;

                        case 105:
                            return _context3.finish(102);

                        case 106:
                            return _context3.finish(99);

                        case 107:
                            action = {
                                type: IMPORTER_FILE_UPLOAD_SUCESS,
                                files: newFiles.map(function (f) {
                                    return (0, _tools.extractFileAttributes)(f);
                                }),
                                conflits: conflits
                            };
                            currentDir = getState().documents.folder;

                            if (currentDir) {
                                action.currentDir = currentDir.id === dirId;
                            }
                            if (conflits.length > 0) {
                                action.alert = {
                                    message: 'Plusieurs fichiers n\'ont pas \xE9tait ajout\xE9 car ils existaient deja dans ce dossier : \n' + conflits.map(function (f) {
                                        return f.name;
                                    }).join('\n')
                                };
                            }
                            return _context3.abrupt('return', dispatch(action));

                        case 114:
                            _context3.prev = 114;
                            _context3.t5 = _context3['catch'](3);
                            return _context3.abrupt('return', dispatch({
                                type: IMPORTER_FILE_UPLOAD_FAILURE,
                                err: _context3.t5,
                                alert: {
                                    message: 'Impossible d\'ajouter le(s) élément(s)',
                                    level: _constants.ALERT_LEVEL_ERROR
                                }
                            }));

                        case 117:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, undefined, [[3, 114], [7, 95, 99, 107], [13, 55], [20, 40, 44, 52], [26, 32], [45,, 47, 51], [71, 82], [100,, 102, 106]]);
        }));

        return function (_x6, _x7) {
            return _ref3.apply(this, arguments);
        };
    }();
};

/***/ }),

/***/ "./src/actions/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _contacts = __webpack_require__("./src/actions/contacts.js");

Object.keys(_contacts).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _contacts[key];
    }
  });
});

var _alerts = __webpack_require__("./src/actions/alerts.js");

Object.keys(_alerts).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _alerts[key];
    }
  });
});

var _data = __webpack_require__("./src/actions/data.js");

Object.keys(_data).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _data[key];
    }
  });
});

var _documents = __webpack_require__("./src/actions/documents.js");

Object.keys(_documents).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _documents[key];
    }
  });
});

var _load = __webpack_require__("./src/actions/load.js");

Object.keys(_load).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _load[key];
    }
  });
});

var _gauge = __webpack_require__("./src/actions/gauge.js");

Object.keys(_gauge).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _gauge[key];
    }
  });
});

var _importer = __webpack_require__("./src/actions/importer.js");

Object.keys(_importer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _importer[key];
    }
  });
});

/***/ }),

/***/ "./src/actions/load.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.loadTrash = exports.loadData = exports.loadNews = exports.loadContacts = exports.loadRecalls = exports.loadFolder = exports.LOAD_NEWS_FAILURE = exports.LOAD_NEWS_SUCCESS = exports.LOAD_NEWS = exports.LOAD_FILE_SUCCESS = exports.LOAD_TRASH_FAILURE = exports.LOAD_TRASH_SUCCESS = exports.LOAD_TRASH = exports.LOAD_DATA_FAILURE = exports.LOAD_DATA_SUCCESS = exports.LOAD_DATA = exports.LOAD_CONTACTS_FAILURE = exports.LOAD_CONTACTS_SUCCESS = exports.LOAD_CONTACTS = exports.LOAD_RECALLS_FAILURE = exports.LOAD_RECALLS_SUCCESS = exports.LOAD_RECALLS = exports.LOAD_DOCS_FAILURE = exports.LOAD_DOCS_SUCCESS = exports.LOAD_DOCS = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _moment = __webpack_require__("./node_modules/moment/moment.js");

var _moment2 = _interopRequireDefault(_moment);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _tools = __webpack_require__("./src/tools/index.js");

var _constants = __webpack_require__("./src/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var LOAD_DOCS = exports.LOAD_DOCS = "LOAD_DOCS";
var LOAD_DOCS_SUCCESS = exports.LOAD_DOCS_SUCCESS = "LOAD_DOCS_SUCCESS";
var LOAD_DOCS_FAILURE = exports.LOAD_DOCS_FAILURE = "LOAD_DOCS_FAILURE";
var LOAD_RECALLS = exports.LOAD_RECALLS = "LOAD_RECALLS";
var LOAD_RECALLS_SUCCESS = exports.LOAD_RECALLS_SUCCESS = "LOAD_RECALLS_SUCCESS";
var LOAD_RECALLS_FAILURE = exports.LOAD_RECALLS_FAILURE = "LOAD_RECALLS_FAILURE";
var LOAD_CONTACTS = exports.LOAD_CONTACTS = "LOAD_CONTACTS";
var LOAD_CONTACTS_SUCCESS = exports.LOAD_CONTACTS_SUCCESS = "LOAD_CONTACTS_SUCCESS";
var LOAD_CONTACTS_FAILURE = exports.LOAD_CONTACTS_FAILURE = "LOAD_CONTACTS_FAILURE";
var LOAD_DATA = exports.LOAD_DATA = "LOAD_DATA";
var LOAD_DATA_SUCCESS = exports.LOAD_DATA_SUCCESS = "LOAD_DATA_SUCCESS";
var LOAD_DATA_FAILURE = exports.LOAD_DATA_FAILURE = "LOAD_DATA_FAILURE";
var LOAD_TRASH = exports.LOAD_TRASH = "LOAD_TRASH";
var LOAD_TRASH_SUCCESS = exports.LOAD_TRASH_SUCCESS = "LOAD_TRASH_SUCCESS";
var LOAD_TRASH_FAILURE = exports.LOAD_TRASH_FAILURE = "LOAD_TRASH_FAILURE";
var LOAD_FILE_SUCCESS = exports.LOAD_FILE_SUCCESS = "LOAD_FILE_SUCCESS";
var LOAD_NEWS = exports.LOAD_NEWS = "LOAD_NEWS";
var LOAD_NEWS_SUCCESS = exports.LOAD_NEWS_SUCCESS = "LOAD_NEWS_SUCCESS";
var LOAD_NEWS_FAILURE = exports.LOAD_NEWS_FAILURE = "LOAD_NEWS_FAILURE";

var loadFolder = exports.loadFolder = function loadFolder() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.ROOT_PATH;

    return function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {
            var element, parentId, parent, contents, files, fileCount;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            dispatch({
                                type: LOAD_DOCS,
                                path: path
                            });
                            _context.prev = 1;
                            _context.next = 4;
                            return cozy.client.files.statByPath(path);

                        case 4:
                            element = _context.sent;
                            parentId = element.attributes.dir_id;
                            _context.t0 = !!parentId;

                            if (!_context.t0) {
                                _context.next = 11;
                                break;
                            }

                            _context.next = 10;
                            return cozy.client.files.statById(parentId).catch(function (ex) {
                                if (ex.status === 403) {
                                    console.warn('User don\'t have access to parent folder');
                                } else {
                                    throw ex;
                                }
                            });

                        case 10:
                            _context.t0 = _context.sent;

                        case 11:
                            parent = _context.t0;

                            if (!(element.attributes.type === 'directory')) {
                                _context.next = 24;
                                break;
                            }

                            contents = element.relationships.contents;
                            // folder.relations('contents') returns null when the trash is empty
                            // the filter call is a temporary fix due to a cozy-client-js bug

                            files = element.relations('contents').filter(function (f) {
                                return f !== undefined;
                            }) || [];
                            fileCount = contents.meta.count || 0;

                            if (!(fileCount > files.length)) {
                                _context.next = 21;
                                break;
                            }

                            //load more files
                            console.log('More files', element._id);
                            _context.next = 20;
                            return loadFileRec(element._id, files, fileCount);

                        case 20:
                            files = _context.sent;

                        case 21:
                            return _context.abrupt('return', dispatch({
                                type: LOAD_DOCS_SUCCESS,
                                folder: Object.assign((0, _tools.extractFileAttributes)(element), {
                                    parent: (0, _tools.extractFileAttributes)(parent)
                                }),
                                fileCount: fileCount,
                                files: files.map(function (c) {
                                    return (0, _tools.extractFileAttributes)(c);
                                }),
                                trackEvent: {
                                    action: LOAD_DOCS_SUCCESS,
                                    category: 'Documents',
                                    name: 'Loading Success',
                                    value: 1
                                }
                            }));

                        case 24:
                            return _context.abrupt('return', dispatch({
                                type: LOAD_FILE_SUCCESS,
                                file: Object.assign((0, _tools.extractFileAttributes)(element), {
                                    parent: (0, _tools.extractFileAttributes)(parent),
                                    path: parent.attributes.path + '/' + element.attributes.name
                                })
                            }));

                        case 25:
                            _context.next = 30;
                            break;

                        case 27:
                            _context.prev = 27;
                            _context.t1 = _context['catch'](1);
                            return _context.abrupt('return', dispatch({
                                type: LOAD_DOCS_FAILURE,
                                error: _context.t1
                            }));

                        case 30:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined, [[1, 27]]);
        }));

        return function (_x2, _x3) {
            return _ref.apply(this, arguments);
        };
    }();
};

var loadFileRec = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id, files, count) {
        var element, moreFiles;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.next = 2;
                        return cozy.client.files.statById(id, true, { skip: files.length });

                    case 2:
                        element = _context2.sent;
                        moreFiles = element.relations('contents').filter(function (f) {
                            return f !== undefined;
                        }) || [];

                        files = files.concat(moreFiles);

                        if (!(count > files.length)) {
                            _context2.next = 9;
                            break;
                        }

                        _context2.next = 8;
                        return loadFileRec(id, files, count);

                    case 8:
                        files = _context2.sent;

                    case 9:
                        return _context2.abrupt('return', files);

                    case 10:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, undefined);
    }));

    return function loadFileRec(_x4, _x5, _x6) {
        return _ref2.apply(this, arguments);
    };
}();

var loadRecalls = exports.loadRecalls = function loadRecalls() {
    return function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(dispatch, getState) {
            var recalls;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            dispatch({
                                type: LOAD_RECALLS
                            });
                            _context3.prev = 1;
                            _context3.next = 4;
                            return (0, _tools.getDataElements)(_constants.DOCTYPE_RECALLS);

                        case 4:
                            recalls = _context3.sent;

                            recalls.map(function (item) {
                                return _extends({}, item, {
                                    deadline: (0, _moment2.default)(item.deadline, 'DD/MM/YYYY'),
                                    alert: (0, _moment2.default)(item.alert, 'DD/MM/YYYY')
                                });
                            });

                            return _context3.abrupt('return', dispatch({
                                type: LOAD_RECALLS_SUCCESS,
                                recalls: recalls
                            }));

                        case 9:
                            _context3.prev = 9;
                            _context3.t0 = _context3['catch'](1);
                            return _context3.abrupt('return', dispatch({
                                type: LOAD_RECALLS_FAILURE,
                                error: _context3.t0
                            }));

                        case 12:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, undefined, [[1, 9]]);
        }));

        return function (_x7, _x8) {
            return _ref3.apply(this, arguments);
        };
    }();
};

var loadContacts = exports.loadContacts = function loadContacts() {
    return function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(dispatch, getState) {
            var result, noTrashContacts;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            dispatch({
                                type: LOAD_CONTACTS
                            });
                            _context4.prev = 1;
                            _context4.next = 4;
                            return (0, _tools.getDataElements)(_constants.DOCTYPE_CONTACTS);

                        case 4:
                            result = _context4.sent;
                            noTrashContacts = result.filter(function (c) {
                                return !c.trash;
                            });
                            return _context4.abrupt('return', dispatch({
                                type: LOAD_CONTACTS_SUCCESS,
                                contacts: noTrashContacts
                            }));

                        case 9:
                            _context4.prev = 9;
                            _context4.t0 = _context4['catch'](1);
                            return _context4.abrupt('return', dispatch({
                                type: LOAD_CONTACTS_FAILURE,
                                error: _context4.t0
                            }));

                        case 12:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, undefined, [[1, 9]]);
        }));

        return function (_x9, _x10) {
            return _ref4.apply(this, arguments);
        };
    }();
};

var loadNews = exports.loadNews = function loadNews() {
    return function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(dispatch, getState) {
            var result;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            dispatch({
                                type: LOAD_NEWS
                            });
                            _context5.prev = 1;
                            _context5.next = 4;
                            return (0, _tools.getDataElements)(_constants.DOCTYPE_NEWS);

                        case 4:
                            result = _context5.sent;
                            return _context5.abrupt('return', dispatch({
                                type: LOAD_NEWS_SUCCESS,
                                news: result
                            }));

                        case 8:
                            _context5.prev = 8;
                            _context5.t0 = _context5['catch'](1);
                            return _context5.abrupt('return', dispatch({
                                type: LOAD_NEWS_FAILURE,
                                error: _context5.t0
                            }));

                        case 11:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, undefined, [[1, 8]]);
        }));

        return function (_x11, _x12) {
            return _ref5.apply(this, arguments);
        };
    }();
};

var loadData = exports.loadData = function loadData() {
    var doctype = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.DOCTYPE_DIAGNOSIS;

    return createLoader(LOAD_DATA, LOAD_DATA_SUCCESS, LOAD_DATA_FAILURE, doctype);
};

var createLoader = function createLoader(action, actionSuccess, actionFailure, doctype) {
    return function () {
        var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(dispatch, getState) {
            var data, noTrashData;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            dispatch({
                                type: action
                            });
                            _context6.prev = 1;
                            _context6.next = 4;
                            return (0, _tools.getDataElements)(doctype);

                        case 4:
                            data = _context6.sent;
                            noTrashData = data.filter(function (d) {
                                return !d.trash;
                            });
                            return _context6.abrupt('return', dispatch({
                                type: actionSuccess,
                                data: noTrashData.map(function (item) {
                                    item.doctype = doctype;
                                    return item;
                                }),
                                doctype: doctype
                            }));

                        case 9:
                            _context6.prev = 9;
                            _context6.t0 = _context6['catch'](1);
                            return _context6.abrupt('return', dispatch({
                                type: actionFailure,
                                error: _context6.t0
                            }));

                        case 12:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, _callee6, undefined, [[1, 9]]);
        }));

        return function (_x14, _x15) {
            return _ref6.apply(this, arguments);
        };
    }();
};

// export const loadEquipments = () => {
//     return createLoader(LOAD_EQUIPMENTS, LOAD_EQUIPMENTS_SUCCESS, LOAD_EQUIPMENTS_FAILURE, DOCTYPE_EQUIPMENTS)
// }

// export const loadWorks = () => {
//     return createLoader(LOAD_WORKS, LOAD_WORKS_SUCCESS, LOAD_WORKS_FAILURE, DOCTYPE_WORKS)
// }

// export const loadMaintenances = () => {
//     return createLoader(LOAD_MAINTENANCES, LOAD_MAINTENANCES_SUCCESS, LOAD_MAINTENANCES_FAILURE, DOCTYPE_MAINTENANCES)
// }

// export const loadHomedata = () => {
//     return createLoader(LOAD_HOME, LOAD_HOME_SUCCESS, LOAD_HOME_FAILURE, DOCTYPE_HOMEDATA)
// }

// export const loadDiagnosis = () => {
//      return createLoader(LOAD_DIAGNOSIS, LOAD_DIAGNOSIS_SUCCESS, LOAD_DIAGNOSIS_FAILURE, DOCTYPE_DIAGNOSIS)
// }

var loadTrash = exports.loadTrash = function loadTrash() {
    return function () {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(dispatch, getState) {
            var files, result, contacts, data, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

            return regeneratorRuntime.wrap(function _callee7$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            dispatch({
                                type: LOAD_TRASH
                            });
                            _context8.prev = 1;
                            _context8.next = 4;
                            return cozy.client.files.listTrash();

                        case 4:
                            files = _context8.sent;
                            _context8.next = 7;
                            return (0, _tools.getDataElements)(_constants.DOCTYPE_CONTACTS);

                        case 7:
                            result = _context8.sent;
                            contacts = result.filter(function (c) {
                                return c.trash;
                            });
                            data = [];
                            _iteratorNormalCompletion = true;
                            _didIteratorError = false;
                            _iteratorError = undefined;
                            _context8.prev = 13;
                            _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {
                                var infos, result, newData;
                                return regeneratorRuntime.wrap(function _loop$(_context7) {
                                    while (1) {
                                        switch (_context7.prev = _context7.next) {
                                            case 0:
                                                infos = _step.value;
                                                _context7.next = 3;
                                                return (0, _tools.getDataElements)(infos.doctype);

                                            case 3:
                                                result = _context7.sent;
                                                newData = result.filter(function (c) {
                                                    return c.trash;
                                                }).map(function (d) {
                                                    d.doctype = infos.doctype;return d;
                                                });

                                                data.push.apply(data, _toConsumableArray(newData));

                                            case 6:
                                            case 'end':
                                                return _context7.stop();
                                        }
                                    }
                                }, _loop, undefined);
                            });
                            _iterator = _constants.DATA_LIST[Symbol.iterator]();

                        case 16:
                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                _context8.next = 21;
                                break;
                            }

                            return _context8.delegateYield(_loop(), 't0', 18);

                        case 18:
                            _iteratorNormalCompletion = true;
                            _context8.next = 16;
                            break;

                        case 21:
                            _context8.next = 27;
                            break;

                        case 23:
                            _context8.prev = 23;
                            _context8.t1 = _context8['catch'](13);
                            _didIteratorError = true;
                            _iteratorError = _context8.t1;

                        case 27:
                            _context8.prev = 27;
                            _context8.prev = 28;

                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }

                        case 30:
                            _context8.prev = 30;

                            if (!_didIteratorError) {
                                _context8.next = 33;
                                break;
                            }

                            throw _iteratorError;

                        case 33:
                            return _context8.finish(30);

                        case 34:
                            return _context8.finish(27);

                        case 35:
                            return _context8.abrupt('return', dispatch({
                                type: LOAD_TRASH_SUCCESS,
                                files: files.map(function (c) {
                                    return (0, _tools.extractFileAttributes)(c);
                                }),
                                contacts: contacts,
                                data: data
                            }));

                        case 38:
                            _context8.prev = 38;
                            _context8.t2 = _context8['catch'](1);
                            return _context8.abrupt('return', dispatch({
                                type: LOAD_TRASH_FAILURE,
                                error: _context8.t2
                            }));

                        case 41:
                        case 'end':
                            return _context8.stop();
                    }
                }
            }, _callee7, undefined, [[1, 38], [13, 23, 27, 35], [28,, 30, 34]]);
        }));

        return function (_x16, _x17) {
            return _ref7.apply(this, arguments);
        };
    }();
};

/***/ }),

/***/ "./src/components/AssistanceList.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _AssistanceList = __webpack_require__("./src/styles/AssistanceList.scss");

var _AssistanceList2 = _interopRequireDefault(_AssistanceList);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AssistanceList = function AssistanceList(props) {
  return _react2.default.createElement(
    _Page2.default,
    { title: "Services MAIF",
      subtitle: "Retrouvez tous les services du contrat obs\xE8ques MAIF pour vous et vos proches." },
    _react2.default.createElement(
      "div",
      { className: _AssistanceList2.default.row },
      _react2.default.createElement(
        "h3",
        { className: _AssistanceList2.default.titleStep },
        "Service \xAB Aide juridique \xBB"
      ),
      _react2.default.createElement(
        "div",
        { className: _AssistanceList2.default.content },
        _react2.default.createElement(
          "p",
          null,
          "Ce service t\xE9l\xE9phonique d\u2019informations juridiques, inclus dans le contrat Sollicitudes donnent des informations sur la succession (donation, testament) et la protection des personnes d\xE9pendantes vivant au domicile de l\u2019adh\xE9rent.",
          _react2.default.createElement("div", { className: _AssistanceList2.default.separator }),
          "Ce service est ouvert pour l\u2019adh\xE9rent Sollicitudes mais aussi pour les proches au moment et apr\xE8s le d\xE9c\xE8s.",
          _react2.default.createElement("div", { className: _AssistanceList2.default.separator }),
          "Ce service fonctionne du lundi au vendredi de 8h30 \xE0 17h30.",
          _react2.default.createElement("div", { className: _AssistanceList2.default.separator }),
          "Un n\xB0 de t\xE9l\xE9phone direct est affich\xE9 pour l\u2019adh\xE9rent Sollicitudes."
        )
      )
    ),
    _react2.default.createElement(
      "div",
      { className: _AssistanceList2.default.row },
      _react2.default.createElement(
        "h3",
        { className: _AssistanceList2.default.titleStep },
        "Service \xAB Soutien moral \xBB"
      ),
      _react2.default.createElement(
        "div",
        { className: _AssistanceList2.default.content },
        _react2.default.createElement(
          "p",
          null,
          "Le service de soutien moral, inclus dans le contrat Sollicitudes, est \xE0 la disposition du proche pour l\u2019aider \xE0 surmonter l\u2019\xE9preuve de deuil.",
          _react2.default.createElement("div", { className: _AssistanceList2.default.separator }),
          "Il s\u2019agit d\u2019un accompagnement t\xE9l\xE9phonique dans les premi\xE8res manifestations normales et habituelles du deuil.",
          _react2.default.createElement("div", { className: _AssistanceList2.default.separator }),
          "Le b\xE9n\xE9ficiaire peut, s\u2019il le souhaite, \xEAtre orient\xE9 vers un professionnel de sant\xE9 et/ou une structure sp\xE9cialis\xE9e dans un tel accompagnement.",
          _react2.default.createElement("div", { className: _AssistanceList2.default.separator }),
          "Le soutien prend la forme de trois entretiens t\xE9l\xE9phoniques et est accessible au conjoint ou partenaire de pacs ou concubin ou une personne vivant en permanence au domicile de l\u2019adh\xE9rent d\xE9funt.",
          _react2.default.createElement("div", { className: _AssistanceList2.default.separator }),
          "Le service est accessible durant les 90 jours cons\xE9cutifs au d\xE9c\xE8s."
        )
      )
    ),
    _react2.default.createElement(
      "div",
      { className: _AssistanceList2.default.row },
      _react2.default.createElement(
        "h3",
        { className: _AssistanceList2.default.titleStep },
        "Service \xAB Aides pratique et sociale \xBB"
      ),
      _react2.default.createElement(
        "div",
        { className: _AssistanceList2.default.content },
        _react2.default.createElement(
          "div",
          { className: _AssistanceList2.default.cardGroup },
          _react2.default.createElement(
            "div",
            { className: (0, _classnames2.default)(_AssistanceList2.default.card, "col-sm-3") },
            _react2.default.createElement(
              "div",
              { className: _AssistanceList2.default.icon },
              _react2.default.createElement("img", { className: _AssistanceList2.default.pharmacie, src: "media/Pharmacie.svg" })
            ),
            _react2.default.createElement(
              "h4",
              null,
              "M\xE9dical"
            )
          ),
          _react2.default.createElement(
            "div",
            { className: (0, _classnames2.default)(_AssistanceList2.default.card, "col-sm-3") },
            _react2.default.createElement(
              "div",
              { className: _AssistanceList2.default.icon },
              _react2.default.createElement("img", { className: _AssistanceList2.default.ambulance, src: "media/Ambulance.svg" })
            ),
            _react2.default.createElement(
              "h4",
              null,
              "Rapatriement"
            )
          ),
          _react2.default.createElement(
            "div",
            { className: (0, _classnames2.default)(_AssistanceList2.default.card, "col-sm-3") },
            _react2.default.createElement(
              "div",
              { className: _AssistanceList2.default.icon },
              _react2.default.createElement("img", { src: "media/Calendar.svg" })
            ),
            _react2.default.createElement(
              "h4",
              null,
              "Quotidien"
            )
          ),
          _react2.default.createElement(
            "div",
            { className: (0, _classnames2.default)(_AssistanceList2.default.card, "col-sm-3") },
            _react2.default.createElement(
              "div",
              { className: _AssistanceList2.default.icon },
              _react2.default.createElement("img", { src: "media/signature.svg" })
            ),
            _react2.default.createElement(
              "h4",
              null,
              "Administratif"
            )
          )
        ),
        _react2.default.createElement(
          "div",
          { className: _AssistanceList2.default.subRow },
          _react2.default.createElement(
            "div",
            { className: "col-md-1" },
            _react2.default.createElement(
              "div",
              { className: _AssistanceList2.default.icon },
              _react2.default.createElement("img", { className: _AssistanceList2.default.iconList, src: "media/PharmacieP.svg" })
            )
          ),
          _react2.default.createElement(
            "div",
            { className: "col-md-11" },
            _react2.default.createElement(
              "div",
              { className: _AssistanceList2.default.content },
              _react2.default.createElement(
                "h3",
                { id: "medical" },
                "M\xE9dical"
              ),
              _react2.default.createElement(
                "p",
                null,
                "Ce service, inclus dans le contrat Sollicitudes, t\xE9l\xE9phonique vous permet d\u2019obtenir des informations dans les domaines suivants :"
              ),
              _react2.default.createElement(
                "ul",
                null,
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 Mieux comprendre une ordonnance, un terme m\xE9dical"
                ),
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 Savoir \xE0 quoi correspond un sympt\xF4me et d\xE9finir le degr\xE9 d\u2019urgence d\u2019une visite m\xE9dicale,"
                ),
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 D\xE9terminer ce qu\u2019il convient de faire en attendant un m\xE9decin,"
                ),
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 \xC9voquer des pr\xE9occupations personnelles"
                )
              ),
              _react2.default.createElement(
                "p",
                null,
                "Ce service est accessible du lundi au vendredi, de 8h30 \xE0 17h30"
              )
            )
          )
        ),
        _react2.default.createElement(
          "div",
          { className: _AssistanceList2.default.subRow },
          _react2.default.createElement(
            "div",
            { className: "col-md-1" },
            _react2.default.createElement(
              "div",
              { className: _AssistanceList2.default.icon },
              _react2.default.createElement("img", { className: _AssistanceList2.default.iconListAmbulance, src: "media/AmbulanceP.svg" })
            )
          ),
          _react2.default.createElement(
            "div",
            { className: "col-md-11" },
            _react2.default.createElement(
              "div",
              { className: _AssistanceList2.default.content },
              _react2.default.createElement(
                "h3",
                { id: "rapatriement" },
                "Rapatriement"
              ),
              _react2.default.createElement(
                "p",
                null,
                "Ce service, inclus dans le contrat Sollicitudes, comprend les prestations suivantes : "
              ),
              _react2.default.createElement(
                "ul",
                null,
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 Rapatriement de l\u2019adh\xE9rent d\xE9funt jusqu\u2019au lieu d\u2019inhumation suite \xE0 d\xE9placement \xE0 l\u2019\xE9tranger."
                ),
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 Transport de l\u2019adh\xE9rent d\xE9funt, lorsque le d\xE9c\xE8s survient en France \xE0 plus de 50 kms du domicile de l\u2019adh\xE9rent."
                ),
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 Retour des accompagnateurs de l\u2019adh\xE9rent d\xE9funt s\u2019il s ne peuvent pas revenir par leurs propres moyens."
                ),
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 D\xE9placement d\u2019un proche sur le lieu du d\xE9c\xE8s en cas de n\xE9cessit\xE9 r\xE9glementaire si rapatriement."
                ),
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 Prise en charge des frais de pr\xE9paration de l\u2019adh\xE9rent d\xE9funt, am\xE9nagements transports, cercueil adapt\xE9."
                )
              ),
              _react2.default.createElement(
                "p",
                null,
                "Accessible 24h/24 et tout au long de l\u2019ann\xE9e, sur simple appel t\xE9l\xE9phonique,"
              )
            )
          )
        ),
        _react2.default.createElement(
          "div",
          { className: _AssistanceList2.default.subRow },
          _react2.default.createElement(
            "div",
            { className: "col-md-1" },
            _react2.default.createElement(
              "div",
              { className: _AssistanceList2.default.icon },
              _react2.default.createElement("img", { className: _AssistanceList2.default.iconList, src: "media/CalendarP.svg" })
            )
          ),
          _react2.default.createElement(
            "div",
            { className: "col-md-11" },
            _react2.default.createElement(
              "div",
              { className: _AssistanceList2.default.content },
              _react2.default.createElement(
                "h3",
                { id: "quotidien" },
                "Quotidien"
              ),
              _react2.default.createElement(
                "p",
                null,
                "Ce service , inclus dans le contrat Sollicitudes, pr\xE9voir la mise en place d\u2019aides diverses pour accompagner la famille de l\u2019adh\xE9rent \xE0 faire face aux difficult\xE9s au moment du d\xE9c\xE8s :"
              ),
              _react2.default.createElement(
                "ul",
                null,
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 Aide dans les t\xE2ches domestiques quotidiennes pour aider le conjoint de l\u2019adh\xE9rent d\xE9funt."
                ),
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 Aide au transport du conjoint non autonome."
                ),
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 Retour des accompagnateurs de l\u2019adh\xE9rent d\xE9funt s\u2019il s ne peuvent pas revenir par leurs propres moyens."
                ),
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 T\xE9l\xE9assistance ou garde \xE0 domicile pour une personne d\xE9pendante"
                ),
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 Garde \xE0 domicile et accompagnement \xE0 l\u2019\xE9cole de l\u2019enfant de moins de 15 ans"
                ),
                _react2.default.createElement(
                  "li",
                  null,
                  "\u2022 Prise en charge de l\u2019organisation du transport et la pension animali\xE8re du chien ou chat"
                )
              ),
              _react2.default.createElement(
                "p",
                null,
                "\u2022 Accessible pendant les 21 jours cons\xE9cutifs au d\xE9c\xE8s de l\u2019adh\xE9rent et plafonn\xE9 \xE0 350\u20AC."
              )
            )
          )
        ),
        _react2.default.createElement(
          "div",
          { className: _AssistanceList2.default.subRow },
          _react2.default.createElement(
            "div",
            { className: "col-md-1" },
            _react2.default.createElement(
              "div",
              { className: _AssistanceList2.default.icon },
              _react2.default.createElement("img", { className: _AssistanceList2.default.iconList, src: "media/signatureP.svg" })
            )
          ),
          _react2.default.createElement(
            "div",
            { className: "col-md-11" },
            _react2.default.createElement(
              "div",
              { className: _AssistanceList2.default.content },
              _react2.default.createElement(
                "h3",
                { id: "adm" },
                "Administratif"
              ),
              _react2.default.createElement(
                "p",
                null,
                "Ce service, inclus dans le contrat Sollicitudes, propose de r\xE9aliser par t\xE9l\xE9phone un diagnostic de la situation administrative du d\xE9funt pour faciliter la prise en charge du conjoint, du partenaire de pacs ou du concubin ou du repr\xE9sentant de la famille.",
                _react2.default.createElement("div", { className: _AssistanceList2.default.separator }),
                "Ce service est accessible pendant les 180 jours cons\xE9cutifs au d\xE9c\xE8s de l\u2019adh\xE9rent."
              )
            )
          )
        )
      )
    )
  );
};
exports.default = AssistanceList;

/***/ }),

/***/ "./src/components/elements/ContactList.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ContactList = undefined;

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _moment = __webpack_require__("./node_modules/moment/moment.js");

var _moment2 = _interopRequireDefault(_moment);

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _Contacts = __webpack_require__("./src/styles/Contacts.scss");

var _Contacts2 = _interopRequireDefault(_Contacts);

var _constants = __webpack_require__("./src/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ContactList = exports.ContactList = function ContactList(props) {
    var _classNames;

    return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)(_Contacts2.default.list, (_classNames = {}, _defineProperty(_classNames, _Contacts2.default.viewList, props.view === _constants.VIEW_LIST), _defineProperty(_classNames, _Contacts2.default.viewGrid, props.view === _constants.VIEW_GRID), _classNames)) },
        props.children.map(function (item, key) {
            var title = undefined;
            if (item.lastName && item.firstName) {
                title = item.firstName + " " + item.lastName;
            } else if (item.lastName) {
                title = item.lastName;
            } else if (item.firstName) {
                title = item.firstName;
            }

            return _react2.default.createElement(
                'div',
                { className: _Contacts2.default.divContact },
                _react2.default.createElement(
                    'div',
                    { className: _Contacts2.default.contentContact },
                    _react2.default.createElement(
                        'p',
                        { className: _Contacts2.default.contactName },
                        ' ',
                        title,
                        ' '
                    ),
                    _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
                ),
                _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            );
        })
    );
};

exports.default = ContactList;

/***/ }),

/***/ "./src/components/elements/Contacts.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _Contacts = __webpack_require__("./src/styles/Contacts.scss");

var _Contacts2 = _interopRequireDefault(_Contacts);

var _ToolBoxOptions = __webpack_require__("./src/components/elements/ToolBoxOptions.js");

var _ToolBoxOptions2 = _interopRequireDefault(_ToolBoxOptions);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _Loader = __webpack_require__("./src/components/elements/Loader.js");

var _Loader2 = _interopRequireDefault(_Loader);

var _ContactList = __webpack_require__("./src/components/elements/ContactList.js");

var _ContactList2 = _interopRequireDefault(_ContactList);

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _ContactsModal = __webpack_require__("./src/components/modals/ContactsModal.jsx");

var _ContactsModal2 = _interopRequireDefault(_ContactsModal);

var _reactTooltip = __webpack_require__("./node_modules/react-tooltip/dist/index.js");

var _reactTooltip2 = _interopRequireDefault(_reactTooltip);

var _constants = __webpack_require__("./src/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Contacts = function (_Component) {
  _inherits(Contacts, _Component);

  function Contacts(props, context) {
    _classCallCheck(this, Contacts);

    var _this = _possibleConstructorReturn(this, (Contacts.__proto__ || Object.getPrototypeOf(Contacts)).call(this, props, context));

    _this.state = {
      current: null,
      modalOpen: false,
      edition: false
    };

    _this.idDetected = false;
    return _this;
  }

  _createClass(Contacts, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.props.onLoadContacts();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      if (newProps.elements.length !== newProps.count) return newProps.onLoadContacts();

      if (this.props.match.params.id && !this.idDetected && newProps.elements.length > 0) {
        //Compute id
        this.idDetected = true;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = newProps.elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var e = _step.value;

            if (e._id === this.props.match.params.id) {
              this.setState({
                current: e,
                modalOpen: true
              });
              break;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  }, {
    key: 'add',
    value: function add(value) {
      console.log(value);
      this.setState({ status: value });
      this.setState({
        current: null,
        modalOpen: true,
        edition: true
      });
    }
  }, {
    key: 'open',
    value: function open(item) {
      this.setState({
        current: item,
        modalOpen: true
      });
    }
  }, {
    key: 'select',
    value: function select(item) {
      this.props.onSelectContact(item);
    }
  }, {
    key: 'remove',
    value: function remove() {
      if (!this.state.current) return;
      this.props.onRemoveContacts([this.state.current]);
      this.setState({
        modalOpen: false,
        current: null
      });
    }
  }, {
    key: 'addOrSaveContact',
    value: function addOrSaveContact(contact) {
      if (this.state.current) {
        this.props.onSaveContact(this.state.current._id, contact);
      } else {
        this.props.onNewContact(contact.firstName, contact);
      }
      this.setState({
        modalOpen: false,
        current: null
      });
    }
  }, {
    key: 'profilePreview',
    value: function profilePreview() {
      var _this2 = this;

      cozy.client.fetchJSON('POST', '/permissions?codes=partage', {
        data: {
          type: 'io.cozy.permissions',
          attributes: {
            permissions: {
              "settings": {
                "description": "Required by the cozy-bar display Claudy and to know which applications are coming soon",
                "type": "io.cozy.settings",
                "verbs": ["ALL"]
              },
              "data-funerals-lastwill": {
                "description": "App required data Last Will access",
                "type": "com.empreinte.FLastWill",
                "verbs": ["ALL"]
              },
              "data-funerals-contacts": {
                "description": "App required data Last Will access",
                "type": "com.empreinte.Fcontacts",
                "verbs": ["ALL"]
              },
              "data-funerals-custom-contacts": {
                "description": "App required data Last Will access",
                "type": "com.empreinte.Fcustomcontacts",
                "verbs": ["ALL"]
              },
              "data-homeData": {
                "description": "App required data homeData access",
                "type": "com.empreinte.homeData",
                "verbs": ["ALL"]
              },
              "contacts": {
                "description": "App required contacts access",
                "type": "com.empreinte.contacts",
                "verbs": ["ALL"]
              },
              "metas": {
                "description": "App required metas access",
                "type": "com.empreinte.meta",
                "verbs": ["ALL"]
              },
              "contact": {
                "description": "App required contact access",
                "type": "io.cozy.contacts",
                "verbs": ["ALL"]
              }
            }
          }
        }
      }).then(function (result) {
        _this2.sharing = result.attributes.codes['partage'];
        console.log(_this2.sharing);

        window.open('/public?sharecode=' + _this2.sharing + '#/', '_blank');
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      cozy.client.data.findAll("com.empreinte.contacts").then(function (index) {
        console.log(index);
      });
      var _props = this.props,
          elements = _props.elements,
          count = _props.count,
          selectedCount = _props.selectedCount,
          status = _props.status;


      var loading = status === _constants.STATUS_LOAD;
      var toolbox = _react2.default.createElement(
        _ToolBoxOptions2.default,
        null,
        _react2.default.createElement(
          'ul',
          null,
          _react2.default.createElement(
            'li',
            { onClick: function onClick() {
                _this3.props.onSelectAll();
              } },
            _react2.default.createElement(
              'i',
              { className: 'ion-ios-checkmark-outline' },
              'TOUT SELECTIONNER'
            )
          )
        )
      );
      var remove = _react2.default.createElement(
        'button',
        { onClick: function onClick() {
            return _this3.props.onRemoveContacts(elements.filter(function (f) {
              return f.selected;
            }));
          }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.assertive) },
        _react2.default.createElement('img', { className: _Contacts2.default.add, src: 'media/add.svg' }),
        'SUPPRIMER'
      );

      var list = undefined;
      if (!loading && elements.length > 0) {
        var sort = elements.sort(function (a, b) {
          if (a.lastName < b.lastName) return -1;
          if (a.lastName > b.lastName) return 1;
          return 0;
        });

        var sortedContacts = _lodash2.default.groupBy(sort, function (item) {
          var name = item.lastName || item.firstName || item.company || '_';
          name = name.trim().toUpperCase();

          var firstLetter = name[0];

          if (/[0-9]/g.test(firstLetter)) {
            return '#';
          }
          return firstLetter;
        });

        var keys = Object.keys(sortedContacts);
        var sortedKeys = keys.sort(function (a, b) {
          if (a < b) return -1;
          if (a > b) return 1;
          return 0;
        });

        list = [];

        console.log(elements);

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = elements[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var user = _step2.value;

            console.log(user);
            list.push(_react2.default.createElement(
              'div',
              null,
              user.firstname
            ));
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        console.log(list);
        var sharing = cozy.client.files.getCollectionShareLink("dd9d4d75f37d781adf3b0c2b5c3434a2", 'com.empreinte.homeData');
        console.log(sharing);
      }

      return _react2.default.createElement(
        _Page2.default,
        { title: 'Mes proches', subtitle: 'Titulaire du compte ou proche d\xE9sign\xE9 par celui-ci, vous avez acc\xE8s aux m\xEAmes informations, mais pas en m\xEAme temps. Le premier remplit le dossier selon ses choix intimes, renseigne les contacts, d\xE9signe les intervenants... Quelque part, il met en sc\xE8ne son d\xE9part. Quant au second, il suit les indications, \xAB\xA0d\xE9roule le sc\xE9nario\xA0\xBB sereinement et accompagne l\u2019application des d\xE9cisions. Un lien fort se concr\xE9tise dans cet Espace priv\xE9.' },
        _react2.default.createElement(_Loader2.default, { display: loading }),
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.row },
          _react2.default.createElement(
            'h3',
            { className: _Contacts2.default.titlePage },
            'Mes proches r\xE9f\xE9rents'
          ),
          _react2.default.createElement(
            'button',
            { onClick: function onClick() {
                return _this3.add("ref");
              }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default) },
            _react2.default.createElement('img', { className: _Contacts2.default.add, src: 'media/add.svg' }),
            'AJOUTER UN R\xC9F\xC9RENT'
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.row },
          _react2.default.createElement(
            'p',
            { className: _Contacts2.default.introProches },
            'Le titulaire du compte d\xE9signe un ou plusieurs de ses proches qui auront acc\xE8s aux donn\xE9es apr\xE8s le d\xE9c\xE8s. Ils les utiliseront pour organiser les obs\xE8ques selon les choix et pourront s\'acquitter ais\xE9ment de l\'ensemble des d\xE9marches administratives. Le titulaire d\xE9signe cette ou ces personne(s) de confiance ici.',
            _react2.default.createElement('br', null),
            'En cr\xE9ant un proche r\xE9f\xE9rent, le proche re\xE7oit un mail l\'informant de la cr\xE9ation de l\'espace d\xE9c\xE8s du titulaire et de son adh\xE9sion au contrat obs\xE8que de la MAIF. il y est notifi\xE9 qu\'en cas de d\xE9c\xE8s, le proche r\xE9f\xE9rent doit pr\xE9venir Parnasse-MAIF au 05 49 73 89 43. Celle-ci met en place les garanties et prestations du contrat obs\xE8ques d\xE8s qu\'elle en est inform\xE9e.',
            _react2.default.createElement('br', null),
            _react2.default.createElement('br', null),
            'Pour autoriser l\'acc\xE8s du proche \xE0 son espace d\xE9c\xE8s, le titulaire choisit entre deux possibilit\xE9s : ',
            _react2.default.createElement('br', null),
            '- ',
            _react2.default.createElement(
              'b',
              null,
              'De son vivant'
            ),
            '. Dans ce cas, il coche dans la fiche "Ajouter un r\xE9f\xE9rent" la mention "Partage imm\xE9diat". Le mail contenant le lien est automatiquement envoy\xE9 au proche. ',
            _react2.default.createElement('br', null),
            '- ',
            _react2.default.createElement(
              'b',
              null,
              'Au moment du d\xE9c\xE8s'
            ),
            '. Dans ce cas, il coche dans la fiche "Ajouter un r\xE9f\xE9rent" la mention "Partage diff\xE9r\xE9". D\xE8s que Parnasse-MAIF est pr\xE9venue par le proche du d\xE9c\xE8s du titulaire, elle lui envoie le lien vers l\'espace d\xE9c\xE8s.'
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.dataReferent },
          elements.map(function (item) {
            if (item.statut === "ref") if (item.delay === "now") return _react2.default.createElement(
              'span',
              { className: _Contacts2.default.proche },
              ' ',
              item.firstName,
              ' ',
              item.lastName,
              ' ',
              _react2.default.createElement('img', { className: _Contacts2.default.chevron,
                src: '/media/chevronpurple.svg' }),
              ' \xA0\xA0Partage imm\xE9diat ',
              _react2.default.createElement('br', null),
              ' '
            );else return _react2.default.createElement(
              'span',
              { className: _Contacts2.default.proche },
              ' ',
              item.firstName,
              ' ',
              item.lastName,
              ' ',
              _react2.default.createElement('img', { className: _Contacts2.default.chevron,
                src: '/media/chevronpurple.svg' }),
              ' \xA0\xA0Partage diff\xE9r\xE9 ',
              _react2.default.createElement('br', null),
              ' '
            );
          })
        ),
        _react2.default.createElement('br', null),
        _react2.default.createElement('br', null),
        _react2.default.createElement('br', null),
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.row },
          _react2.default.createElement(
            'h3',
            { className: _Contacts2.default.titlePage },
            'Mes autres proches \xE0 pr\xE9venir '
          ),
          _react2.default.createElement(
            'button',
            { onClick: function onClick() {
                return _this3.add("prev");
              }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default) },
            _react2.default.createElement('img', { className: _Contacts2.default.add, src: 'media/add.svg' }),
            'AJOUTER UN PROCHE'
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.row },
          _react2.default.createElement(
            'p',
            { className: _Contacts2.default.introProches },
            'Le titulaire entre ici la liste des personnes qui seront pr\xE9venues de son d\xE9c\xE8s. Notamment celles dont les coordonn\xE9es ne sont peut-\xEAtre pas connues des proches r\xE9f\xE9rents (voisin, ami d\u2019enfance, femme de m\xE9nage \u2026).'
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.dataPrevenir },
          elements.map(function (item) {
            if (item.statut === "prev") return _react2.default.createElement(
              'span',
              { className: _Contacts2.default.proche },
              ' ',
              item.firstName,
              ' ',
              item.lastName,
              ' ',
              _react2.default.createElement('br', null),
              ' '
            );
          })
        ),
        _react2.default.createElement('hr', { className: _Contacts2.default.seperator }),
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.row },
          _react2.default.createElement(
            'h3',
            { className: _Contacts2.default.titlePage, 'data-type': 'light', 'data-tip': 'Ce dossier s\u2019adresse aux proches r\xE9f\xE9rents. Il contient les derni\xE8res volont\xE9s du titulaire et un assistant administratif qui hi\xE9rarchise et automatise les d\xE9marches. ' },
            'Mon dossier obs\xE8ques accessible par mes proches',
            _react2.default.createElement('img', { src: 'media/information.svg', className: _Contacts2.default.information })
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.row },
          _react2.default.createElement(
            'p',
            { className: _Contacts2.default.introProches },
            'Les proches r\xE9f\xE9rents acc\xE8dent au dossier obs\xE8ques du titulaire. Il contient les derni\xE8res volont\xE9s de la personne ainsi qu\'un assistant administratif qui hi\xE9rarchise et automatise les d\xE9marches.'
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.dataObseque },
          _react2.default.createElement(
            'span',
            { onClick: function onClick() {
                return _this3.profilePreview();
              } },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Mon dossier obs\xE8que'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          )
        ),
        _react2.default.createElement(_reactTooltip2.default, null),
        _react2.default.createElement(
          _reactPortal2.default,
          { isOpened: this.state.modalOpen, closeOnEsc: true, onClose: function onClose() {
              return _this3.setState({ modalOpen: false, current: null, edition: false });
            } },
          _react2.default.createElement(
            _Modal2.default,
            null,
            _react2.default.createElement(_ContactsModal2.default, {
              status: this.state.status,
              item: this.state.current,
              title: this.state.current ? "Modifier votre contact" : "Créer votre contact",
              onSave: function onSave(contact) {
                return _this3.addOrSaveContact(contact);
              },
              onRemove: function onRemove() {
                return _this3.remove();
              },
              edit: this.state.edition })
          )
        )
      );
    }
  }]);

  return Contacts;
}(_react.Component);

exports.default = Contacts;

/***/ }),

/***/ "./src/components/elements/Data.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _Documents = __webpack_require__("./src/styles/Documents.scss");

var _Documents2 = _interopRequireDefault(_Documents);

var _Loader = __webpack_require__("./src/components/elements/Loader.js");

var _Loader2 = _interopRequireDefault(_Loader);

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _DataTable = __webpack_require__("./src/components/elements/DataTable.jsx");

var _DataTable2 = _interopRequireDefault(_DataTable);

var _DocumentList = __webpack_require__("./src/components/elements/DocumentList.jsx");

var _DocumentList2 = _interopRequireDefault(_DocumentList);

var _Selector = __webpack_require__("./src/containers/Selector.js");

var _Selector2 = _interopRequireDefault(_Selector);

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _confirm = __webpack_require__("./src/scripts/confirm.js");

var _confirm2 = _interopRequireDefault(_confirm);

var _ConfirmModal = __webpack_require__("./src/components/modals/ConfirmModal.jsx");

var _ConfirmModal2 = _interopRequireDefault(_ConfirmModal);

var _meta = __webpack_require__("./src/scripts/meta.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Data = function (_Component) {
    _inherits(Data, _Component);

    function Data(props, context) {
        _classCallCheck(this, Data);

        var _this = _possibleConstructorReturn(this, (Data.__proto__ || Object.getPrototypeOf(Data)).call(this, props, context));

        _this.state = {
            edition: false,
            referenced: false,
            modalOpen: false,
            excerpt: ""
        };

        _this.renderData = _this.renderData.bind(_this);
        return _this;
    }

    _createClass(Data, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var _this2 = this;

            this.infos = (0, _dataFields.getInfosFromSlug)(this.props.match.params.slug);
            this.id = this.props.match.params.id;

            this.props.onLoadData(this.infos.doctype, this.id);

            this.unblock = this.props.history.block(function (path, action) {
                if (_this2.state.edition) {
                    return 'Attention, vos modifications ne seront pas sauvegardées.';
                }
            });
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.unblock && this.unblock();
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
            var _this3 = this;

            if (this.props.current != newProps.current) {
                var fields = (0, _dataFields.getFields)(this.infos.doctype, newProps.current.formType);
                this.setState({ excerpt: fields[0].excerpt });
                if (newProps.current._id) {
                    cozy.client.data.listReferencedFiles(newProps.current).then(function (list) {
                        return Promise.all(list.map(function (id) {
                            return cozy.client.files.statById(id);
                        }));
                    }).then(function (list) {
                        var files = list.filter(function (f) {
                            return !f.attributes.trashed;
                        }).map(_tools.extractFileAttributes);
                        _this3.setState({ referenced: files });
                    });
                }
            }
        }
    }, {
        key: 'openModal',
        value: function openModal() {
            this.props.onImporterClick(this.infos.path);
            this.setState({ modalOpen: true });
        }
    }, {
        key: 'dropRef',
        value: function dropRef(e) {
            var _this4 = this;

            e.preventDefault();
            e.stopPropagation();

            var file = e.dataTransfer.files && e.dataTransfer.files[0];
            if (!file) return;

            var path = this.infos.path;

            cozy.client.files.statByPath(path).then(function (dir) {
                return _this4.props.fileUpload([file], dir._id);
            }).then(function (data) {
                console.log('ici', data);
                return cozy.client.data.addReferencedFiles(_this4.props.current, data.files[0].id);
            }).then(function () {
                return _this4.props.onLoadData(_this4.infos.doctype, _this4.id);
            });
        }
    }, {
        key: 'addRef',
        value: function addRef(path) {
            var _this5 = this;

            cozy.client.files.statByPath(path).then(function (file) {
                if (file.attributes.type !== 'directory') {
                    return cozy.client.data.addReferencedFiles(_this5.props.current, file._id);
                }
            }).then(function () {
                return _this5.props.onLoadData(_this5.infos.doctype, _this5.id);
            });
        }
    }, {
        key: 'removeRef',
        value: function removeRef(id) {
            var _this6 = this;

            (0, _confirm2.default)(removeDocModal).then(function () {
                return cozy.client.data.removeReferencedFiles(_this6.props.current, id);
            }).then(function () {
                return _this6.props.onLoadData(_this6.infos.doctype, _this6.id);
            });
        }
    }, {
        key: 'save',
        value: function save() {
            this.setState({
                edition: false
            });

            this.props.dataSave(this.infos.doctype, this.props.current);
        }
    }, {
        key: 'edit',
        value: function edit() {
            this.setState({
                edition: true
            });
        }
    }, {
        key: 'remove',
        value: function remove() {
            var _this7 = this;

            (0, _confirm2.default)(modal).then(function () {
                if (_this7.infos.doctype == _constants.DOCTYPE_F_CUSTOMCONTACTS) {
                    (0, _meta.getCustomContactMeta)().then(function (result) {
                        var newDoc = result;
                        result[0].value[0].types.map(function (item, key) {
                            console.log(item.type);
                            console.log(_this7.props.current.formType);
                            if (_this7.props.current.formType == item.type) {
                                console.log('sfdkjhsedfkjefkjhezfhjk');
                                newDoc[0].value[0].types.splice(key, 1);
                            }
                        });
                        cozy.client.data.update(_constants.DOCTYPE_META, result[0], newDoc[0]).then(function (newresult) {});
                    });
                }
                return _this7.props.dataRemove(_this7.infos.doctype, [_this7.props.current]);
            }).then(function (e) {
                _this7.unblock && _this7.unblock();
                _this7.props.history.replace('/funerals');
            });
        }
    }, {
        key: 'addMulti',
        value: function addMulti(type, group) {
            if (!this.state.edition) return;
            var current = this.props.current;


            var tmp = group.map(function (g) {
                return { key: g.name, value: g.values && g.values[0] || '' };
            });
            var def = {};
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var e = _step.value;

                    def[e.key] = e.value;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (!current[type] || !Array.isArray(current[type])) current[type] = [def];else current[type].push(def);

            this.forceUpdate();
        }
    }, {
        key: 'removeMulti',
        value: function removeMulti(type, key) {
            if (!this.state.edition) return;
            var current = this.props.current.current;


            var groups = current[type];
            if (!groups) return;
            groups.splice(key, 1);

            this.forceUpdate();
        }
    }, {
        key: 'renderData',
        value: function renderData() {
            var _this8 = this;

            var save = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

            console.log(this.props.current);
            if (!this.props.current) return;

            var fields = (0, _dataFields.getFields)(this.infos.doctype, this.props.current.formType);
            if (!fields) return;

            var current = this.props.current;

            return _react2.default.createElement(
                _DataTable2.default,
                null,
                fields.map(function (group, keygroup) {
                    var dataItem = [];
                    return _react2.default.createElement(
                        _DataTable2.default.Group,
                        { title: group.name, key: keygroup },
                        group.group.map(function (item, key) {

                            item.map(function (subItem, subKey) {
                                if (subItem.hide) {
                                    dataItem.push(_react2.default.createElement(
                                        'h3',
                                        { key: subItem.name },
                                        current[subItem.name],
                                        ' '
                                    ));
                                } else {
                                    dataItem.push(_react2.default.createElement(_DataTable2.default.Item, {
                                        key: subItem.name,
                                        title: subItem.display,
                                        value: current[subItem.name],
                                        type: subItem.type,
                                        updatable: _this8.state.edition,
                                        values: subItem.values,
                                        onChange: function onChange(e) {
                                            return current[subItem.name] = e;
                                        } }));
                                }
                            });
                        }),
                        dataItem
                    );
                }),
                this.state.edition && save && _react2.default.createElement(
                    'div',
                    { style: { textAlign: 'right' } },
                    save
                )
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _this9 = this;

            var loading = this.props.status === _constants.STATUS_LOAD;
            console.log(this.props.current);
            var actions = [];

            var remove = _react2.default.createElement(
                'button',
                { onClick: function onClick() {
                        return _this9.remove();
                    }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.assertive), title: 'Supprimer' },
                _react2.default.createElement('i', { className: 'ion-ios-trash-outline' }),
                _react2.default.createElement(
                    'span',
                    { className: _buttons2.default.text },
                    'SUPPRIMER'
                )
            );
            actions.push(remove);

            var save = undefined;
            if (this.state.edition) {
                save = _react2.default.createElement(
                    'button',
                    { onClick: function onClick() {
                            return _this9.save();
                        }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable), title: 'Sauvegarder' },
                    _react2.default.createElement('i', { className: 'fa fa-floppy-o' }),
                    _react2.default.createElement(
                        'span',
                        { className: _buttons2.default.text },
                        'SAUVEGARDER'
                    )
                );
                actions.unshift(save);
            } else {
                var edit = _react2.default.createElement(
                    'button',
                    { onClick: function onClick() {
                            return _this9.edit();
                        }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable), title: 'Modifier' },
                    _react2.default.createElement('i', { className: 'fa fa-edit' }),
                    _react2.default.createElement(
                        'span',
                        { className: _buttons2.default.text },
                        'MODIFIER'
                    )
                );
                actions.unshift(edit);
            }

            var title = _react2.default.createElement(
                'span',
                { className: _Documents2.default.breadcrums },
                _react2.default.createElement(
                    _reactRouterDom.Link,
                    { to: (0, _tools.createFakePath)(this.infos.path) },
                    this.infos.name
                ),
                this.props.current && this.props.current.name && _react2.default.createElement(
                    'strong',
                    null,
                    '/',
                    this.props.current.name
                )
            );

            return _react2.default.createElement(
                _Page2.default,
                { title: title, subtitle: this.state.excerpt,
                    actions: actions,
                    onBackPress: function onBackPress() {
                        return _this9.props.history.replace('/funerals');
                    } },
                _react2.default.createElement(_Loader2.default, { display: loading }),
                !loading && this.renderData(save),
                _react2.default.createElement(
                    _reactPortal2.default,
                    { closeOnEsc: true, isOpened: this.state.modalOpen, onClose: function onClose() {
                            return _this9.setState({ modalOpen: false });
                        } },
                    _react2.default.createElement(
                        _Modal2.default,
                        null,
                        _react2.default.createElement(_Selector2.default, { files: true, onSelect: function onSelect(path) {
                                return _this9.addRef(path);
                            } })
                    )
                )
            );
        }
    }]);

    return Data;
}(_react.Component);

exports.default = Data;


var modal = _react2.default.createElement(
    _ConfirmModal2.default,
    null,
    _react2.default.createElement(
        'p',
        null,
        'Voulez-vous supprimer cet \xE9l\xE9ment ?'
    )
);

var removeDocModal = _react2.default.createElement(
    _ConfirmModal2.default,
    null,
    _react2.default.createElement(
        'p',
        null,
        'Supprimer ce document ?'
    )
);

/***/ }),

/***/ "./src/components/elements/DataForm.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _moment = __webpack_require__("./node_modules/moment/moment.js");

var _moment2 = _interopRequireDefault(_moment);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _DataForm = __webpack_require__("./src/styles/DataForm.scss");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _CustomInput = __webpack_require__("./src/components/utils/CustomInput.jsx");

var _CustomInput2 = _interopRequireDefault(_CustomInput);

var _constants = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/tools/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DataForm = function (_Component) {
  _inherits(DataForm, _Component);

  function DataForm(props, context) {
    _classCallCheck(this, DataForm);

    var _this = _possibleConstructorReturn(this, (DataForm.__proto__ || Object.getPrototypeOf(DataForm)).call(this, props, context));

    _this.state = {
      values: [],
      hiddenType: props.hiddenType || '',
      formType: props.formType || '',
      step: props.step || 0,
      onboard: _this.props.onboard || false,
      import: false
    };
    return _this;
  }

  _createClass(DataForm, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      if (this.props.onboard) {
        var val = [];

        switch (this.props.step) {
          case 1:
            this.infos = (0, _dataFields.getInfosFromSlug)("homedata");
            this.fields = (0, _dataFields.getFields)(this.infos.doctype);

            (0, _index.getDataElements)(this.infos.doctype).then(function (res) {
              if (res.length > 0) {
                val = res[0];
                _this2.setState({ values: val, onboard: true, step: 1 });
              }
            });
            break;
          case 2 || 3:
            this.infos = (0, _dataFields.getInfosFromSlug)("fcontacts");
            this.fields = (0, _dataFields.getFields)(this.infos.doctype, this.state.formType);
            val['type'] = "city_hall";
            break;
          case 3:
            this.infos = (0, _dataFields.getInfosFromSlug)("fcontacts");
            this.fields = (0, _dataFields.getFields)(this.infos.doctype, this.state.formType);
            val['type'] = "";
            this.setState({ values: val, onboard: true, step: this.props.step });
            break;
        }
      } else {
        this.infos = (0, _dataFields.getInfosFromSlug)(this.props.slug);
        this.fields = (0, _dataFields.getFields)(this.infos.doctype, this.props.formType);
        console.log(this.fields);
        console.log(this.infos);
        console.log(this.props.formType);
      }
      if (this.fields[0].import) {
        this.setState({ import: true });
      }
    }
  }, {
    key: 'previousStep',
    value: function previousStep() {
      var step = this.state.step - 1;
      if (step < 0) return;
      this.setState({ step: step });
    }
  }, {
    key: 'nextStepSkip',
    value: function nextStepSkip() {
      var questions = this.fields[0].group;
      var q = questions[this.state.step];
      this.state.values[q.name] = '';
      this.nextStep();
    }
  }, {
    key: 'onimport',
    value: function onimport() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      this.setState({ import: value });
    }
  }, {
    key: 'nextStep',
    value: function nextStep() {
      var _this3 = this;

      var nb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;


      //Save the new data
      if (this.state.hiddenType != "") this.state.values["type"] = this.state.hiddenType;

      if (this.state.formType != "") this.state.values["formType"] = this.state.formType;

      var data = this.state.values;

      if (data._id) {

        this.props.onSaveData(this.infos.doctype, data._id, data).then(function (data) {
          if (_this3.state.onboard) {
            var val = [];
            switch (_this3.state.step) {
              case 1:
              case 2:
                _this3.infos = (0, _dataFields.getInfosFromSlug)("fcontacts");
                _this3.fields = (0, _dataFields.getFields)(_this3.infos.doctype);
                (0, _index.getDataElements)(_this3.infos.doctype).then(function (res) {
                  var exist = false;
                  var type = "";
                  if (res.length > 0) {
                    switch (_this3.state.step + 1) {
                      case 2:
                        exist = _lodash2.default.find(res, function (t) {
                          return t.type === "Mairie";
                        });
                        type = "Mairie";
                        break;
                      case 3:
                        exist = _lodash2.default.find(res, function (t) {
                          return t.type === "Médecin Traitant";
                        });
                        type = "Médecin Traitant";
                    }
                  }
                  if (exist) {
                    val = exist;
                  } else {
                    val['type'] = type;
                    val['telephone'] = "";
                    val['telecopie'] = "";
                    val['email'] = "";
                    val['address'] = {
                      city: '',
                      way: '',
                      code: ''
                    };
                  }
                  _this3.setState({ values: val, onboard: true, step: _this3.state.step + 1 });
                });
                break;
              case 3:
                _this3.props.close('/home');

            }
          } else {
            _this3.props.closeModal('/data/' + _this3.infos.slug + '/' + data.data._id);
          }
        });
      } else {
        this.props.onNewData(this.infos.doctype, data).then(function (data) {
          if (_this3.state.onboard) {
            var val = [];
            switch (_this3.state.step) {
              case 1:
              case 2:
                if (_this3.state.step + 1 == 2) {
                  _this3.infos = (0, _dataFields.getInfosFromSlug)("fcontacts", "default");
                }
                if (_this3.state.step + 1 == 3) {
                  _this3.infos = (0, _dataFields.getInfosFromSlug)("fcontacts", "default");
                }
                _this3.fields = (0, _dataFields.getFields)(_this3.infos.doctype);
                (0, _index.getDataElements)(_this3.infos.doctype).then(function (res) {
                  var exist = false;
                  var type = "";
                  if (res.length > 0) {
                    switch (_this3.state.step + 1) {
                      case 2:
                        exist = _lodash2.default.find(res, function (t) {
                          return t.type === "Mairie";
                        });
                        type = "Mairie";
                        break;
                      case 3:
                        exist = _lodash2.default.find(res, function (t) {
                          return t.type === "Médecin Traitant";
                        });
                        type = "Médecin Traitant";
                    }
                  }
                  if (exist) {
                    val = exist;
                  } else {
                    val['type'] = type;
                    val['telephone'] = "";
                    val['telecopie'] = "";
                    val['email'] = "";
                    val['address'] = {
                      city: '',
                      way: '',
                      code: ''
                    };
                  }
                  _this3.setState({ values: val, onboard: true, step: _this3.state.step + 1 });
                });
                break;
              case 3:
                _this3.props.close('/home');
            }
          } else {
            _this3.props.closeModal('/data/' + _this3.infos.slug + '/' + data.data._id);
          }
        });
      }
    }
  }, {
    key: 'change',
    value: function change(value, name) {
      var values = _extends({}, this.state.values, _defineProperty({}, name, value));
      this.setState({ values: values });
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      this.props.history.goBack();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var questions = this.fields[0].group;
      var header = [];
      var headercontent = [];

      {
        if (this.state.onboard) {
          switch (this.state.step) {

            case 1:
              headercontent["step"] = "Etape 1";
              headercontent["title "] = "Compléter votre fiche info";
              headercontent["subtitle "] = "Il s'agit ici de rappeler vos informations d'identité basique. Même si vos proches connaissent les détails, il est toujours utile de les avoir sur l'outil.";

              break;
            case 2:
              headercontent["step"] = "Etape 2";
              headercontent["title "] = "Créer ou Importer votre contact pour la Mairie";
              headercontent["subtitle "] = "La mairie est un organisme essentiel dans les démarches d'organisation d'obsèques\n" + "pour vos proches, c'est elle qui va éditer l'acte de décès.";
              break;

            case 3:
              headercontent["step"] = "Etape 3";
              headercontent["title "] = "Créer votre contact pour votre Médecin";
              headercontent["subtitle "] = "Les coordonnées du médecin sont elles aussi essentielles.\n" + "C’est le médecin qui constate le décès.";

          }
          header.push(_react2.default.createElement(
            'div',
            { key: 'header', className: 'col-md-12' },
            _react2.default.createElement(
              'h3',
              null,
              headercontent["step"]
            ),
            _react2.default.createElement('br', null),
            _react2.default.createElement(
              'h4',
              null,
              headercontent["title "]
            ),
            _react2.default.createElement(
              'h5',
              null,
              headercontent["subtitle "]
            )
          ));
        } else {
          header.push(_react2.default.createElement(
            'div',
            { key: 'header', className: 'col-md-12' },
            _react2.default.createElement(
              'h3',
              null,
              this.fields[0].name
            ),
            _react2.default.createElement('br', null),
            _react2.default.createElement(
              'h4',
              null,
              this.fields[0].description || this.props.hiddenType
            )
          ));
        }
      }

      return _react2.default.createElement(
        'div',
        { className: _DataForm2.default.main, onClick: function onClick(e) {
            return e.stopPropagation();
          } },
        _react2.default.createElement(
          'div',
          { className: 'content' },
          _react2.default.createElement(
            'div',
            { className: _DataForm2.default.header },
            header
          ),
          this.state.import == false && questions.map(function (item, key) {
            var size = 12;
            var hide = item[0].hide || false;
            if (12 % item.length == 0 && !hide) {
              size = 12 / item.length;
            }
            var row = [];
            item.map(function (subitem, subkey) {
              var Class = "col-sm-12 col-md-" + size;

              if (hide) {
                subitem.values == _this4.props.hiddenType;
                Class = _DataForm2.default.hidden;
              }
              row.push(_react2.default.createElement(
                'div',
                { className: Class },
                _react2.default.createElement('br', null),
                _react2.default.createElement(
                  'label',
                  null,
                  subitem.question || subitem.display
                ),
                _react2.default.createElement(_CustomInput2.default, { className: _DataForm2.default.input, value: _this4.state.values[subitem.name], type: subitem.type, values: subitem.values, placeholder: subitem.display, onChange: function onChange(e) {
                    return _this4.change(e, subitem.name);
                  } })
              ));
            });
            return row;
          }),
          this.state.import == true && _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'div',
              { className: (0, _classnames2.default)("col-md-6", _DataForm2.default.importCard), onClick: function onClick() {
                  return _this4.onimport();
                } },
              _react2.default.createElement('i', { className: "ion-ios-person" }),
              ' ',
              _react2.default.createElement('br', null),
              'Cr\xE9er votre contact ',
              _react2.default.createElement('br', null),
              _react2.default.createElement('span', null)
            ),
            _react2.default.createElement(
              'div',
              { className: (0, _classnames2.default)("col-md-6", _DataForm2.default.importCard, _DataForm2.default.disable) },
              _react2.default.createElement('div', { className: _DataForm2.default.overlay }),
              _react2.default.createElement('i', { className: (0, _classnames2.default)("ion-ios-people") }),
              ' ',
              _react2.default.createElement('br', null),
              'Importer votre contact ',
              _react2.default.createElement('br', null),
              _react2.default.createElement('span', null)
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _DataForm2.default.footer },
          _react2.default.createElement(
            'button',
            { onClick: function onClick() {
                return _this4.props.close();
              }, className: (0, _classnames2.default)(_DataForm2.default.button, _buttons2.default.button, _buttons2.default.defaultLight), title: 'Fermer' },
            'FERMER'
          ),
          this.state.import == false && _react2.default.createElement(
            'button',
            { onClick: function onClick() {
                return _this4.nextStep();
              }, className: (0, _classnames2.default)(_DataForm2.default.button, _buttons2.default.button, _buttons2.default.default), title: 'Suivant' },
            'VALIDER'
          )
        )
      );
    }
  }]);

  return DataForm;
}(_react.Component);

exports.default = DataForm;

/***/ }),

/***/ "./src/components/elements/DataTable.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DataTable = exports.DataTableItem = exports.DataTableGroup = undefined;

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _DataTable = __webpack_require__("./src/styles/DataTable.scss");

var _DataTable2 = _interopRequireDefault(_DataTable);

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _moment = __webpack_require__("./node_modules/moment/moment.js");

var _moment2 = _interopRequireDefault(_moment);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _CustomInput = __webpack_require__("./src/components/utils/CustomInput.jsx");

var _CustomInput2 = _interopRequireDefault(_CustomInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DataTableGroup = exports.DataTableGroup = function DataTableGroup(props) {
    return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
            'div',
            { className: _DataTable2.default.row },
            _react2.default.createElement(
                'h3',
                null,
                props.title || ' '
            ),
            _react2.default.createElement(
                'div',
                null,
                props.onAdd,
                props.onRemove
            )
        ),
        _react2.default.createElement(
            'div',
            { className: _DataTable2.default.group },
            props.children
        )
    );
};

var DataTableItem = exports.DataTableItem = function DataTableItem(props) {
    var renderValue = function renderValue() {
        if (props.updatable) return;

        if (_lodash2.default.isObject(props.value)) {
            if (props.type == 'address') {
                return _react2.default.createElement(
                    'div',
                    { key: 'adress' },
                    _react2.default.createElement(
                        'div',
                        { className: 'col-md-12' },
                        _react2.default.createElement(
                            'h4',
                            null,
                            'Voie'
                        ),
                        ' ',
                        _react2.default.createElement(
                            'div',
                            { className: _DataTable2.default.vitem },
                            props.value['way']
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: 'col-md-6' },
                        _react2.default.createElement(
                            'h4',
                            null,
                            'Code Postal'
                        ),
                        ' ',
                        _react2.default.createElement(
                            'div',
                            { className: _DataTable2.default.vitem },
                            props.value['code']
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: 'col-md-6' },
                        _react2.default.createElement(
                            'h4',
                            null,
                            'Ville'
                        ),
                        ' ',
                        _react2.default.createElement(
                            'div',
                            { className: _DataTable2.default.vitem },
                            props.value['city']
                        )
                    )
                );
            } else if (props.type == 'birthdate') {
                return _react2.default.createElement(
                    'div',
                    { key: 'birthdate', style: { paddingRight: 15 + "px", paddingLeft: 15 + "px" } },
                    _react2.default.createElement(
                        'div',
                        { className: _DataTable2.default.vitem },
                        props.value['day'],
                        '/',
                        props.value['month'],
                        '/',
                        props.value['year']
                    )
                );
            } else if (props.type == 'interlocuteur') {

                var civility = props.value['civility'];

                switch (props.value['civility']) {
                    case "0":
                        civility = "Madame";
                        break;
                    case "1":
                        civility = "Monsieur";
                        break;
                    case "2":
                        civility = "";
                        break;
                }

                return _react2.default.createElement(
                    'div',
                    { key: 'interlocuteur' },
                    _react2.default.createElement(
                        'div',
                        { className: 'col-md-2' },
                        _react2.default.createElement(
                            'h4',
                            null,
                            'Civilit\xE9'
                        ),
                        ' ',
                        _react2.default.createElement(
                            'div',
                            { className: _DataTable2.default.vitem },
                            civility
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: 'col-md-5' },
                        _react2.default.createElement(
                            'h4',
                            null,
                            'Nom'
                        ),
                        ' ',
                        _react2.default.createElement(
                            'div',
                            { className: _DataTable2.default.vitem },
                            props.value['lastname']
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: 'col-md-5' },
                        _react2.default.createElement(
                            'h4',
                            null,
                            'Pr\xE9nom'
                        ),
                        ' ',
                        _react2.default.createElement(
                            'div',
                            { className: _DataTable2.default.vitem },
                            props.value['firstname']
                        )
                    )
                );
            } else {
                return _lodash2.default.map(props.value, function (item, key) {
                    return _react2.default.createElement(
                        'div',
                        { className: _DataTable2.default.vitem },
                        item
                    );
                });
            }
        } else {
            var value = props.value;
            switch (props.type) {
                case 'boolean':
                    value = value === 1 ? 'Oui' : 'Non';
                    break;
            }
            return _react2.default.createElement(
                'div',
                { className: 'col-md-12' },
                _react2.default.createElement(
                    'div',
                    { className: _DataTable2.default.vitem },
                    value
                )
            );
        }
    };

    return _react2.default.createElement(
        'div',
        { className: _DataTable2.default.item },
        _react2.default.createElement(
            'div',
            { className: _DataTable2.default.title },
            _react2.default.createElement(
                'h4',
                null,
                props.title
            )
        ),
        _react2.default.createElement(
            'div',
            { className: _DataTable2.default.value },
            props.updatable && _react2.default.createElement(_CustomInput2.default, { value: props.value, values: props.values, placeholder: props.title, type: props.type, onChange: props.onChange }),
            renderValue()
        )
    );
};

var DataTable = exports.DataTable = function DataTable(props) {
    return _react2.default.createElement(
        'form',
        { className: _DataTable2.default.main, onSubmit: function onSubmit() {
                return props.onSubmit && props.onSubmit();
            } },
        props.children
    );
};

DataTable.Item = DataTableItem;
DataTable.Group = DataTableGroup;

exports.default = DataTable;

/***/ }),

/***/ "./src/components/elements/Devis.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _ImporterModal = __webpack_require__("./src/components/modals/ImporterModal.jsx");

var _ImporterModal2 = _interopRequireDefault(_ImporterModal);

var _reactPdfJs = __webpack_require__("./node_modules/react-pdf-js/lib/index.js");

var _reactPdfJs2 = _interopRequireDefault(_reactPdfJs);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Prestataire = __webpack_require__("./src/styles/Prestataire.scss");

var _Prestataire2 = _interopRequireDefault(_Prestataire);

var _Localisation = __webpack_require__("./src/styles/Localisation.scss");

var _Localisation2 = _interopRequireDefault(_Localisation);

var _Devis = __webpack_require__("./src/styles/Devis.scss");

var _Devis2 = _interopRequireDefault(_Devis);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _reactFileReaderInput = __webpack_require__("./node_modules/react-file-reader-input/lib/index.js");

var _reactFileReaderInput2 = _interopRequireDefault(_reactFileReaderInput);

var _reactPromise = __webpack_require__("./node_modules/react-promise/dist/react-promise.es.js");

var _reactPromise2 = _interopRequireDefault(_reactPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Devis = function (_React$Component) {
  _inherits(Devis, _React$Component);

  function Devis(props) {
    _classCallCheck(this, Devis);

    var _this = _possibleConstructorReturn(this, (Devis.__proto__ || Object.getPrototypeOf(Devis)).call(this, props));

    _this.state = {
      open: false,
      modalOpen: false,
      edition: false,
      current: null,
      hiddenType: '',
      search: '',
      typeGroup: [],
      customTypeGroup: [],
      TypeOpen: false,
      InfoOpen: false,
      infoHeader: "",
      infoText: "",
      firstname: "",
      formType: "",
      newTypeType: "",
      lastname: "",
      link: '',
      file: '',
      imagePreviewUrl: '',
      devis: '',
      urlFile: '',
      pdfViewerUrl: ''
    };
    _this.idDetected = false;
    return _this;
  }

  _createClass(Devis, [{
    key: 'add',
    value: function add() {
      this.setState({
        current: null,
        modalOpen: true,
        edition: true
      });
    }
  }, {
    key: 'open',
    value: function open(item) {
      this.setState({
        current: item,
        modalOpen: true
      });
    }
  }, {
    key: 'select',
    value: function select(item) {
      this.props.onSelectContact(item);
    }
  }, {
    key: 'remove',
    value: function remove() {
      if (!this.state.current) return;
      this.props.onRemoveContacts([this.state.current]);
      this.setState({
        modalOpen: false,
        current: null
      });
    }
  }, {
    key: 'addOrSaveContact',
    value: function addOrSaveContact(contact) {
      if (this.state.current) {
        this.props.onSaveContact(this.state.current._id, contact);
      } else {
        this.props.onNewContact(contact.firstName, contact);
      }
      this.setState({
        modalOpen: false,
        current: null
      });
    }
  }, {
    key: 'handlePdf',
    value: function handlePdf(elem) {
      elem.preventDefault();
      this.setState({
        pdfViewerUrl: elem.target.id
      });
    }
  }, {
    key: 'printPdf',
    value: function printPdf(e) {
      e.preventDefault();
      window.open(this.state.pdfViewerUrl, 'print').print();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var add = _react2.default.createElement(
        'button',
        { onClick: function onClick() {
            return _this2.add();
          }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default) },
        _react2.default.createElement('img', { className: _FuneralList2.default.add, src: 'public/media/add.svg' }),
        'AJOUTER UN DEVIS'
      );
      // const dir = cozy.client.files.statById(COZY_ROOT_ID);
      var dir = cozy.client.files.statByPath(_index.ROOT_PATH + '/presta-funeraire');
      var data = [];
      var files = [];
      var result = [];
      var urlPDF = [];
      dir.then(function (result) {
        var files = result.relationships.contents.data;
        files.map(function (index, item) {
          data.push(index.id);
        });
      }).then(function (item) {
        data.map(function (item, index) {
          files.push(cozy.client.files.statById(item));
          cozy.client.files.getDownloadLinkById(item).then(function (url) {
            return cozy.client.fullpath(url);
          }).then(function (url) {
            return urlPDF.push(url);
          });
        });
      }).then(function (item) {
        Promise.all(files).then(function (item) {
          result.push(item);
          result = result[0];
          // console.log(result)
          _this2.state.devis = result;
          // urlPDF.reverse();
          _this2.state.urlFile = urlPDF;
        }).catch(function (e) {
          console.log(e);
        });
      });
      return _react2.default.createElement(
        _Page2.default,
        { title: 'Pr\xE9parer mes obs\xE8ques', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles \xE0 vos proches. ' },
        _react2.default.createElement(
          'div',
          { className: [_FuneralList2.default.main, _Devis2.default.mainDevis].join(' ') },
          _react2.default.createElement(
            'div',
            { className: [_FuneralList2.default.header, _Devis2.default.mainDevis].join(' ') },
            _react2.default.createElement(
              'div',
              { className: [_Prestataire2.default.titlePresta, _Devis2.default.titleDevis].join(' ') },
              _react2.default.createElement(
                'h3',
                null,
                'Stocker le devis'
              ),
              _react2.default.createElement(
                'p',
                null,
                'N\'h\xE9sitez pas \xE0 contacter Parnasse-MAIF au 05 49 04 49 04 qui vous mettra en relation avec son coordinateur fun\xE9raire. Celui-ci vous indiquera un r\xE9seau de prestataires fun\xE9raires pour la r\xE9alisation des prestations'
              ),
              _react2.default.createElement(
                'a',
                { href: '/media/devis.pdf', target: '_blank', className: _Devis2.default.devisType },
                'DEVIS TYPE'
              )
            ),
            _react2.default.createElement(
              'div',
              { className: _Devis2.default.contentDevisUpload },
              _react2.default.createElement(
                'h3',
                null,
                ' Devis re\xE7u '
              ),
              _react2.default.createElement(
                'button',
                { onClick: function onClick() {
                    return _this2.add();
                  }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default) },
                _react2.default.createElement('img', { className: _FuneralList2.default.add, src: 'public/media/add.svg' }),
                'AJOUTER UN DEVIS'
              )
            ),
            _react2.default.createElement(
              'div',
              { className: _Devis2.default.contentDevis },
              _react2.default.createElement(
                'div',
                null,
                this.state.devis.length ? this.state.devis.map(function (d, key) {
                  return _react2.default.createElement(
                    'div',
                    { className: _Devis2.default.dataDevis, key: _this2.state._id },
                    _react2.default.createElement(
                      'div',
                      { className: _Devis2.default.txtDataDevis, key: _this2.state._id },
                      _react2.default.createElement(
                        'h3',
                        { onClick: _this2.handlePdf.bind(_this2), id: _this2.state.urlFile[key] },
                        d.attributes.name,
                        ' >'
                      )
                    ),
                    _react2.default.createElement(
                      'div',
                      { className: _Devis2.default.ctnDataDateDevis },
                      _react2.default.createElement(
                        'div',
                        { className: _Devis2.default.dateDataDevis },
                        _react2.default.createElement(
                          'p',
                          null,
                          'Devi re\xE7u le ',
                          d.attributes.created_at.slice(0, 10)
                        )
                      )
                    )
                  );
                }) : _react2.default.createElement(
                  'li',
                  null,
                  'Pas de devis enregistr\xE9s'
                )
              )
            ),
            _react2.default.createElement(
              'div',
              { className: _Devis2.default.contentDevisUpload },
              _react2.default.createElement(
                'button',
                { className: _Devis2.default.buttonAddDevis, onClick: this.printPdf.bind(this) },
                'IMPRIMER'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _Devis2.default.previewPDF },
            function () {
              switch (_this2.state.pdfViewerUrl) {
                case "":
                  return "";
                default:
                  return _react2.default.createElement(_reactPdfJs2.default, { file: _this2.state.pdfViewerUrl });
              }
            }()
          )
        ),
        _react2.default.createElement(
          _reactPortal2.default,
          { isOpened: this.state.modalOpen, closeOnEsc: true, onClose: function onClose() {
              return _this2.setState({ modalOpen: false, current: null, edition: false });
            } },
          _react2.default.createElement(
            _Modal2.default,
            null,
            _react2.default.createElement(_Importer2.default, {
              folder: 'presta-funeraire',
              onImportDone: function onImportDone(files) {
                return files;
              }
            })
          )
        )
      );
    }
  }]);

  return Devis;
}(_react2.default.Component);

exports.default = Devis;

/***/ }),

/***/ "./src/components/elements/DirectoryPicker.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _DirectoryPicker = __webpack_require__("./src/styles/DirectoryPicker.scss");

var _DirectoryPicker2 = _interopRequireDefault(_DirectoryPicker);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DirectoryPicker = function (_React$Component) {
    _inherits(DirectoryPicker, _React$Component);

    function DirectoryPicker(props, context) {
        _classCallCheck(this, DirectoryPicker);

        var _this = _possibleConstructorReturn(this, (DirectoryPicker.__proto__ || Object.getPrototypeOf(DirectoryPicker)).call(this, props, context));

        if (!_this.props.root) return _possibleConstructorReturn(_this);

        _this.default = _this.props.default;

        _this.state = {
            current: _this.props.default || _this.props.root
        };
        return _this;
    }

    _createClass(DirectoryPicker, [{
        key: '_onItemClick',
        value: function _onItemClick(path) {
            var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (this.props.files && dir) return;
            if (!this.props.files && !dir) return;

            if (!path) return;
            this.setState({
                current: path
            });

            if (_lodash2.default.isFunction(this.props.onPathChange)) this.props.onPathChange(path);
        }
    }, {
        key: '_toggleDir',
        value: function _toggleDir(path) {

            var ok = this.toggleDirRec(path, this.props.dirs.childs);

            if (ok) {
                this.setState({});
            }
        }
    }, {
        key: 'toggleDirRec',
        value: function toggleDirRec(path, array) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = array[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var d = _step.value;

                    if (d.path === path) {
                        d.open = !d.open;
                        return true;
                    } else {
                        if (d.childs && d.childs.length > 0) {
                            var ok = this.toggleDirRec(path, d.childs);
                            if (ok) return true;
                        }
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return false;
        }
    }, {
        key: '_renderDirs',
        value: function _renderDirs() {
            var _this2 = this;

            if (this.props.dirs) {
                var list = this.createDirList(this.props.dirs.childs);
                var displayName = this.props.dirs.name;
                return _react2.default.createElement(
                    'div',
                    { className: _DirectoryPicker2.default.container },
                    _react2.default.createElement(
                        'span',
                        { className: (0, _classnames2.default)(_DirectoryPicker2.default.name, _defineProperty({}, _DirectoryPicker2.default.selected, this.props.dirs.path === this.state.current)), onClick: function onClick() {
                                return _this2._onItemClick(_this2.props.dirs.path, true);
                            } },
                        _react2.default.createElement('i', { className: (0, _classnames2.default)(_DirectoryPicker2.default.icon, "ion-ios-arrow-down") }),
                        _react2.default.createElement('i', { className: (0, _classnames2.default)(_DirectoryPicker2.default.icon, "ion-ios-folder-outline") }),
                        displayName
                    ),
                    list
                );
            }
            return null;
        }
    }, {
        key: 'createDirList',
        value: function createDirList() {
            var _this3 = this;

            var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            if (list.length === 0) return null;
            var ret = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var l = _step2.value;

                    if (this.props.hideFiles && !l.dir) continue;

                    var displayName = l.name.substring(l.name.lastIndexOf('/') + 1);
                    ret.push(_react2.default.createElement(
                        'li',
                        { key: l.name },
                        _react2.default.createElement(
                            'span',
                            { className: (0, _classnames2.default)(_DirectoryPicker2.default.name, _defineProperty({}, _DirectoryPicker2.default.selected, l.path === this.state.current)),
                                'data-path': l.path,
                                'data-dir': l.dir,
                                onDoubleClick: function onDoubleClick(e) {
                                    return _this3._toggleDir(e.target.dataset.path);
                                },
                                onClick: function onClick(e) {
                                    return _this3._onItemClick(e.target.dataset.path, e.target.dataset.dir);
                                }
                            },
                            l.dir && _react2.default.createElement('i', { onClick: function onClick(e) {
                                    return _this3._toggleDir(e.target.dataset.path);
                                },
                                'data-path': l.path,
                                className: (0, _classnames2.default)(_DirectoryPicker2.default.icon, { 'ion-ios-arrow-right': l.childs.length > 0 && !l.open, 'ion-ios-arrow-down': l.childs.length > 0 && l.open }) }),
                            _react2.default.createElement('i', { className: (0, _classnames2.default)(_DirectoryPicker2.default.icon, _defineProperty({ "ion-ios-folder-outline": l.dir, "ion-ios-paper-outline": !l.dir }, _DirectoryPicker2.default.file, !l.dir)) }),
                            displayName
                        ),
                        l.open && l.childs.length > 0 ? this.createDirList(l.childs) : null
                    ));
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return _react2.default.createElement(
                'ul',
                { className: _DirectoryPicker2.default.content },
                ret
            );
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                { className: _DirectoryPicker2.default.main },
                this._renderDirs.bind(this)()
            );
        }
    }]);

    return DirectoryPicker;
}(_react2.default.Component);

exports.default = DirectoryPicker;

/***/ }),

/***/ "./src/components/elements/DocumentList.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DocumentList = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _moment = __webpack_require__("./node_modules/moment/moment.js");

var _moment2 = _interopRequireDefault(_moment);

var _ElementList = __webpack_require__("./src/styles/ElementList.scss");

var _ElementList2 = _interopRequireDefault(_ElementList);

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _constants = __webpack_require__("./src/constants/index.js");

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DocumentList = exports.DocumentList = function DocumentList(props) {
    var _classNames;

    return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)(_ElementList2.default.list, (_classNames = {}, _defineProperty(_classNames, _ElementList2.default.viewList, props.view === _constants.VIEW_LIST), _defineProperty(_classNames, _ElementList2.default.viewGrid, props.view === _constants.VIEW_GRID), _classNames)) },
        props.children.map(function (item, key) {
            var _classNames3;

            return _react2.default.createElement(
                'div',
                { key: key,
                    onClick: function onClick(e) {
                        return props.onClickItem && props.onClickItem(item, e, key);
                    },
                    className: (0, _classnames2.default)(_ElementList2.default.document, _defineProperty({}, _ElementList2.default.selected, item.selected)),
                    title: item.title ? item.title : '',
                    onDragOver: function onDragOver(e) {
                        return e.preventDefault();
                    },
                    onDrop: function onDrop(e) {
                        return props.onDrop && props.onDrop(item, e);
                    } },
                props.onSelectItem && item.selected && _react2.default.createElement('i', { className: (0, _classnames2.default)(_ElementList2.default.checkbox, "ion-android-checkbox-outline"), onClick: function onClick(e) {
                        e.stopPropagation();props.onSelectItem(item, e, key, false);
                    } }),
                props.onSelectItem && !item.selected && _react2.default.createElement('i', { className: (0, _classnames2.default)(_ElementList2.default.checkbox, "ion-android-checkbox-outline-blank"), onClick: function onClick(e) {
                        e.stopPropagation();props.onSelectItem(item, e, key, true);
                    } }),
                _react2.default.createElement(
                    'div',
                    { className: _ElementList2.default.content },
                    _react2.default.createElement(DocIcon, { id: item.id, selected: item.selected, type: item.type, name: item.name, links: item.links, image: item.class === 'image' })
                ),
                _react2.default.createElement(
                    'div',
                    {
                        className: _ElementList2.default.name,
                        title: item.name },
                    item.name
                ),
                _react2.default.createElement(
                    'span',
                    { style: { marginRight: '5px' }, className: _ElementList2.default.type },
                    item.tags && item.tags.length > 0 && (0, _fileTypes.getDisplayName)(item.tags[0])
                ),
                !props.noDate && _react2.default.createElement(
                    'div',
                    { className: _ElementList2.default.date },
                    _react2.default.createElement(
                        'span',
                        null,
                        (0, _moment2.default)(item.updated_at).format('DD/MM/YYYY')
                    )
                ),
                props.onRemove && !item.noRemove && _react2.default.createElement(
                    'button',
                    { onClick: function onClick(e) {
                            e.stopPropagation();props.onRemove(item, e);
                        }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.clear, (_classNames3 = {}, _defineProperty(_classNames3, _buttons2.default.default, item.selected), _defineProperty(_classNames3, _buttons2.default.stable, !item.selected), _classNames3)), title: 'Supprimer' },
                    _react2.default.createElement('i', { className: 'ion-ios-close-empty' })
                )
            );
        })
    );
};

var DocIcon = function (_Component) {
    _inherits(DocIcon, _Component);

    function DocIcon(props, context) {
        _classCallCheck(this, DocIcon);

        var _this = _possibleConstructorReturn(this, (DocIcon.__proto__ || Object.getPrototypeOf(DocIcon)).call(this, props, context));

        _this.state = {
            icon: _this.getItemIcon(props)
        };
        return _this;
    }

    _createClass(DocIcon, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
            if (newProps.selected != this.props.selected && !this.props.image) {
                this.state = {
                    icon: this.getItemIcon(newProps)
                };
            }
        }
    }, {
        key: 'getItemIcon',
        value: function getItemIcon(props) {
            var _this2 = this;

            var type = props.type || 'file';
            var icon = '/images/file';

            if (type === 'file') {
                if (props.image && props.links && props.links.small) {
                    cozy.client.fullpath(props.links.small).then(function (path) {
                        if (_this2.state.icon != path) {
                            _this2.setState({ icon: path });
                        }
                    });
                }
            } else {
                icon = '/images/';

                switch (props.name) {
                    case 'Diagnostics':
                        icon += 'folder-diagnostic';
                        break;

                    case 'Documents de propriété':
                        icon += 'folder-document-de-propriete';
                        break;

                    case 'Équipements':
                        icon += 'folder-equipements';
                        break;

                    case 'Travaux':
                        icon += 'folder-travaux';
                        break;

                    case 'Entretiens':
                        icon += 'folder-entretien';
                        break;

                    case 'Usages':
                        icon += 'folder-document-de-propriete'; //TODO: change to the correct icon name
                        break;

                    default:
                        icon += "folder";
                }
            }

            if (props.selected) icon += '.selected';
            return icon + '.png';
        }
    }, {
        key: 'iconErr',
        value: function iconErr() {
            var _this3 = this;

            if (this.props.image) {
                cozy.client.files.getDownloadLinkById(this.props.id).then(function (link) {
                    return cozy.client.fullpath(link);
                }).then(function (path) {
                    return _this3.setState({ icon: path });
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            return _react2.default.createElement('img', { src: this.state.icon, onError: function onError(e) {
                    return _this4.iconErr(e);
                } });
        }
    }]);

    return DocIcon;
}(_react.Component);

exports.default = DocumentList;

/***/ }),

/***/ "./src/components/elements/Don.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Navigation = __webpack_require__("./src/styles/Navigation.scss");

var _Navigation2 = _interopRequireDefault(_Navigation);

var _Prestataire = __webpack_require__("./src/styles/Prestataire.scss");

var _Prestataire2 = _interopRequireDefault(_Prestataire);

var _Don = __webpack_require__("./src/styles/Don.scss");

var _Don2 = _interopRequireDefault(_Don);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _reactTooltip = __webpack_require__("./node_modules/react-tooltip/dist/index.js");

var _reactTooltip2 = _interopRequireDefault(_reactTooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Don = function (_React$Component) {
    _inherits(Don, _React$Component);

    function Don(props) {
        _classCallCheck(this, Don);

        var _this = _possibleConstructorReturn(this, (Don.__proto__ || Object.getPrototypeOf(Don)).call(this, props));

        _this.state = {
            open: false,
            current: '',
            hiddenType: '',
            search: '',
            typeGroup: [],
            customTypeGroup: [],
            TypeOpen: false,
            InfoOpen: false,
            infoHeader: "",
            infoText: "",
            firstname: "",
            formType: "",
            newTypeType: "",
            lastname: "",
            link: ''
        };
        return _this;
    }

    _createClass(Don, [{
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Pr\xE9parer mes obs\xE8ques', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles \xE0 vos proches. ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        { className: _FuneralList2.default.header },
                        _react2.default.createElement(
                            'div',
                            { className: _Prestataire2.default.titlePresta },
                            _react2.default.createElement(
                                'h2',
                                { className: _Don2.default.titleStep },
                                'Don du corps \xE0 la science'
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _Prestataire2.default.contentStep, 'data-type': 'light', 'data-tip': 'Donner son corps est payant : les frais de transport co\xFBtent entre 200 \xE0 900 euros, r\xE9gl\xE9s d\'avance).' },
                        _react2.default.createElement(
                            'a',
                            { href: 'http://www.afif.asso.fr/francais/conseils/conseil15.html', target: '_blank' },
                            _react2.default.createElement(
                                'h3',
                                null,
                                'Trouver une facult\xE9 de m\xE9decine ',
                                _react2.default.createElement('img', { className: _Navigation2.default.chevron, src: 'media/chevronpurple.svg' }),
                                ' '
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'La d\xE9marche doit s\'effectuer aupr\xE8s de la facult\xE9 de m\xE9decine dont d\xE9pend votre domiciliation. Vous devrez notamment fournir une lettre de demande manuscrite.'
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _Prestataire2.default.contentStep, 'data-type': 'light', 'data-tip': 'Il est important de noter que les cendres sont rarement rendues \xE0 la famille, le corps non plus a fortiori. Pr\xE9parer vos proches \xE0 cette situation peut \xEAtre utile.' },
                        _react2.default.createElement(
                            'a',
                            { href: 'http://www.afif.asso.fr/francais/conseils/conseil15.html', target: '_blank' },
                            _react2.default.createElement(
                                'h3',
                                null,
                                'Ecrire votre lettre manuscrite ',
                                _react2.default.createElement('img', { className: _Navigation2.default.chevron, src: 'media/chevronpurple.svg' }),
                                ' '
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Vous trouverez ici un mod\xE8le de lettre que vous devrez recopier sur une feuille libre et la transmettre \xE0 la facult\xE9 dont vous d\xE9pendez. '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _FuneralList2.default.header },
                        _react2.default.createElement(
                            'div',
                            { className: _Prestataire2.default.titlePresta },
                            _react2.default.createElement(
                                'h2',
                                { className: _Don2.default.titleStep },
                                'Refus du don d\'organe'
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _Prestataire2.default.contentStep },
                        _react2.default.createElement(
                            'a',
                            { href: 'https://www.registrenationaldesrefus.fr/#etape-1', target: '_blank' },
                            _react2.default.createElement(
                                'h3',
                                null,
                                'Le registre National Des Refus',
                                _react2.default.createElement('img', { className: _Navigation2.default.chevron, src: 'media/chevronpurple.svg' }),
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _FuneralList2.default.header },
                        _react2.default.createElement(
                            'div',
                            { className: _Prestataire2.default.titlePresta },
                            _react2.default.createElement(
                                'h2',
                                { className: _Don2.default.titleStep },
                                'Scanner votre document'
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _Prestataire2.default.contentStep },
                        _react2.default.createElement(
                            _reactRouterDom.Link,
                            { to: '/devis-don' },
                            _react2.default.createElement(
                                'h3',
                                null,
                                'Scanner et stocker votre document',
                                _react2.default.createElement('img', { className: _Navigation2.default.chevron, src: 'media/chevronpurple.svg' }),
                                ' '
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Ici, vous pouvez stocker la confirmation d\u2019inscription du registre national du refus. Elle contient un num\xE9ro de dossier \xE0 conserver imp\xE9rativement pour toute demande ult\xE9rieure de modification ou d\u2019annulation de votre inscription'
                            )
                        )
                    )
                ),
                _react2.default.createElement(_reactTooltip2.default, null)
            );
        }
    }]);

    return Don;
}(_react2.default.Component);

exports.default = Don;

/***/ }),

/***/ "./src/components/elements/DonDevis.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _ImporterModal = __webpack_require__("./src/components/modals/ImporterModal.jsx");

var _ImporterModal2 = _interopRequireDefault(_ImporterModal);

var _reactPdfJs = __webpack_require__("./node_modules/react-pdf-js/lib/index.js");

var _reactPdfJs2 = _interopRequireDefault(_reactPdfJs);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Prestataire = __webpack_require__("./src/styles/Prestataire.scss");

var _Prestataire2 = _interopRequireDefault(_Prestataire);

var _Localisation = __webpack_require__("./src/styles/Localisation.scss");

var _Localisation2 = _interopRequireDefault(_Localisation);

var _Devis = __webpack_require__("./src/styles/Devis.scss");

var _Devis2 = _interopRequireDefault(_Devis);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _reactFileReaderInput = __webpack_require__("./node_modules/react-file-reader-input/lib/index.js");

var _reactFileReaderInput2 = _interopRequireDefault(_reactFileReaderInput);

var _reactPromise = __webpack_require__("./node_modules/react-promise/dist/react-promise.es.js");

var _reactPromise2 = _interopRequireDefault(_reactPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DonDevis = function (_React$Component) {
    _inherits(DonDevis, _React$Component);

    function DonDevis(props) {
        _classCallCheck(this, DonDevis);

        var _this = _possibleConstructorReturn(this, (DonDevis.__proto__ || Object.getPrototypeOf(DonDevis)).call(this, props));

        _this.state = {
            open: false,
            modalOpen: false,
            edition: false,
            current: null,
            hiddenType: '',
            search: '',
            typeGroup: [],
            customTypeGroup: [],
            TypeOpen: false,
            InfoOpen: false,
            infoHeader: "",
            infoText: "",
            firstname: "",
            formType: "",
            newTypeType: "",
            lastname: "",
            link: '',
            file: '',
            imagePreviewUrl: '',
            devis: '',
            urlFile: '',
            pdfViewerUrl: ''
        };
        _this.idDetected = false;
        return _this;
    }

    _createClass(DonDevis, [{
        key: 'add',
        value: function add() {
            this.setState({
                current: null,
                modalOpen: true,
                edition: true
            });
        }
    }, {
        key: 'open',
        value: function open(item) {
            this.setState({
                current: item,
                modalOpen: true
            });
        }
    }, {
        key: 'select',
        value: function select(item) {
            this.props.onSelectContact(item);
        }
    }, {
        key: 'remove',
        value: function remove() {
            if (!this.state.current) return;
            this.props.onRemoveContacts([this.state.current]);
            this.setState({
                modalOpen: false,
                current: null
            });
        }
    }, {
        key: 'addOrSaveContact',
        value: function addOrSaveContact(contact) {
            if (this.state.current) {
                this.props.onSaveContact(this.state.current._id, contact);
            } else {
                this.props.onNewContact(contact.firstName, contact);
            }
            this.setState({
                modalOpen: false,
                current: null
            });
        }
    }, {
        key: 'handlePdf',
        value: function handlePdf(elem) {
            elem.preventDefault();
            this.setState({
                pdfViewerUrl: elem.target.id
            });
        }
    }, {
        key: 'printPdf',
        value: function printPdf(e) {
            e.preventDefault();
            window.open(this.state.pdfViewerUrl, 'print').print();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            console.log("coucou");
            var add = _react2.default.createElement(
                'button',
                { onClick: function onClick() {
                        return _this2.add();
                    }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default) },
                _react2.default.createElement('img', { className: _FuneralList2.default.add, src: 'media/add.svg' }),
                'PARCOURIR MON ORDINATEUR'
            );
            // const dir = cozy.client.files.statById(COZY_ROOT_ID);
            var dir = cozy.client.files.statByPath(_index.ROOT_PATH + '/don-corps');
            console.log(dir);
            var data = [];
            var files = [];
            var result = [];
            var urlPDF = [];
            dir.then(function (result) {
                var files = result.relationships.contents.data;
                console.log(files);
                files.map(function (index, item) {
                    data.push(index.id);
                });
            }).then(function (item) {
                data.map(function (item, index) {
                    files.push(cozy.client.files.statById(item));
                    cozy.client.files.getDownloadLinkById(item).then(function (url) {
                        return cozy.client.fullpath(url);
                    }).then(function (url) {
                        return urlPDF.push(url);
                    });
                });
            }).then(function (item) {
                Promise.all(files).then(function (item) {
                    result.push(item);
                    result = result[0];
                    // console.log(result)
                    _this2.state.devis = result;
                    // urlPDF.reverse();
                    _this2.state.urlFile = urlPDF;
                }).catch(function (e) {
                    console.log(e);
                });
            });
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Pr\xE9parer mes obs\xE8ques', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles \xE0 vos proches. ' },
                _react2.default.createElement(
                    'div',
                    { className: [_FuneralList2.default.main, _Devis2.default.mainDevis].join(' ') },
                    _react2.default.createElement(
                        'div',
                        { className: [_FuneralList2.default.header, _Devis2.default.mainDevis].join(' ') },
                        _react2.default.createElement(
                            'div',
                            { className: [_Prestataire2.default.titlePresta, _Devis2.default.titleDevis].join(' ') },
                            _react2.default.createElement(
                                'h3',
                                null,
                                'Stocker le document'
                            ),
                            _react2.default.createElement(
                                'button',
                                { onClick: function onClick() {
                                        return _this2.add();
                                    }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default) },
                                _react2.default.createElement('img', { className: _FuneralList2.default.add, src: 'media/add.svg' }),
                                'PARCOURIR MON ORDINATEUR'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Devis2.default.contentDevisUpload },
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' Document re\xE7us '
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Devis2.default.contentDevis },
                            _react2.default.createElement(
                                'div',
                                null,
                                this.state.devis.length ? this.state.devis.map(function (d, key) {
                                    return _react2.default.createElement(
                                        'div',
                                        { className: _Devis2.default.dataDevis, key: _this2.state._id },
                                        _react2.default.createElement(
                                            'div',
                                            { className: _Devis2.default.txtDataDevis, key: _this2.state._id },
                                            _react2.default.createElement(
                                                'h3',
                                                { onClick: _this2.handlePdf.bind(_this2), id: _this2.state.urlFile[key] },
                                                d.attributes.name,
                                                ' >'
                                            )
                                        ),
                                        _react2.default.createElement(
                                            'div',
                                            { className: _Devis2.default.ctnDataDateDevis },
                                            _react2.default.createElement(
                                                'div',
                                                { className: _Devis2.default.dateDataDevis },
                                                _react2.default.createElement(
                                                    'p',
                                                    null,
                                                    'Devis re\xE7u le ',
                                                    d.attributes.created_at.slice(0, 10)
                                                )
                                            )
                                        )
                                    );
                                }) : _react2.default.createElement(
                                    'span',
                                    null,
                                    ' '
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Devis2.default.contentDevisUpload },
                            _react2.default.createElement(
                                'button',
                                { className: _Devis2.default.buttonAddDevis, onClick: this.printPdf.bind(this) },
                                'IMPRIMER'
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _Devis2.default.previewPDF },
                        function () {
                            switch (_this2.state.pdfViewerUrl) {
                                case "":
                                    return "";
                                default:
                                    return _react2.default.createElement(_reactPdfJs2.default, { file: _this2.state.pdfViewerUrl });
                            }
                        }()
                    )
                ),
                _react2.default.createElement(
                    _reactPortal2.default,
                    { isOpened: this.state.modalOpen, closeOnEsc: true, onClose: function onClose() {
                            return _this2.setState({ modalOpen: false, current: null, edition: false });
                        } },
                    _react2.default.createElement(
                        _Modal2.default,
                        null,
                        _react2.default.createElement(_Importer2.default, {
                            folder: 'don-corps',
                            onImportDone: function onImportDone(files) {
                                return files;
                            }
                        })
                    )
                )
            );
        }
    }]);

    return DonDevis;
}(_react2.default.Component);

exports.default = DonDevis;

/***/ }),

/***/ "./src/components/elements/Dossier.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _Contacts = __webpack_require__("./src/styles/Contacts.scss");

var _Contacts2 = _interopRequireDefault(_Contacts);

var _Dossier = __webpack_require__("./src/styles/Dossier.scss");

var _Dossier2 = _interopRequireDefault(_Dossier);

var _ToolBoxOptions = __webpack_require__("./src/components/elements/ToolBoxOptions.js");

var _ToolBoxOptions2 = _interopRequireDefault(_ToolBoxOptions);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _Loader = __webpack_require__("./src/components/elements/Loader.js");

var _Loader2 = _interopRequireDefault(_Loader);

var _ContactList = __webpack_require__("./src/components/elements/ContactList.js");

var _ContactList2 = _interopRequireDefault(_ContactList);

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _ContactsModal = __webpack_require__("./src/components/modals/ContactsModal.jsx");

var _ContactsModal2 = _interopRequireDefault(_ContactsModal);

var _constants = __webpack_require__("./src/constants/index.js");

var _meta = __webpack_require__("./src/scripts/meta.js");

var _tools = __webpack_require__("./src/tools/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Dossier = function (_Component) {
  _inherits(Dossier, _Component);

  function Dossier(props, context) {
    _classCallCheck(this, Dossier);

    var _this = _possibleConstructorReturn(this, (Dossier.__proto__ || Object.getPrototypeOf(Dossier)).call(this, props, context));

    _this.state = {
      current: null,
      modalOpen: false,
      edition: false
    };

    _this.idDetected = false;

    return _this;
  }

  _createClass(Dossier, [{
    key: 'render',
    value: function render() {

      return _react2.default.createElement(
        _Page2.default,
        { title: 'Mon dossier obs\xE8ques', subtitle: 'Ce dossier s\u2019adresse aux proches r\xE9f\xE9rents. Il contient les derni\xE8res volont\xE9s du titulaire et un assistant administratif qui hi\xE9rarchise et automatise les d\xE9marches.' },
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.row },
          _react2.default.createElement(
            'h3',
            { className: _Contacts2.default.titlePage },
            'Informations personnelles du d\xE9funt'
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.data },
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/profile' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Profil de Sahra Vadrot'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/profile' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Pr\xE9venir Parnasse-MAIF'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/relation' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Les proches r\xE9f\xE9rents'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Le titulaire du compte d\xE9signe un ou plusieurs de ses proches qui auront acc\xE8s aux donn\xE9es apr\xE8s le d\xE9c\xE8s. Ils les utiliseront pour organiser les obs\xE8ques selon les choix et pourront s\'acquitter ais\xE9ment de l\'ensemble des d\xE9marches administratives. Le titulaire d\xE9signe cette ou ces personne(s) de confiance ici'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/funerals' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Ses derni\xE8res volont\xE9s'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Expliquez \xE0 vos proches vos attentes pour ses obs\xE8ques'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/prestataire' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Prestataire fun\xE9raire'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                ' Ce service vous permet de g\xE9olocaliser les prestataires fun\xE9raires, faire des demandes de devis, stocker le devis retenu.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/profile' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Don du corps \xE0 la science'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Toutes les informations pour donner son corps \xE0 la science ou pour stipuler son refus de don d\u2019organe.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/profile' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Refus du don d\'organe'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Toutes les informations pour donner son corps \xE0 la science ou pour stipuler son refus de don d\u2019organe.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/relation' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Proches \xE0 pr\xE9venir'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Le titulaire entre ici la liste des personnes qui seront pr\xE9venues de son d\xE9c\xE8s. Notamment celles dont les coordonn\xE9es ne sont peut-\xEAtre pas connues des proches r\xE9f\xE9rents (voisin, ami d\u2019enfance, femme de m\xE9nage \u2026).'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.row },
          _react2.default.createElement(
            'h3',
            { className: _Contacts2.default.titlePage },
            'D\xE9marches Administratives \xE0 r\xE9aliser'
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.row },
          _react2.default.createElement(
            'p',
            null,
            ' Un d\xE9c\xE8s occasionne nombre de formalit\xE9s. Notre assistant administratif hi\xE9rarchise les priorit\xE9s, synchronise les donn\xE9es personnelles (noms, adresses, contacts ...) avec les courriers-types et permet le suivi de chaque d\xE9marche.'
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _Contacts2.default.dataObseque },
          _react2.default.createElement(
            'div',
            { className: _Dossier2.default.delai },
            _react2.default.createElement(
              'p',
              null,
              'Imm\xE9diatement'
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/medecin' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'M\xE9decin Traitant'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Il est la premi\xE8re personne \xE0 pr\xE9venir en cas de d\xE9c\xE8s \xE0 domicile. Si la mort survient \xE0 l\'h\xF4pital, les services se chargeront de la d\xE9marche. Le m\xE9decin constate la mort et produit le certificat indispensable \xE0 l\u2019\xE9tablissement de l\'acte de d\xE9c\xE8s.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _Dossier2.default.delai },
            _react2.default.createElement(
              'p',
              null,
              'Dans les 24 heures'
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/mairie' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Mairie'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Pr\xE9venir la mairie sera l\'une des toutes premi\xE8res d\xE9marches \xE0 effectuer, dans les 24 heures apr\xE8s le constat de d\xE9c\xE8s. C\'est l\'administration qui \xE9tablira l\'acte de d\xE9c\xE8s. Ses copies seront souvent demand\xE9es par la suite.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _Dossier2.default.delai },
            _react2.default.createElement(
              'p',
              null,
              'Dans les 48 heures'
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/employeur' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Employeur ou p\xF4le emploi'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'D\xE9j\xE0, il semble humainement \xE9l\xE9mentaire de devoir pr\xE9venir l\'employeur de la personne qui d\xE9c\xE8de. Il sera ensuite tenu de verser les sommes dues pour les heures travaill\xE9es, l\'\xE9pargne salariale... Dans certains cas, un organisme de pr\xE9voyance rattach\xE9 \xE0 la soci\xE9t\xE9 ouvrira des droits aux ayants droits du d\xE9funt.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _Dossier2.default.delai },
            _react2.default.createElement(
              'p',
              null,
              'Dans la semaine'
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/banque' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Les organismes bancaires'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'L\'une des premi\xE8res d\xE9marches d\'ordre administratif \xE0 effectuer est de transmettre un acte de d\xE9c\xE8s \xE0 la banque du d\xE9funt. L\'\xE9tablissement est dans l\'obligation de bloquer le compte \xE0 la date du d\xE9c\xE8s, d\'annuler les procurations, de r\xE9cup\xE9rer les moyens de paiements. Les sommes d\'argent seront rendues disponibles apr\xE8s le r\xE8glement de la succession.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/credit' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Les organismes de cr\xE9dit et d\u2019assurance-vie'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'En cas de cr\xE9dit en cours de remboursement, l\'organisme pr\xEAteur doit \xEAtre pr\xE9venu du d\xE9c\xE8s. L\'assurance \xE9ventuellement souscrite pourra alors acquitter les sommes restantes dues. Sinon, ce sont les avoirs du d\xE9funt qui servent \xE0 solder les dettes en cours.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/complementaire-maladie' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'L\u2019organisme de sant\xE9 compl\xE9mentaire'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Il s\u2019agit des compl\xE9mentaires sant\xE9. Ces organismes peuvent  verser un capital d\xE9c\xE8s aux conjoint, enfants ou ascendants.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _Dossier2.default.delai },
            _react2.default.createElement(
              'p',
              null,
              'Dans les 7 jours'
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/association' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Salari\xE9 ou association de service \xE0 domicile'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Si vous ou votre proche employait une aide \xE0 domicile selon un contrat CESU (Ch\xE8que emploi service universel), le d\xE9c\xE8s entra\xEEne la fin automatique du contrat de travail. Il sera toutefois n\xE9cessaire de lui adresser une lettre de licenciement.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _Dossier2.default.delai },
            _react2.default.createElement(
              'p',
              null,
              'Dans le mois'
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/securite-sociale' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Organisme g\xE9n\xE9ral de sant\xE9'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Des prestations sociales comme l\u2019allocation personnalis\xE9e d\u2019autonomie seront interrompues.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/assurance' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Assurance-vie/assurance d\xE9c\xE8s'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Pr\xE9venir la mutuelle d\'assurance est l\'une des actions prioritaires \xE0 effectuer. La mise \xE0 jour du dossier stoppe le versement des cotisations et peut donner droit \xE0 des allocations ou m\xEAme faire b\xE9n\xE9ficier du tiers payant obs\xE8ques dans certains cas.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/notaire' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Notaire'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Il est un intervenant cl\xE9 dans le r\xE8glement de la succession du d\xE9funt. Ici, la fiche contact du notaire \xE0 qui le testament a \xE9t\xE9 confi\xE9 ou celui qui connait la situation familiale et patrimoniale, sera d\'une grande utilit\xE9 pour la suite.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/retraite' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Caisses de retraite'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Le conjoint ou ex-conjoint peut b\xE9n\xE9ficier du versement d\'une pension de r\xE9version vers\xE9e par la caisse de retraite. L\'organisme, dont les coordonn\xE9es auront \xE9t\xE9 renseign\xE9es dans l\'Espace priv\xE9, pourra initier les r\xE8glements (souvent trimestriels) dans les d\xE9lais d\'autant plus raisonnables qu\'il sera pr\xE9venu t\xF4t'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/bailleur' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Bailleur ou syndic de copropri\xE9t\xE9'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Il est un intervenant cl\xE9 dans le r\xE8glement de la succession du d\xE9funt. Ici, la fiche contact du notaire \xE0 qui le testament a \xE9t\xE9 confi\xE9 ou celui qui connait la situation familiale et patrimoniale, sera d\'une grande utilit\xE9 pour la suite.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/caf' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Caisses d\'allocations familiales'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'La CAF dispose de lettres types qui servent \xE0 pr\xE9venir l\u2019organisme du d\xE9c\xE8s d\u2019un proche. Ici, vous pourrez renseigner l\u2019adresse de la caisse dont vous d\xE9pendez et votre num\xE9ro d\u2019allocataire. La d\xE9marche peut donner lieu \xE0 l\u2019ouverture de droits. Un certificat de d\xE9c\xE8s sera \xE9galement n\xE9cessaire.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/organisme' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Les organismes payeurs'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Les coordonn\xE9es de la Pr\xE9fecture dont vous d\xE9pendez seront utiles pour effectuer des d\xE9marches relatives \xE0 l\'automobile notamment : changer de nom sur la carte grise suite \xE0 une succession par exemple.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/organisme' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Conseil g\xE9n\xE9ral ou organismes de prestations sociales'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'L\u2019organisme doit \xEAtre pr\xE9venu dans de courts d\xE9lais. La d\xE9marche d\xE9clenchera une s\xE9rie d\u2019ajustements administratifs et l\u2019\xE9ventuel versement de droits.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/organisme' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'La Poste'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'L\u2019organisme doit \xEAtre pr\xE9venu dans de courts d\xE9lais. La d\xE9marche d\xE9clenchera une s\xE9rie d\u2019ajustements administratifs et l\u2019\xE9ventuel versement de droits.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/organisme' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'R\xE9seau \xE9l\xE9ctrique'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Les contrats qui vous lient aux fournisseurs d\'\xE9nergie doivent \xEAtre r\xE9sili\xE9s ou mis \xE0 jour s\'ils \xE9taient \xE9tablis au nom du d\xE9funt'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/organisme' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'R\xE9gie de l\'eau'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Comme tous les fournisseurs d\'\xE9nergie \xE0 votre domicile, les services des eaux ont conclu un contrat avec le propri\xE9taire. Si vous l\'\xEAtes, les proches devront signaler votre d\xE9c\xE8s pour r\xE9silier l\'acte ou le mettre \xE0 jour.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/organisme' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'T\xE9l\xE9phonie'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Il faut pr\xE9venir l\'op\xE9rateur qui d\xE9tient les contrats t\xE9l\xE9phonique, internet, t\xE9l\xE9vision... afin de les r\xE9silier ou les transf\xE9rer sur un nouveau titulaire.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/organisme' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Abonnements revues, journaux'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _Dossier2.default.delai },
            _react2.default.createElement(
              'p',
              null,
              'Dans les 6 mois'
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/impot' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Centre des imp\xF4ts'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Quand la succession sera r\xE9gl\xE9e, l\'administration fiscale devra \xEAtre pr\xE9venue pour prendre en compte les nouvelles situations financi\xE8res. L\u2019aide d\u2019un notaire pour bien comprendre et suivre les \xE9v\xE9nements s\u2019av\xE8re souvent n\xE9cessaire.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/impot' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Taxe fonci\xE8re'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Quand la succession sera r\xE9gl\xE9e, l\'administration fiscale devra \xEAtre pr\xE9venue pour prendre en compte les nouvelles situations financi\xE8res. L\u2019aide d\u2019un notaire pour bien comprendre et suivre les \xE9v\xE9nements s\u2019av\xE8re souvent n\xE9cessaire.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          ),
          _react2.default.createElement(
            _reactRouterDom.Link,
            { to: '/impot' },
            _react2.default.createElement(
              'div',
              { className: _Contacts2.default.divContact },
              _react2.default.createElement(
                'div',
                { className: _Contacts2.default.contentContact },
                _react2.default.createElement(
                  'p',
                  { className: _Contacts2.default.contactName },
                  'Taxe d\'habitation'
                ),
                _react2.default.createElement('img', { className: _Contacts2.default.chevron, src: 'media/chevronpurple.svg' })
              ),
              _react2.default.createElement(
                'p',
                null,
                'Quand la succession sera r\xE9gl\xE9e, l\'administration fiscale devra \xEAtre pr\xE9venue pour prendre en compte les nouvelles situations financi\xE8res. L\u2019aide d\u2019un notaire pour bien comprendre et suivre les \xE9v\xE9nements s\u2019av\xE8re souvent n\xE9cessaire.'
              ),
              _react2.default.createElement('hr', { className: _Contacts2.default.seperator })
            )
          )
        )
      );
    }
  }]);

  return Dossier;
}(_react.Component);

exports.default = Dossier;

/***/ }),

/***/ "./src/components/elements/Footer.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _Footer = __webpack_require__("./src/styles/Footer.scss");

var _Footer2 = _interopRequireDefault(_Footer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Footer = function (_Component) {
    _inherits(Footer, _Component);

    function Footer(props, context) {
        _classCallCheck(this, Footer);

        var _this = _possibleConstructorReturn(this, (Footer.__proto__ || Object.getPrototypeOf(Footer)).call(this, props, context));

        window.scrollTo(0, 0);
        document.body.scrollTop = 0;
        return _this;
    }

    _createClass(Footer, [{
        key: 'componentWillMount',
        value: function componentWillMount() {}
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'footer',
                { className: _Footer2.default.main },
                _react2.default.createElement(
                    'div',
                    { className: _Footer2.default.content },
                    _react2.default.createElement(
                        'span',
                        null,
                        'V',
                        '1.0.172'
                    )
                )
            );
        }
    }]);

    return Footer;
}(_react.Component);

exports.default = Footer;

/***/ }),

/***/ "./src/components/elements/FuneralList.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Navigation = __webpack_require__("./src/styles/Navigation.scss");

var _Navigation2 = _interopRequireDefault(_Navigation);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Doctypes = [{
  doctype: _index.DOCTYPE_F_LASTWILL,
  display: 'Mes dernieres volontés',
  excerpt: 'Faites connaître vos choix intimes pour avant, pendant et après les obsèques. Inhumation ou crémation ? Sur quelle commune ? Avec ou sans cérémonie religieuse ? Choix généraux ou plus précis, vos ultimes volontés s\'expriment dans cette rubrique',
  path: '/funerals/lastwill',
  slug: 'lastwill',
  internpath: false,
  unique: true
}, {
  doctype: _index.DOCTYPE_CONTACTS,
  display: 'Don de soi',
  excerpt: "Votre corps vous appartient, même par-delà votre décès. Vous pouvez choisir de le confier à la science pour participer à la recherche. Ou alors vous tenez à préserver son intégrité. Dans les deux cas, vous avez des démarches à anticiper.",
  path: '/don',
  internpath: '/don',
  unique: true
}, {
  doctype: _index.DOCTYPE_CONTACTS,
  display: 'Mes Proches Référents',
  excerpt: "Vous désignez ceux qui auront accès à vos informations après votre décès. Ils bénéficieront de votre sens des responsabilités et de la mise en ordre de vos « affaires ». Ces proches choisis seront chargés de faire connaître et appliquer vos directives quant à l'organisation de vos obsèques. ",
  path: '/funerals/works',
  internpath: '/relation',
  unique: true
}];

var Row = function Row(props) {

  var button = props.unique ? props.check ? "Modifier" : "Compléter" : props.check ? "Ajouter un nouveau" : "Compléter";

  return _react2.default.createElement(
    'div',
    { id: props.id },
    _react2.default.createElement(
      'div',
      { onClick: function onClick(e) {
          return props.onAdd && props.onAdd(e);
        }, className: (0, _classnames2.default)(_FuneralList2.default.row) },
      _react2.default.createElement(
        'div',
        { className: _FuneralList2.default.name },
        _react2.default.createElement(
          'div',
          null,
          props.title,
          ' ',
          _react2.default.createElement('img', { className: _Navigation2.default.chevron, src: 'public/media/chevronpurple.svg' })
        ),
        _react2.default.createElement(
          'div',
          { className: _FuneralList2.default.excerpt },
          props.excerpt
        )
      ),
      _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)(_FuneralList2.default.check, _FuneralList2.default.checked, _defineProperty({}, _FuneralList2.default.checked, props.check)) },
        props.check && _react2.default.createElement('img', { className: _FuneralList2.default.done, src: 'public/media/done.png' }),
        !props.check && _react2.default.createElement('img', { className: _FuneralList2.default.done, src: 'public/media/waiting.png' })
      )
    ),
    _react2.default.createElement('div', { className: _FuneralList2.default.separator })
  );
};
// FuneralList page component

var FuneralList = function (_React$Component) {
  _inherits(FuneralList, _React$Component);

  function FuneralList(props) {
    _classCallCheck(this, FuneralList);

    var _this = _possibleConstructorReturn(this, (FuneralList.__proto__ || Object.getPrototypeOf(FuneralList)).call(this, props));

    _this.fileTypes = (0, _fileTypes.getFileTypes)();

    _this.state = {
      open: false,
      current: '',
      hiddenType: '',
      search: '',
      typeGroup: [],
      customTypeGroup: [],
      TypeOpen: false,
      InfoOpen: false,
      infoHeader: "",
      infoText: "",
      firstname: "",
      formType: "",
      newTypeType: "",
      lastname: "",
      link: ''
    };

    (0, _tools.getDataElements)(_constants.DOCTYPE_HOMEDATA).then(function (res) {
      console.log(res);
      if (res.length > 0) {
        console.log(res);
        var link = '/data/homedata/' + res[0]._id;
        _this.setState({ firstname: res[0].firstname,
          lastname: res[0].name, link: link });
      }
    });

    (0, _meta.getCustomContactMeta)().then(function (result) {
      _this.setCustomTypeGroup(result[0].value);

      (0, _tools.getDataElements)(_index.DOCTYPE_F_CUSTOMCONTACTS).then(function (res) {
        if (res.length > 0) {
          (function () {
            var type = result[0].value;

            var _loop = function _loop(n) {
              var exist = _lodash2.default.find(res, function (t) {
                return t.type === type[0].types[n].name;
              });
              if (exist) {
                type[0].types[n].checked = true;
                type[0].types[n]._id = exist._id;
              }
            };

            for (var n in type[0].types) {
              _loop(n);
            }
            _this.setCustomTypeGroup(type);
          })();
        }
        console.log(res);
      });
    });

    (0, _meta.getMeta)().then(function (result) {
      _this.setTypeGroup(result[0].value);
      console.log(result[0].value);

      (0, _tools.getDataElements)(_index.DOCTYPE_F_CONTACTS).then(function (res) {
        if (res.length > 0) {
          (function () {
            var type = result[0].value;

            var _loop2 = function _loop2(n) {
              var exist = _lodash2.default.find(res, function (t) {
                return t.type === type[0].types[n].name;
              });
              if (exist) {
                type[0].types[n].checked = true;
                type[0].types[n]._id = exist._id;
              }
            };

            for (var n in type[0].types) {
              _loop2(n);
            }
            _this.setTypeGroup(type);
          })();
        }
        console.log(res);
      });
    });
    return _this;
  }

  _createClass(FuneralList, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.computeWidth(this.props);
    }
  }, {
    key: 'setTypeGroup',
    value: function setTypeGroup(typeGroup) {
      this.setState({ typeGroup: typeGroup });
      this.render();
    }
  }, {
    key: 'setCustomTypeGroup',
    value: function setCustomTypeGroup(typeGroup) {
      this.setState({ customTypeGroup: typeGroup });
      this.render();
    }
  }, {
    key: 'search_array',
    value: function search_array(valuetofind) {
      for (var i = 0; i < _types2.default.length; i++) {
        if (_types2.default[i].type == valuetofind) {
          return _types2.default[i].delay;
        }
      }
      return "DANS LES 6 MOIS";
    }
  }, {
    key: 'addTypeGroup',
    value: function addTypeGroup() {
      var _this2 = this;

      console.log(_types2.default);
      var newDocType = {
        name: this.state.newTypeName,
        excerpt: this.state.newTypeExcerpt,
        type: this.state.newTypeType,
        key: this.state.newTypeType,
        delay: this.search_array(this.state.newTypeType),
        doctype: _index.DOCTYPE_F_CUSTOMCONTACTS
      };

      console.log(newDocType);

      (0, _meta.getCustomContactMeta)().then(function (result) {
        var newDoc = result;
        newDoc[0].value[0].types.push(newDocType);
        cozy.client.data.update(_index.DOCTYPE_META, result[0], newDoc[0]).then(function (newresult) {
          var item = (0, _dataFields.getInfosFromDoctype)(newDocType.doctype);
          _this2.setState({ TypeOpen: false, current: item.slug, open: true, formType: newDocType.type, hiddenType: newDocType.name });
          _this2.setCustomTypeGroup(newresult.value);
        });
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      this.computeWidth(newProps);
    }
  }, {
    key: 'computeWidth',
    value: function computeWidth(props) {
      this.width = 0;
      var notPersoFileTypes = this.fileTypes.filter(function (f) {
        return !f.perso;
      });
      var notPersoUsed = props.usedType.filter(function (elem) {
        return _lodash2.default.find(notPersoFileTypes, function (f) {
          return f.key === elem.type;
        }) === undefined;
      });
      var totalUsed = notPersoUsed.length + props.dataCreated.length;
      var totalTypes = notPersoFileTypes.length + Doctypes.length;
      this.width = totalUsed / totalTypes * 100;
    }
  }, {
    key: 'clickDocument',
    value: function clickDocument(key, location) {
      this.props.onFileClick(location, key);
      this.setState({ open: true });
    }
  }, {
    key: 'clickOnWill',
    value: function clickOnWill(data) {
      var item = (0, _dataFields.getInfosFromDoctype)(data.doctype);
      this.setState({ current: item.slug, open: true });
    }
  }, {
    key: 'clickOnContacts',
    value: function clickOnContacts() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      console.log(data);
      var item = (0, _dataFields.getInfosFromDoctype)(_index.DOCTYPE_F_CONTACTS);
      this.setState({ current: item.slug, formType: data.type, open: true, hiddenType: data.name });
    }
  }, {
    key: 'clickOnCustomContacts',
    value: function clickOnCustomContacts() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      var item = (0, _dataFields.getInfosFromDoctype)(_index.DOCTYPE_F_CUSTOMCONTACTS);
      this.setState({ current: item.slug, formType: data.type, open: true, hiddenType: data.name });
    }
  }, {
    key: 'clickOnAddContacts',
    value: function clickOnAddContacts() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      this.setState({ TypeOpen: true });
    }
  }, {
    key: 'clickOninfo',
    value: function clickOninfo(e) {
      var header = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var text = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

      e.preventDefault();
      e.stopPropagation();
      this.setState({ InfoOpen: true, infoText: text, infoHeader: header });
    }
  }, {
    key: 'profilePreview',
    value: function profilePreview() {
      var _this3 = this;

      cozy.client.fetchJSON('POST', '/permissions?codes=partage', {
        data: {
          type: 'io.cozy.permissions',
          attributes: {
            permissions: {
              "settings": {
                "description": "Required by the cozy-bar display Claudy and to know which applications are coming soon",
                "type": "io.cozy.settings",
                "verbs": ["ALL"]
              },
              "data-funerals-lastwill": {
                "description": "App required data Last Will access",
                "type": "com.empreinte.FLastWill",
                "verbs": ["ALL"]
              },
              "data-funerals-contacts": {
                "description": "App required data Last Will access",
                "type": "com.empreinte.Fcontacts",
                "verbs": ["ALL"]
              },
              "data-funerals-custom-contacts": {
                "description": "App required data Last Will access",
                "type": "com.empreinte.Fcustomcontacts",
                "verbs": ["ALL"]
              },
              "data-homeData": {
                "description": "App required data homeData access",
                "type": "com.empreinte.homeData",
                "verbs": ["ALL"]
              },
              "contacts": {
                "description": "App required contacts access",
                "type": "com.empreinte.contacts",
                "verbs": ["ALL"]
              },
              "metas": {
                "description": "App required metas access",
                "type": "com.empreinte.meta",
                "verbs": ["ALL"]
              },
              "contact": {
                "description": "App required contact access",
                "type": "io.cozy.contacts",
                "verbs": ["ALL"]
              }
            }
          }
        }
      }).then(function (result) {
        _this3.sharing = result.attributes.codes['partage'];
        console.log(_this3.sharing);

        window.open('/public?sharecode=' + _this3.sharing + '#/', '_blank');
      });
    }

    // render

  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var add = _react2.default.createElement(
        'button',
        { onClick: function onClick() {
            return _this4.clickOnAddContacts();
          }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default) },
        _react2.default.createElement('img', { className: _FuneralList2.default.add, src: 'public/media/add.svg' }),
        'AJOUTER UN CONTACT'
      );
      return _react2.default.createElement(
        _Page2.default,
        { title: 'Pr\xE9parer mes obs\xE8ques', subtitle: 'Ici, c\'est vous qui allez pr\xE9parer vos obs\xE8ques, pr\xE9ciser vos derni\xE8res volont\xE9s et lib\xE9rer vos intimes de devoir prendre des d\xE9cisions importantes \xE0 votre place. Vous pouvez revenir dans les rubriques autant de fois que n\xE9cessaire, prendre le temps de la r\xE9flexion. Dans cet espace personnel, vous renseignez aussi, une fois pour toutes, les fiches contacts des administrations et autres organismes auxquels vous \xEAtes li\xE9s d\'une mani\xE8re ou d\'une autre. De pr\xE9cieuses informations rassembl\xE9es ici, que vos proches n\'auront pas \xE0 chercher, ce qui leur simplifiera consid\xE9rablement la t\xE2che. ' },
        _react2.default.createElement(
          'div',
          { className: _FuneralList2.default.main },
          _react2.default.createElement(
            'div',
            { className: _FuneralList2.default.header },
            _react2.default.createElement(
              'div',
              { className: 'col-md-4' },
              _react2.default.createElement(
                'div',
                { style: { margin: -17 + 'px' }, className: 'col-md-15' },
                _react2.default.createElement('i', { className: (0, _classnames2.default)(_FuneralList2.default.icon, "ion-ios-person") }),
                _react2.default.createElement(
                  'span',
                  { style: { margin: -5 + 'px', fontSize: 17 + 'px' } },
                  this.state.firstname,
                  ' ',
                  this.state.lastname
                )
              )
            ),
            _react2.default.createElement(
              'div',
              { className: 'col-md-4' },
              _react2.default.createElement(
                'a',
                { className: _FuneralList2.default.profileLink, onClick: function onClick() {
                    return _this4.profilePreview();
                  } },
                'Aper\xE7u de votre profil'
              )
            ),
            _react2.default.createElement(
              'div',
              { className: 'col-md-4' },
              _react2.default.createElement(
                _reactRouterDom.Link,
                { className: _FuneralList2.default.profileLink, to: this.state.link },
                'Compl\xE9ter votre fiche info'
              )
            )
          ),
          _react2.default.createElement('div', { className: _FuneralList2.default.separator }),
          _react2.default.createElement(
            'div',
            { className: _FuneralList2.default.entries },
            _react2.default.createElement(
              'h3',
              { className: _FuneralList2.default.titleHome },
              'Mes choix personnels'
            ),
            _react2.default.createElement(
              'p',
              { className: _FuneralList2.default.introFuneral },
              'Pr\xE9parer ses obs\xE8ques, c\'est tout d\'abord faire conna\xEEtre ses choix pour apr\xE8s son d\xE9c\xE8s. Des d\xE9cisions qui vous appartiennent en propre. En les mentionnant ici, vous \xEAtes assur\xE9 de leur transmission directe au(x) proche(s) r\xE9f\xE9rent(s) que vous aurez choisi(s) et qui seront charg\xE9(s) de les faire appliquer.'
            ),
            _react2.default.createElement(
              'ul',
              { className: _FuneralList2.default.list },
              Doctypes.map(function (item, key) {
                var checked = _lodash2.default.find(_this4.props.dataCreated, function (t) {
                  return t.doctype === item.doctype;
                });
                return _react2.default.createElement(
                  'li',
                  { key: key },
                  _react2.default.createElement(Row, { title: item.display, excerpt: item.excerpt, check: checked, unique: item.unique,
                    onAdd: function onAdd(e) {
                      if (item.unique && checked) {
                        (0, _tools.getDataElements)(item.doctype).then(function (res) {
                          if (res.length > 0) {
                            _this4.props.history.push('/data/' + item.slug + '/' + res[0]._id);
                          }
                        });
                      } else if (item.internpath) {
                        _this4.props.history.push(item.internpath);
                      } else if (typeof item.internModal != "undefined" && item.internModal.text != "") {
                        _this4.clickOninfo(e, item.display, item.internModal.text);
                      } else {
                        _this4.clickOnWill(item);
                      }
                    } })
                );
              })
            ),
            _react2.default.createElement(
              'div',
              { className: _FuneralList2.default.rowAd },
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.firstTitle },
                'Service'
              ),
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.secondTitle },
                'Choix du prestataire fun\xE9raire'
              ),
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.Adtext },
                'Ce service vous permet de g\xE9olocaliser les prestataires fun\xE9raires, faire des demandes de devis, stocker le devis retenu.'
              ),
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.Adlink },
                _react2.default.createElement(
                  _reactRouterDom.Link,
                  { to: '/prestataire' },
                  'EN SAVOIR +'
                )
              )
            ),
            _react2.default.createElement('div', { className: _FuneralList2.default.separator }),
            _react2.default.createElement(
              'div',
              { className: _FuneralList2.default.rowAd },
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.firstTitle },
                'Service MAIF'
              ),
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.secondTitle },
                'Assurance obs\xE8ques Sollicitudes'
              ),
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.Adtext },
                'Le contrat obs\xE8ques Sollicitudes de la MAIF : des solutions pour pr\xE9parer vos obs\xE8ques dans les meilleures conditions pour vous et pour vos proches.'
              ),
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.AdlinkObseque },
                _react2.default.createElement(
                  'a',
                  { href: 'https://www.maif.fr/particuliers/sante-prevoyance/assurance-obseque/assurance-obseques.html', target: '_blank' },
                  'EN SAVOIR >'
                )
              )
            ),
            _react2.default.createElement('div', { className: _FuneralList2.default.separator }),
            _react2.default.createElement(
              'div',
              { className: _FuneralList2.default.sectionSearch },
              _react2.default.createElement(
                'h3',
                { className: _FuneralList2.default.titleHome },
                'Mes contacts administratifs'
              ),
              add
            ),
            _react2.default.createElement(
              'div',
              { className: _FuneralList2.default.introContact },
              _react2.default.createElement(
                'p',
                { className: _FuneralList2.default.introFuneral },
                'Nous sommes tous li\xE9s \xE0 une administration. Notre lieu d\'habitation, nos sources de revenus, nos activit\xE9s... nous associent \xE0 un service, une organisation. Chacun doit \xEAtre pr\xE9venu d\'un d\xE9c\xE8s ne serait-ce que pour d\xE9clencher des proc\xE9dures. Remplir ces formulaires en amont, une fois pour toutes, simplifiera les d\xE9marches de vos proches et acc\xE9l\xE8rera le r\xE8glement des droits.'
              )
            ),
            _react2.default.createElement(
              'ul',
              { className: _FuneralList2.default.list },
              this.state.typeGroup.map(function (group, key) {
                var docs = group.types;
                if (docs && docs.length > 0) {
                  return _react2.default.createElement(
                    'li',
                    { key: key },
                    _react2.default.createElement(
                      'ul',
                      { className: _FuneralList2.default.list },
                      docs.map(function (item, key) {
                        return _react2.default.createElement(
                          'li',
                          { key: key },
                          _react2.default.createElement(Row, { id: item.slug, title: item.name, excerpt: item.excerpt, check: item.checked, unique: true,
                            onAdd: function onAdd(e) {
                              if (item.checked) {
                                _this4.props.history.push('/data/fcontacts/' + item._id);
                              } else {
                                _this4.clickOnContacts(item);
                              }
                            } })
                        );
                      })
                    )
                  );
                } else {
                  return null;
                }
              }),
              this.state.customTypeGroup.map(function (group, key) {
                var docs = group.types;
                if (docs && docs.length > 0) {
                  return _react2.default.createElement(
                    'li',
                    { key: key },
                    _react2.default.createElement(
                      'ul',
                      { className: _FuneralList2.default.list },
                      docs.map(function (item, key) {
                        return _react2.default.createElement(
                          'li',
                          { key: key },
                          _react2.default.createElement(Row, { title: item.name, excerpt: item.excerpt, check: item.checked, unique: true,
                            onAdd: function onAdd(e) {
                              if (item.checked) {
                                _this4.props.history.push('/data/fcustomcontacts/' + item._id);
                              } else {
                                _this4.clickOnCustomContacts(item);
                              }
                            } })
                        );
                      })
                    )
                  );
                } else {
                  return null;
                }
              })
            )
          )
        ),
        _react2.default.createElement(
          _reactPortal2.default,
          { closeOnOutsideClick: false, isOpened: this.state.open, closeOnEsc: true, onClose: function onClose() {
              return _this4.setState({ open: false });
            } },
          _react2.default.createElement(
            _Modal2.default,
            null,
            _react2.default.createElement(_DataForm2.default, {
              closeModal: this.props.history.replace,
              slug: this.state.current,
              formType: this.state.formType,
              hiddenType: this.state.hiddenType,
              close: function close() {
                _this4.setState({ open: false });
              }
            })
          )
        ),
        _react2.default.createElement(
          _reactPortal2.default,
          { closeOnOutsideClick: false, isOpened: this.state.InfoOpen, closeOnEsc: true, onClose: function onClose() {
              return _this4.setState({ TypeOpen: false });
            } },
          _react2.default.createElement(
            _Modal2.default,
            null,
            _react2.default.createElement(
              'div',
              { className: _FuneralList2.default.ModalMain },
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.edition, onClick: function onClick(e) {
                    return e.stopPropagation();
                  } },
                _react2.default.createElement(
                  'div',
                  { className: _FuneralList2.default.header },
                  _react2.default.createElement(
                    'div',
                    null,
                    _react2.default.createElement(
                      'h1',
                      null,
                      this.state.infoHeader
                    )
                  )
                ),
                _react2.default.createElement(
                  'form',
                  { className: _FuneralList2.default.content },
                  _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.row },
                    this.state.infoText
                  )
                ),
                _react2.default.createElement(
                  'div',
                  { className: _FuneralList2.default.footer },
                  _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.footerRight },
                    _react2.default.createElement(
                      'button',
                      {
                        onClick: function onClick(e) {
                          return _this4.setState({ InfoOpen: false, infoText: '' });
                        },
                        className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.defaultLight)
                      },
                      'FERMER'
                    )
                  )
                )
              )
            )
          )
        ),
        _react2.default.createElement(
          _reactPortal2.default,
          { closeOnOutsideClick: false, isOpened: this.state.TypeOpen, closeOnEsc: true, onClose: function onClose() {
              return _this4.setState({ TypeOpen: false });
            } },
          _react2.default.createElement(
            _Modal2.default,
            null,
            _react2.default.createElement(
              'div',
              { className: _FuneralList2.default.ModalMain },
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.edition, onClick: function onClick(e) {
                    return e.stopPropagation();
                  } },
                _react2.default.createElement(
                  'div',
                  { className: _FuneralList2.default.header },
                  _react2.default.createElement(
                    'div',
                    null,
                    _react2.default.createElement(
                      'h1',
                      null,
                      'Ajouter un type de contact'
                    )
                  )
                ),
                _react2.default.createElement(
                  'form',
                  { className: _FuneralList2.default.content },
                  _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.row },
                    _react2.default.createElement(
                      'div',
                      { className: _FuneralList2.default.group },
                      _react2.default.createElement(
                        'label',
                        null,
                        'Type de contact'
                      ),
                      _react2.default.createElement(
                        'select',
                        {
                          type: 'text',
                          placeholder: 'Employeur',
                          value: this.state.newTypeType, onChange: function onChange(e) {
                            return _this4.setState({ newTypeType: e.target.value });
                          } },
                        _types2.default.map(function (item, key) {
                          if (!item.unique) return _react2.default.createElement(
                            'option',
                            { value: item.type },
                            item.name
                          );
                        })
                      )
                    )
                  ),
                  _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.row },
                    _react2.default.createElement(
                      'div',
                      { className: _FuneralList2.default.group },
                      _react2.default.createElement(
                        'label',
                        null,
                        'Nom du contact'
                      ),
                      _react2.default.createElement('input', {
                        type: 'text',
                        placeholder: 'Mairie, Medecin traitant, Banque',
                        value: this.state.newTypeName,
                        onChange: function onChange(e) {
                          return _this4.setState({ newTypeName: e.target.value });
                        } })
                    )
                  ),
                  _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.row },
                    _react2.default.createElement(
                      'div',
                      { className: _FuneralList2.default.group },
                      _react2.default.createElement(
                        'label',
                        null,
                        'Description'
                      ),
                      _react2.default.createElement('input', {
                        type: 'text',
                        placeholder: 'Courte description du contact',
                        onChange: function onChange(e) {
                          return _this4.setState({ newTypeExcerpt: e.target.value });
                        } })
                    )
                  )
                ),
                _react2.default.createElement(
                  'div',
                  { className: _FuneralList2.default.footer },
                  _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.footerRight },
                    _react2.default.createElement(
                      'button',
                      {
                        onClick: function onClick(e) {
                          return _this4.setState({ TypeOpen: false, newTypeExcerpt: '', newTypeName: '' });
                        },
                        className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.defaultLight)
                      },
                      'FERMER'
                    ),
                    _react2.default.createElement(
                      'button',
                      {
                        className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default),
                        onClick: function onClick(e) {
                          return _this4.addTypeGroup(e);
                        } },
                      'VALIDER'
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
  }]);

  return FuneralList;
}(_react2.default.Component);

exports.default = FuneralList;

/***/ }),

/***/ "./src/components/elements/Home.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _reactDownload = __webpack_require__("./node_modules/@axetroy/react-download/index.js");

var _reactDownload2 = _interopRequireDefault(_reactDownload);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Contacts = __webpack_require__("./src/styles/Contacts.scss");

var _Contacts2 = _interopRequireDefault(_Contacts);

var _Devis = __webpack_require__("./src/styles/Devis.scss");

var _Devis2 = _interopRequireDefault(_Devis);

var _Navigation = __webpack_require__("./src/styles/Navigation.scss");

var _Navigation2 = _interopRequireDefault(_Navigation);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _meta = __webpack_require__("./src/scripts/meta.js");

var _shareHome = __webpack_require__("./src/public/constants/data/shareHome.json");

var _shareHome2 = _interopRequireDefault(_shareHome);

var _tutorial = __webpack_require__("./src/store/tutorial.pdf");

var _tutorial2 = _interopRequireDefault(_tutorial);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Doctypes = [{
  doctype: _index.DOCTYPE_F_LASTWILL,
  display: 'Mes dernieres volontés',
  excerpt: 'Expliquez à vos proches vos attentes pour vos obsèques',
  path: '/funerals/lastwill',
  slug: 'lastwill',
  internpath: false,
  unique: true
}, {
  doctype: _index.DOCTYPE_CONTACTS,
  display: 'Don du corps à la science',
  excerpt: "Toutes les informations pour donner son corps à la science ou pour stipuler son refus de don d’organe.",
  path: '/don',
  internpath: '/don',
  unique: true
}, {
  doctype: _index.DOCTYPE_CONTACTS,
  display: 'Refus du don d\'organe ',
  excerpt: "Toutes les informations pour donner son corps à la science ou pour stipuler son refus de don d’organe.",
  path: '/don',
  internpath: '/don',
  unique: true
}, {
  doctype: _index.DOCTYPE_CONTACTS,
  display: 'Mes Proches Référents',
  excerpt: "Il s'agit des personnes qui auront accès à vos informations après votre décès.",
  path: '/funerals/works',
  internpath: '/relation',
  unique: true
}, {
  doctype: _index.DOCTYPE_CONTACTS,
  display: 'L\'employeur ou Pôle Emploi ',
  excerpt: "Lorem ipsum dolor sit amet",
  path: '/funerals/works',
  internpath: '/relation',
  unique: true
}];

var Row = function Row(props) {
  return _react2.default.createElement(
    'div',
    { onClick: function onClick(e) {
        return props.onAdd && props.onAdd(e);
      } },
    _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)(_FuneralList2.default.row) },
      _react2.default.createElement(
        'div',
        { className: _FuneralList2.default.name },
        _react2.default.createElement(
          'div',
          null,
          props.title,
          ' ',
          _react2.default.createElement('img', { className: _Navigation2.default.chevron, src: 'media/chevronpurple.svg' })
        ),
        _react2.default.createElement(
          'div',
          { className: _FuneralList2.default.excerpt },
          props.excerpt
        )
      )
    ),
    _react2.default.createElement('div', { className: _FuneralList2.default.separator })
  );
};
// FuneralList page component

var Home = function (_React$Component) {
  _inherits(Home, _React$Component);

  function Home(props) {
    _classCallCheck(this, Home);

    var _this = _possibleConstructorReturn(this, (Home.__proto__ || Object.getPrototypeOf(Home)).call(this, props));

    _this.fileTypes = (0, _fileTypes.getFileTypes)();
    _this.typeGroup = (0, _fileTypes.getTypesByGroup)();

    _this.state = {
      open: false,
      openOnboarding: false,
      openFirstOnboarding: false,
      current: '',
      InfoOpen: false,
      infoHeader: "",
      infoText: "",
      hiddenType: '',
      search: '',
      data: [],
      typeGroup: []
    };

    (0, _meta.getMeta)().then(function (result) {
      if (result.length === 0) {
        (0, _onboarding.markAsShown)(true).then(function (res) {
          console.log(res);
        });
      } else {
        _this.setTypeGroup(result[0].value);

        (0, _tools.getDataElements)(_index.DOCTYPE_F_CONTACTS).then(function (res) {
          if (res.length > 0) {
            (function () {
              var type = result[0].value;

              var _loop = function _loop(n) {
                var exist = _lodash2.default.find(res, function (t) {
                  return t.type === type[0].types[n].name;
                });
                if (exist) {
                  type[0].types[n].checked = true;
                  type[0].types[n]._id = exist._id;
                }
              };

              for (var n in type[0].types) {
                _loop(n);
              }
              _this.setTypeGroup(type);
            })();
          }
          console.log(res);
        });
      }
    });
    return _this;
  }

  _createClass(Home, [{
    key: 'setTypeGroup',
    value: function setTypeGroup(typeGroup) {
      this.setState({ typeGroup: typeGroup });
      this.render();
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      this.computeWidth(this.props);
      this.steps = 1;

      (0, _onboarding.isAlreadyShown)().then(function (res) {
        console.log(res);
        if (res) {
          (0, _tools.getDataElements)(_constants.DOCTYPE_HOMEDATA).then(function (res) {
            console.log(res);
            if (res.length <= 0) {
              console.log('OnBoarding');
              _this2.openFirstOnboarding();
            } else {
              console.log("CLOSE");
              return _this2.closeFirstOnboarding(true);
            }
          });
        }
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      this.computeWidth(newProps);
    }
  }, {
    key: 'computeWidth',
    value: function computeWidth(props) {
      this.width = 0;
      var notPersoFileTypes = this.fileTypes.filter(function (f) {
        return !f.perso;
      });
      var notPersoUsed = props.usedType.filter(function (elem) {
        return _lodash2.default.find(notPersoFileTypes, function (f) {
          return f.key === elem.type;
        }) === undefined;
      });
      var totalUsed = notPersoUsed.length + props.dataCreated.length;
      var totalTypes = notPersoFileTypes.length + Doctypes.length;
      this.width = totalUsed / totalTypes * 100;
    }
  }, {
    key: 'clickDocument',
    value: function clickDocument(key, location) {
      this.props.onFileClick(location, key);
      this.setState({ open: true });
    }
  }, {
    key: 'clickOnWill',
    value: function clickOnWill(data) {
      var item = (0, _dataFields.getInfosFromDoctype)(data.doctype);
      this.setState({ current: item.slug, open: true });
    }
  }, {
    key: 'closeOnboarding',
    value: function closeOnboarding() {
      this.setState({ openOnboarding: false });
      this.forceUpdate();
    }
  }, {
    key: 'openOnboarding',
    value: function openOnboarding() {
      this.setState({ openOnboarding: true });
    }
  }, {
    key: 'openFirstOnboarding',
    value: function openFirstOnboarding() {
      this.setState({ openFirstOnboarding: true });
    }
  }, {
    key: 'closeFirstOnboarding',
    value: function closeFirstOnboarding() {
      var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (init) {
        this.setState({ openFirstOnboarding: false });
      } else {
        this.setState({ openFirstOnboarding: false, openOnboarding: true });
      }
    }
  }, {
    key: 'clickOnContacts',
    value: function clickOnContacts() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      console.log(data);
      var item = (0, _dataFields.getInfosFromDoctype)(_index.DOCTYPE_F_CONTACTS);
      this.setState({ current: item.slug, formType: data.type, open: true, hiddenType: data.name });
    }
  }, {
    key: 'clickOninfo',
    value: function clickOninfo(e) {
      var header = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var text = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

      e.preventDefault();
      e.stopPropagation();
      this.setState({ InfoOpen: true, infoText: text, infoHeader: header });
    }

    // render

  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(
        _Page2.default,
        { title: 'Votre espace priv\xE9 d\xE9c\xE8s',
          subtitle: 'Bienvenue dans votre espace priv\xE9. Quel que soit son \xE2ge, on a tous dans l\'id\xE9e de laisser nos \xAB\xA0affaires en ordre\xA0\xBB, au cas o\xF9... Ici, vous avez la possibilit\xE9 de le faire en toute qui\xE9tude, \xE0 votre rythme. Commencez, interrompez-vous, reprenez plus tard. L\'outil est souple, intuitif, regorge d\u2019informations. Visitez-le \xE0 votre guise. A mesure que vous avancerez, votre r\xE9flexion sur vos derni\xE8res volont\xE9s pourra s\'affiner. Et en plus, cet espace est enti\xE8rement priv\xE9 et s\xE9curis\xE9. Il vous est r\xE9serv\xE9.' },
        _react2.default.createElement(
          'div',
          { className: _FuneralList2.default.main },
          _react2.default.createElement(
            'div',
            { className: _FuneralList2.default.entries },
            _react2.default.createElement(
              'a',
              { href: '/media/tutorial.pdf', target: '_blank', className: _Devis2.default.devisType },
              'D\xE9couvrir le service en image'
            ),
            _react2.default.createElement(
              'h3',
              { className: _FuneralList2.default.titleHome },
              'Les informations restant \xE0 compl\xE9ter'
            ),
            _react2.default.createElement(
              'p',
              { className: _FuneralList2.default.introHome },
              ' Un nombre important d\'informations  personnelles ou administratives sont \xE0 renseigner dans cet espace. Pour faciliter sa compl\xE9tude, cette rubrique restitue les informations qui ne sont pas encore renseign\xE9es.'
            ),
            this.state.typeGroup.map(function (group, key) {
              var docs = group.types;
              if (docs && docs.length > 0) {
                console.log(docs);
                return _react2.default.createElement(
                  'ul',
                  { className: _FuneralList2.default.list },
                  docs.map(function (item, key) {
                    return item.hasOwnProperty("checked") ? _react2.default.createElement('span', null) : _react2.default.createElement(
                      'li',
                      { key: key },
                      _react2.default.createElement(Row, { id: item.slug, title: item.name, excerpt: item.excerpt, check: item.checked, unique: true,
                        onAdd: function onAdd(e) {
                          if (item.checked) {
                            _this3.props.history.push('/data/fcontacts/' + item._id);
                          } else {
                            _this3.clickOnContacts(item);
                          }
                        } })
                    );
                  })
                );
              } else {
                return null;
              }
            }),
            _react2.default.createElement(
              'div',
              { className: _FuneralList2.default.rowAd },
              _react2.default.createElement('div', { className: _FuneralList2.default.firstTitle }),
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.secondTitle },
                'Portail d\'information Espace priv\xE9 D\xE9c\xE8s'
              ),
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.Adtext },
                'Visitez notre site d\'information pour anticiper au mieux vos obs\xE8ques. ',
                _react2.default.createElement('br', null),
                'D\xE9couvrez Faire Face Au D\xE9c\xE8s, le site qui met \xE0 votre disposition des informations autour du d\xE9c\xE8s, des obs\xE8ques, du deuil...'
              ),
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.Adlink },
                _react2.default.createElement(
                  'a',
                  { href: 'http://maif.mymachinery.fr', target: '_blank' },
                  'EN SAVOIR +'
                )
              )
            ),
            _react2.default.createElement('div', { className: _FuneralList2.default.separator })
          )
        ),
        _react2.default.createElement(
          _reactPortal2.default,
          { closeOnOutsideClick: false, isOpened: this.state.open, closeOnEsc: true, onClose: function onClose() {
              return _this3.setState({ open: false });
            } },
          _react2.default.createElement(
            _Modal2.default,
            null,
            _react2.default.createElement(_DataForm2.default, {
              closeModal: this.props.history.replace,
              slug: this.state.current,
              hiddenType: this.state.hiddenType,
              formType: this.state.formType,
              onboard: false,
              close: function close() {
                _this3.setState({ open: false });
              }
            })
          )
        ),
        _react2.default.createElement(
          _reactPortal2.default,
          { closeOnOutsideClick: false, isOpened: this.state.openOnboarding, closeOnEsc: true, onClose: function onClose() {
              return _this3.setState({ openOnboarding: false });
            } },
          _react2.default.createElement(
            _Modal2.default,
            null,
            _react2.default.createElement(_DataForm2.default, {
              closeModal: this.props.history.replace,
              step: this.steps,
              slug: this.state.current,
              onboard: true,
              hiddenType: this.state.hiddenType,
              close: function close() {
                _this3.setState({ openOnboarding: false });
              }
            })
          )
        ),
        _react2.default.createElement(
          _reactPortal2.default,
          { closeOnOutsideClick: false, isOpened: this.state.openFirstOnboarding, closeOnEsc: true, onClose: function onClose() {
              return _this3.setState({ openFirstOnboarding: false });
            } },
          _react2.default.createElement(
            _Modal2.default,
            null,
            _react2.default.createElement(
              'div',
              { className: _FuneralList2.default.modal, onClick: function onClick(e) {
                  return e.stopPropagation();
                } },
              _react2.default.createElement('img', { style: { width: 100 + '%' }, src: 'media/onboardinginfo.jpg', alt: '' }),
              _react2.default.createElement(
                'button',
                { onClick: function onClick() {
                    return _this3.closeFirstOnboarding();
                  }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default) },
                _react2.default.createElement('i', { className: 'ion-ios-plus-empty' }),
                'SUIVANT'
              )
            )
          )
        ),
        _react2.default.createElement(
          _reactPortal2.default,
          { closeOnOutsideClick: false, isOpened: this.state.InfoOpen, closeOnEsc: true, onClose: function onClose() {
              return _this3.setState({ TypeOpen: false });
            } },
          _react2.default.createElement(
            _Modal2.default,
            null,
            _react2.default.createElement(
              'div',
              { className: _FuneralList2.default.ModalMain },
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.edition, onClick: function onClick(e) {
                    return e.stopPropagation();
                  } },
                _react2.default.createElement(
                  'div',
                  { className: _FuneralList2.default.header },
                  _react2.default.createElement(
                    'div',
                    null,
                    _react2.default.createElement(
                      'h1',
                      null,
                      this.state.infoHeader
                    )
                  )
                ),
                _react2.default.createElement(
                  'form',
                  { className: _FuneralList2.default.content },
                  _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.row },
                    this.state.infoText
                  )
                ),
                _react2.default.createElement(
                  'div',
                  { className: _FuneralList2.default.footer },
                  _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.footerRight },
                    _react2.default.createElement(
                      'button',
                      {
                        onClick: function onClick(e) {
                          return _this3.setState({ InfoOpen: false, infoText: '' });
                        },
                        className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.defaultLight)
                      },
                      'FERMER'
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
  }]);

  return Home;
}(_react2.default.Component);

exports.default = Home;

/***/ }),

/***/ "./src/components/elements/Loader.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Loader = undefined;

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _Loader = __webpack_require__("./src/styles/Loader.scss");

var _Loader2 = _interopRequireDefault(_Loader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Loader = exports.Loader = function Loader(_ref) {
    var display = _ref.display;

    if (display === undefined) display = true;

    if (display) return _react2.default.createElement(
        'div',
        { className: _Loader2.default.loader },
        _react2.default.createElement('img', { src: '/images/progress.gif', alt: '' })
    );else return null;
};

exports.default = Loader;

/***/ }),

/***/ "./src/components/elements/Localisation.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Prestataire = __webpack_require__("./src/styles/Prestataire.scss");

var _Prestataire2 = _interopRequireDefault(_Prestataire);

var _Localisation = __webpack_require__("./src/styles/Localisation.scss");

var _Localisation2 = _interopRequireDefault(_Localisation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Data = function Data(props) {
  console.log(props.open_hours);
  return _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(
      'div',
      { className: _Localisation2.default.row },
      _react2.default.createElement(
        'div',
        { className: _Localisation2.default.name },
        _react2.default.createElement(
          'div',
          null,
          props.name
        )
      )
    ),
    _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)(_FuneralList2.default.row) },
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { className: _Localisation2.default.dataAdress },
          props.formatted_address
        ),
        _react2.default.createElement(
          'div',
          { className: _Localisation2.default.dataOpening },
          ' ',
          props.open_hours == true ? "Ouvert maintenant" : "Fermé",
          ' '
        )
      )
    ),
    _react2.default.createElement('div', { className: _FuneralList2.default.separator })
  );
};

var Localisation = function (_React$Component) {
  _inherits(Localisation, _React$Component);

  function Localisation(props) {
    _classCallCheck(this, Localisation);

    var _this = _possibleConstructorReturn(this, (Localisation.__proto__ || Object.getPrototypeOf(Localisation)).call(this, props));

    _this.state = {
      open: false,
      current: '',
      hiddenType: '',
      search: '',
      typeGroup: [],
      customTypeGroup: [],
      TypeOpen: false,
      InfoOpen: false,
      infoHeader: "",
      infoText: "",
      firstname: "",
      formType: "",
      newTypeType: "",
      lastname: "",
      link: '',
      zoom: 11,
      currentMap: {},
      dataAdress: {}
    };
    _this.initMap = _this.initMap.bind(_this);
    _this.searchBox = _this.searchBox.bind(_this);
    return _this;
  }

  _createClass(Localisation, [{
    key: 'loadJS',
    value: function loadJS(src) {
      var script = window.document.createElement("script");
      script.src = src;
      script.async = true;
      document.body.insertBefore(script, document.body.lastChild);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.initMap = this.initMap;
      window.loadJS = this.loadJS;
      window.searchBox = this.searchBox;
      loadJS('https://maps.googleapis.com/maps/api/js?key=AIzaSyCu4Xg-71dwXAhpvwe3Vhqqj51NmWkmQtU&callback=initMap&libraries=places');
    }
  }, {
    key: 'initMap',
    value: function initMap() {
      console.log("Init map");
      var map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: -34.397, lng: 150.644 },
        zoom: 11
      });
      this.setState({ currentMap: map });
      var infoWindow = new google.maps.InfoWindow();

      // Try HTML5 geolocation.
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
          var pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };

          infoWindow.setPosition(pos);
          infoWindow.setContent('Location found.');
          infoWindow.open(map);
          map.setCenter(pos);
          searchBox(map);
        }, function () {
          //   handleLocationError(true, infoWindow, map.getCenter());
        });
      } else {
        // Browser doesn't support Geolocation
        // handleLocationError(false, infoWindow, map.getCenter());
      }
    }
  }, {
    key: 'searchBox',
    value: function searchBox(map) {
      var _this2 = this;

      map = this.state.currentMap;
      var input = document.getElementById('input');
      var searchBox = new google.maps.places.SearchBox(input);
      // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
      map.addListener('bounds_changed', function () {
        searchBox.setBounds(map.getBounds());
      });
      var markers = [];
      searchBox.addListener('places_changed', function () {
        var places = searchBox.getPlaces();
        console.log(places);
        _this2.setState({ dataAdress: places });
        if (places.length == 0) {
          return;
        }

        markers.forEach(function (marker) {
          marker.setMap(null);
        });
        markers = [];

        var bounds = new google.maps.LatLngBounds();
        places.forEach(function (place) {
          if (!place.geometry) {
            console.log("Returned place contains no geometry");
            return;
          }
          var icon = {
            url: "/media/marqueur.png",
            size: new google.maps.Size(71, 71),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(17, 34),
            scaledSize: new google.maps.Size(25, 25)
          };

          markers.push(new google.maps.Marker({
            map: map,
            icon: icon,
            title: place.name,
            position: place.geometry.location
          }));

          if (place.geometry.viewport) {
            bounds.union(place.geometry.viewport);
          } else {
            bounds.extend(place.geometry.location);
          }
        });
        map.fitBounds(bounds);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var allData = this.state.dataAdress;
      return _react2.default.createElement(
        _Page2.default,
        { title: 'Pr\xE9parer mes obs\xE8ques', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles \xE0 vos proches. ' },
        _react2.default.createElement(
          'div',
          { className: _FuneralList2.default.main },
          _react2.default.createElement(
            'div',
            { className: _FuneralList2.default.header },
            _react2.default.createElement(
              'div',
              { className: _Prestataire2.default.titlePresta },
              _react2.default.createElement(
                'h3',
                null,
                'G\xE9o-localisation de votre prestataire fun\xE9raire'
              )
            ),
            _react2.default.createElement(
              'div',
              { className: _Localisation2.default.contentMap },
              _react2.default.createElement(
                'div',
                { className: _Localisation2.default.right },
                _react2.default.createElement('div', _defineProperty({ className: _Localisation2.default.map, id: 'map' }, 'className', _Localisation2.default.map))
              ),
              _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement('input', { onBlur: this.searchBox, id: 'input', defaultValue: 'pompes funebres generales (pfg)', className: _Localisation2.default.controls, type: 'text' }),
                _react2.default.createElement(
                  'div',
                  { className: _Localisation2.default.printedAddress },
                  Object.keys(allData).length === 0 && allData.constructor === Object ? _react2.default.createElement('div', null) : this.state.dataAdress.map(function (item, key) {
                    console.log(item.opening_hours.open_now);
                    return _react2.default.createElement(Data, { name: item.name, formatted_address: item.formatted_address, open_hours: item.opening_hours.open_now });
                  })
                )
              )
            )
          )
        )
      );
    }
  }]);

  return Localisation;
}(_react2.default.Component);

exports.default = Localisation;

/***/ }),

/***/ "./src/components/elements/Navigation.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CustomLink = exports.Navigation = undefined;

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Navigation = __webpack_require__("./src/styles/Navigation.scss");

var _Navigation2 = _interopRequireDefault(_Navigation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Navigation = exports.Navigation = function Navigation(props) {
    return _react2.default.createElement(
        'nav',
        { className: _Navigation2.default.main },
        _react2.default.createElement(
            'div',
            { className: _Navigation2.default.nav },
            _react2.default.createElement(
                'div',
                { className: _Navigation2.default.divLogo },
                _react2.default.createElement('img', { className: _Navigation2.default.logoMaif, src: 'media/maiflogo.svg' }),
                _react2.default.createElement(
                    'h4',
                    null,
                    ' Faire face au d\xE9c\xE8s '
                )
            ),
            _react2.default.createElement(
                'ul',
                { className: _Navigation2.default.list },
                _react2.default.createElement(
                    'li',
                    { className: _Navigation2.default.button },
                    _react2.default.createElement(
                        ActiveLink,
                        { to: '/home', activeClassName: _Navigation2.default.active, title: 'Accueil' },
                        _react2.default.createElement('img', { className: _Navigation2.default.chevron, src: 'media/chevronpurple.svg' }),
                        ' Accueil'
                    )
                ),
                _react2.default.createElement(
                    'li',
                    { className: _Navigation2.default.button },
                    _react2.default.createElement(
                        ActiveLink,
                        { to: '/funerals', activeClassName: _Navigation2.default.active, title: 'Pr\xE9parer mes Obs\xE8ques' },
                        _react2.default.createElement('img', { className: _Navigation2.default.chevron, src: 'media/chevronpurple.svg' }),
                        ' Pr\xE9parer mes Obs\xE8ques'
                    )
                ),
                _react2.default.createElement(
                    'li',
                    { className: _Navigation2.default.button },
                    _react2.default.createElement(
                        ActiveLink,
                        { to: '/relation', activeClassName: _Navigation2.default.active, title: 'Mes Proches' },
                        _react2.default.createElement('img', { className: _Navigation2.default.chevron, src: 'media/chevronpurple.svg' }),
                        ' Mes Proches'
                    )
                ),
                _react2.default.createElement(
                    'li',
                    { className: _Navigation2.default.button },
                    _react2.default.createElement(
                        ActiveLink,
                        { to: '/assistances', activeClassName: _Navigation2.default.active, title: 'Services MAIF' },
                        _react2.default.createElement('img', { className: _Navigation2.default.chevron, src: 'media/chevronpurple.svg' }),
                        ' Services MAIF'
                    )
                )
            ),
            _react2.default.createElement('hr', { className: _Navigation2.default.seperator }),
            _react2.default.createElement(
                'ul',
                { className: _Navigation2.default.list },
                _react2.default.createElement(
                    'li',
                    { className: _Navigation2.default.help },
                    _react2.default.createElement(
                        'p',
                        null,
                        'AIDES'
                    )
                ),
                _react2.default.createElement(
                    'li',
                    { className: _Navigation2.default.button },
                    _react2.default.createElement(
                        ActiveLink,
                        { to: '/contact', activeClassName: _Navigation2.default.active, title: 'Contact' },
                        _react2.default.createElement('img', { className: _Navigation2.default.chevron, src: 'media/chevronpurple.svg' }),
                        ' Contact'
                    )
                )
            )
        ),
        _react2.default.createElement('hr', { className: _Navigation2.default.seperator })
    );
};

var CustomLink = exports.CustomLink = function CustomLink(props) {
    var open = function open(e) {
        e.preventDefault();
        if (props.onClick) props.onClick();
        props.history.push(props.to);
    };

    var router = props.router,
        location = props.location,
        to = props.to,
        activeClassName = props.activeClassName,
        children = props.children,
        title = props.title;


    var active = location.pathname.indexOf(to) === 0;

    return _react2.default.createElement(
        'a',
        { className: active && activeClassName ? activeClassName : undefined, onClick: function onClick(e) {
                return open(e);
            }, title: title },
        children
    );
};

var ActiveLink = (0, _reactRouterDom.withRouter)(CustomLink);

exports.default = Navigation;

/***/ }),

/***/ "./src/components/elements/Page.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Page = undefined;

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _Page = __webpack_require__("./src/styles/Page.scss");

var _Page2 = _interopRequireDefault(_Page);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Page = exports.Page = function Page(_ref) {
    var children = _ref.children,
        actions = _ref.actions,
        options = _ref.options,
        title = _ref.title,
        subtitle = _ref.subtitle,
        onBackPress = _ref.onBackPress,
        flex = _ref.flex,
        firstP = _ref.firstP;

    return _react2.default.createElement(
        'section',
        { className: (0, _classnames2.default)(_Page2.default.main, _defineProperty({}, _Page2.default.flex, flex)) },
        _react2.default.createElement(
            'div',
            { className: _Page2.default.header },
            _react2.default.createElement(
                'div',
                { className: _Page2.default.row1 },
                _react2.default.createElement(
                    'h1',
                    { className: _Page2.default.title },
                    title
                ),
                onBackPress && _react2.default.createElement(
                    'button',
                    { onClick: onBackPress, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable, _Page2.default.back) },
                    '\u2190'
                )
            ),
            _react2.default.createElement(
                'div',
                { className: _Page2.default.row2 },
                _react2.default.createElement(
                    'h2',
                    { className: _Page2.default.subtitle },
                    subtitle || ' '
                )
            ),
            _react2.default.createElement(
                'div',
                { className: _Page2.default.row2 },
                _react2.default.createElement(
                    'h3',
                    { className: _Page2.default.titlePage },
                    firstP || ' '
                ),
                _react2.default.createElement(
                    'ul',
                    { className: _Page2.default.actions },
                    actions && actions.map(function (item, key) {
                        return _react2.default.createElement(
                            'li',
                            { key: key },
                            item
                        );
                    })
                ),
                options && _react2.default.createElement(
                    'ul',
                    { className: _Page2.default.options },
                    options.map(function (item, key) {
                        return _react2.default.createElement(
                            'li',
                            { key: key },
                            item
                        );
                    })
                )
            )
        ),
        _react2.default.createElement(
            'div',
            { className: (0, _classnames2.default)(_Page2.default.content, _defineProperty({}, _Page2.default.flex, flex)) },
            children
        )
    );
};

exports.default = Page;

/***/ }),

/***/ "./src/components/elements/Preferences.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _Preferences = __webpack_require__("./src/styles/Preferences.scss");

var _Preferences2 = _interopRequireDefault(_Preferences);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _ResetHombook = __webpack_require__("./src/scripts/ResetHombook.js");

var _ConfirmModal = __webpack_require__("./src/components/modals/ConfirmModal.jsx");

var _ConfirmModal2 = _interopRequireDefault(_ConfirmModal);

var _confirm = __webpack_require__("./src/scripts/confirm.js");

var _confirm2 = _interopRequireDefault(_confirm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// import "./Preferences.scss"


var modal = _react2.default.createElement(
    _ConfirmModal2.default,
    null,
    _react2.default.createElement(
        'p',
        null,
        '\xCAtes-vous s\xFBr de vouloir r\xE9initialiser votre Homebook ?',
        _react2.default.createElement('br', null),
        'Toutes donn\xE9es sera perdu.'
    )
);

var Preferences = function (_Component) {
    _inherits(Preferences, _Component);

    function Preferences(props, context) {
        _classCallCheck(this, Preferences);

        var _this = _possibleConstructorReturn(this, (Preferences.__proto__ || Object.getPrototypeOf(Preferences)).call(this, props, context));

        _this.state = {
            importerDrag: false,
            exportLoad: false,
            importLoad: false,
            resetOnboardingLoad: false,
            resetHomebookLoad: false
        };
        return _this;
    }

    _createClass(Preferences, [{
        key: 'resetHomebook',
        value: function resetHomebook() {
            var _this2 = this;

            if (this.state.resetHomebookLoad) return;
            (0, _confirm2.default)(modal).then(function () {
                _this2.setState({ resetHomebookLoad: true });
                return (0, _ResetHombook.resetHomebook)();
            }).then(function () {
                setTimeout(function () {
                    window.location.href = '/';
                }, 2000);
            }).catch(function (err) {});
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            return _react2.default.createElement(
                _Page2.default,
                { title: 'Pr\xE9f\xE9rences' },
                "development" === 'development' && _react2.default.createElement(
                    'article',
                    null,
                    _react2.default.createElement(
                        'h2',
                        { className: _Preferences2.default.title },
                        'Reset de Homebook'
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _Preferences2.default.article },
                        _react2.default.createElement(
                            'p',
                            null,
                            'Attention supprime l\'int\xE9gralit\xE9 des informations de Homebook'
                        ),
                        _react2.default.createElement(
                            'button',
                            { className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.assertive, _defineProperty({}, _Preferences2.default.load, this.state.resetHomebookLoad)),
                                onClick: function onClick() {
                                    return _this3.resetHomebook();
                                },
                                disabled: this.state.resetHomebookLoad },
                            _react2.default.createElement('i', { className: 'ion-ios-refresh-outline' }),
                            'Reset Homebook'
                        )
                    )
                )
            );
        }
    }]);

    return Preferences;
}(_react.Component);

exports.default = Preferences;

/***/ }),

/***/ "./src/components/elements/Prestataire.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Prestataire = __webpack_require__("./src/styles/Prestataire.scss");

var _Prestataire2 = _interopRequireDefault(_Prestataire);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _reactTooltip = __webpack_require__("./node_modules/react-tooltip/dist/index.js");

var _reactTooltip2 = _interopRequireDefault(_reactTooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Prestataire = function (_React$Component) {
    _inherits(Prestataire, _React$Component);

    function Prestataire(props) {
        _classCallCheck(this, Prestataire);

        var _this = _possibleConstructorReturn(this, (Prestataire.__proto__ || Object.getPrototypeOf(Prestataire)).call(this, props));

        _this.state = {
            open: false,
            current: '',
            hiddenType: '',
            search: '',
            typeGroup: [],
            customTypeGroup: [],
            TypeOpen: false,
            InfoOpen: false,
            infoHeader: "",
            infoText: "",
            firstname: "",
            formType: "",
            newTypeType: "",
            lastname: "",
            link: ''
        };
        return _this;
    }

    _createClass(Prestataire, [{
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Pr\xE9parer mes obs\xE8ques', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles \xE0 vos proches. ' },
                _react2.default.createElement(
                    'div',
                    null,
                    'Afin de pr\xE9parer au mieux vos obs\xE8ques, vous devez choisir un professionnel des prestations dun\xE9raires. Lui seul est habilit\xE9 \xE0 faire certaines t\xE2ches comme la toilette mortuaire, le transport du corps. Contact\xE9 en amont, il suivra scrupuleusement les directives et les co\xFBts que vous aurez devis\xE9s avec lui. Une mani\xE8re de ma\xEEtriser les choses et de d\xE9charger vos proches qui n\'auront qu\'\xE0 le pr\xE9venir afin de d\xE9clencher son intervention.'
                ),
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        { className: _FuneralList2.default.header },
                        _react2.default.createElement(
                            'div',
                            { className: _Prestataire2.default.titlePresta },
                            _react2.default.createElement(
                                'h3',
                                null,
                                'Choix du prestataire fun\xE9raire'
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _Prestataire2.default.containerPicto },
                        _react2.default.createElement(
                            'a',
                            { href: 'https://meilleures-pompes-funebres.com/tarificateur', target: '_blank' },
                            _react2.default.createElement(
                                'div',
                                { className: _Prestataire2.default.contentCube },
                                _react2.default.createElement(_reactHoverImage2.default, {
                                    src: '/media/calculatrice-cercle.svg',
                                    hoverSrc: '/media/calculatrice-cercle.svg'
                                }),
                                _react2.default.createElement(
                                    'h4',
                                    null,
                                    '\xC9valuer le co\xFBt des obs\xE8ques'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Prestataire2.default.contentCube },
                            _react2.default.createElement(
                                _reactRouterDom.Link,
                                { to: '/localisation-funeraire' },
                                _react2.default.createElement(_reactHoverImage2.default, {
                                    src: '/media/Geoloc.svg',
                                    hoverSrc: '/media/Geoloc.svg'
                                }),
                                _react2.default.createElement(
                                    'h4',
                                    null,
                                    'G\xE9olocaliser les prestataires fun\xE9raires'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Prestataire2.default.contentCube },
                            _react2.default.createElement(
                                _reactRouterDom.Link,
                                { to: '/devis' },
                                _react2.default.createElement(_reactHoverImage2.default, {
                                    src: '/media/doc.svg',
                                    hoverSrc: '/media/doc.svg'
                                }),
                                _react2.default.createElement(
                                    'h4',
                                    null,
                                    'Stocker les devis'
                                )
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _Prestataire2.default.stepDiv },
                        _react2.default.createElement(
                            'p',
                            null,
                            'Etape 1'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _Prestataire2.default.contentStep },
                        _react2.default.createElement(
                            'a',
                            { href: 'https://meilleures-pompes-funebres.com/tarificateur', target: '_blank' },
                            _react2.default.createElement(
                                'h3',
                                null,
                                'Evaluer le co\xFBt des obs\xE8ques > '
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            null,
                            'Gr\xE2ce \xE0 notre partenaire tarificateur vous \xE9z le co\xFBt des obs\xE8ques en fonction des options choisies. vous prenez conscience des prix pratiqu\xE9s sur le march\xE9 fun\xE9raire.'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _Prestataire2.default.stepDiv },
                        _react2.default.createElement(
                            'p',
                            null,
                            'Etape 2'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _Prestataire2.default.contentStep },
                        _react2.default.createElement(
                            _reactRouterDom.Link,
                            { to: '/localisation-funeraire' },
                            _react2.default.createElement(
                                'h3',
                                null,
                                'G\xE9olocaliser les prestataires fun\xE9raires > '
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Le service de g\xE9olocalisation Google maps vous permet d\'identifier les prestataires dun\xE9raires sur la commune et le p\xE9rim\xE8tre de votre choix. Demandez des devis estimatifs aux professionnels correspondants \xE0 vos crit\xE8res g\xE9ographiques.'
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _Prestataire2.default.stepDiv },
                        _react2.default.createElement(
                            'p',
                            null,
                            'Etape 3'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _Prestataire2.default.contentStep },
                        _react2.default.createElement(
                            _reactRouterDom.Link,
                            { to: '/devis' },
                            _react2.default.createElement(
                                'h3',
                                { 'data-type': 'light', 'data-tip': 'Le prestataire choisi, vous pouvez stocker ici le devis sign\xE9. Vos proches n\'auront qu\'\xE0 le faire valoir.' },
                                'Stocker les devis > '
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Stocker ici le devis sign\xE9 avec le prestatire fun\xE9raire de votre choix.'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Prestataire;
}(_react2.default.Component);

exports.default = Prestataire;

/***/ }),

/***/ "./src/components/elements/ToolBoxOptions.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _ToolBoxOptions = __webpack_require__("./src/styles/ToolBoxOptions.scss");

var _ToolBoxOptions2 = _interopRequireDefault(_ToolBoxOptions);

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ToolBoxOptions = function (_Component) {
    _inherits(ToolBoxOptions, _Component);

    function ToolBoxOptions(props, context) {
        _classCallCheck(this, ToolBoxOptions);

        var _this = _possibleConstructorReturn(this, (ToolBoxOptions.__proto__ || Object.getPrototypeOf(ToolBoxOptions)).call(this, props, context));

        _this.state = {
            open: false
        };

        _this.intent = null;

        _this.handleOutsideMouseClick = _this.handleOutsideMouseClick.bind(_this);
        return _this;
    }

    _createClass(ToolBoxOptions, [{
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            clearTimeout(this.intent);
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            document.addEventListener('click', this.handleOutsideMouseClick);
            document.addEventListener('touchstart', this.handleOutsideMouseClick);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            document.removeEventListener('click', this.handleOutsideMouseClick);
            document.removeEventListener('touchstart', this.handleOutsideMouseClick);
        }
    }, {
        key: 'handleOutsideMouseClick',
        value: function handleOutsideMouseClick(e) {
            if (!this.state.open) return;

            if (this.refs.root.contains(e.target) || e.button && e.button !== 0) {
                return;
            }

            this.close();
        }
    }, {
        key: 'open',
        value: function open() {
            if (this.state.open) return;

            this.setState({
                open: true
            });
            this.props.onOpen && this.props.onOpen();
        }
    }, {
        key: 'close',
        value: function close() {
            if (!this.state.open) return;

            this.setState({
                open: false
            });
            this.props.onClose && this.props.onClose();
        }
    }, {
        key: 'toggle',
        value: function toggle() {
            if (this.props.disabled) return;

            if (this.state.open) this.close();else this.open();
        }
    }, {
        key: 'closeIntent',
        value: function closeIntent() {
            var _this2 = this;

            if (this.props.noAuto) return;
            this.intent = setTimeout(function () {
                return _this2.close();
            }, 100);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            return _react2.default.createElement(
                'div',
                { ref: 'root', className: _ToolBoxOptions2.default.toolBox, onClick: function onClick(e) {
                        return e.stopPropagation();
                    } },
                _react2.default.createElement(
                    'button',
                    { type: 'button', onClick: function onClick(e) {
                            return _this3.toggle();
                        }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable) },
                    _react2.default.createElement('i', { className: 'ion-more' })
                ),
                this.state.open && _react2.default.createElement(
                    'div',
                    { className: _ToolBoxOptions2.default.content, onClick: function onClick(e) {
                            return _this3.close();
                        } },
                    _react2.default.createElement('div', { className: _ToolBoxOptions2.default.triangle }),
                    this.props.children
                )
            );
        }
    }]);

    return ToolBoxOptions;
}(_react.Component);

exports.default = ToolBoxOptions;

/***/ }),

/***/ "./src/components/elements/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _constants = __webpack_require__("./src/public/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// app component
var Index = function (_React$Component) {
  _inherits(Index, _React$Component);

  function Index(props) {
    _classCallCheck(this, Index);

    var _this = _possibleConstructorReturn(this, (Index.__proto__ || Object.getPrototypeOf(Index)).call(this, props));

    props.history.push('/home');
    return _this;
  }

  // render


  _createClass(Index, [{
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return Index;
}(_react2.default.Component);

exports.default = Index;

/***/ }),

/***/ "./src/components/letter/Association.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Association = function (_React$Component) {
    _inherits(Association, _React$Component);

    function Association(props) {
        _classCallCheck(this, Association);

        var _this = _possibleConstructorReturn(this, (Association.__proto__ || Object.getPrototypeOf(Association)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '............',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(Association, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-association.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Pr\xE9venir les salari\xE9s et/ou les associations de services \xE0 domicile'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Dans le cadre d\u2019emploi direct, le d\xE9c\xE8s de l\u2019employeur met fin ',
                            _react2.default.createElement(
                                'i',
                                null,
                                'ipso facto'
                            ),
                            ' au contrat de travail qui liait celui-ci \xE0 son salari\xE9. Les h\xE9ritiers devront verser au salari\xE9 le dernier salaire et les cotisations sociales ainsi que les indemnit\xE9s auxquelles il peut pr\xE9tendre: pr\xE9avis, licenciement et indemnit\xE9s de cong\xE9s pay\xE9s. Ils devront \xE9galement fournir au salari\xE9 certains documents : certificat de travail, attestation pour P\xF4le Emploi. En cas d\u2019emploi d\u2019un salari\xE9, il convient d\u2019informer l\u2019Urssaf ou le Cesu (en cas de paiement par Ch\xE8que emploi service universel).'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'En cas d\u2019emploi direct par une association mandataire, il faut \xE9galement pr\xE9venir l\u2019association qui pr\xE9parera les documents de fin de contrat de travail (les frais de gestion restant d\xFBs seront factur\xE9s).'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'En ce qui concerne les associations prestataires de services, il s\u2019agit de les informer du d\xE9c\xE8s afin qu\u2019elles interrompent les interventions et leur demander l\u2019envoi de la derni\xE8re facture des heures effectu\xE9es, le cas \xE9ch\xE9ant, au notaire charg\xE9 de la succession'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Adresse de l\'employ\xE9(e) ou de l\'association'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 'Employ\xE9(e) ou association', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@association.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Aux salari\xE9s/associations'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Suite au d\xE9c\xE8s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', domicilit\xE9 ........................................ ',
                                _react2.default.createElement('br', null),
                                '..........................................................................................................  je proc\xE8de aux formalit\xE9s qui m\u2019incombent',
                                _react2.default.createElement('br', null)
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'A ces fins, je vous saurais gr\xE9 de : ',
                                _react2.default.createElement('br', null),
                                '- de bien vouloir arr\xEAter vos interventions pour le compte de M .......................',
                                _react2.default.createElement('br', null),
                                'en cas d\'emploi par une association mandataire,',
                                _react2.default.createElement('br', null),
                                '- de dresser un \xE9tat estimatif des sommes restant dues en cas d\'emploi direct.',
                                _react2.default.createElement('br', null),
                                'Le solde de tout compte vous parviendra dans les meilleurs d\xE9lais.',
                                _react2.default.createElement('br', null)
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mentionBanque },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Association;
}(_react2.default.Component);

exports.default = Association;

/***/ }),

/***/ "./src/components/letter/Assurance.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Assurance = function (_React$Component) {
    _inherits(Assurance, _React$Component);

    function Assurance(props) {
        _classCallCheck(this, Assurance);

        var _this = _possibleConstructorReturn(this, (Assurance.__proto__ || Object.getPrototypeOf(Assurance)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '..................................',
            faite: '..........................',
            recu: '',
            faitePar: '',
            adherant: '....................................',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(Assurance, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-assurance.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('immatriculation').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '' || document.getElementById('adherant').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    immatriculation: document.getElementById('immatriculation').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    adherant: document.getElementById('adherant').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Assurance-vie/assurance d\xE9c\xE8s'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Transf\xE9rer ou r\xE9silier les assurances habitation, responsabilit\xE9 civile et v\xE9hicule.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Obtenir le remboursement \xE9ventuel du trop-per\xE7u des primes acquitt\xE9es.'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Nom de l\'assureur'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 'Assureur', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@assurance.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Information sur le contrat'
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'n\xB0 de contrat'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'immatriculation', placeholder: '11713792', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'n\xB0 d\'adh\xE9rnet'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'adherant', placeholder: '11713792', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'A l\'assureur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Suite au d\xE9c\xE8s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ',n\xB0 d\'adh\xE9rant ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.adherant
                                ),
                                ',',
                                _react2.default.createElement('br', null),
                                'je proc\xE8de aux formalit\xE9s qui m\'incombent.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'A ces fins, je vous saurais gr\xE9 : ',
                                _react2.default.createElement('br', null),
                                '- de maintenir l\'ensemble des contrats et de les transf\xE9rer au nom de ...................',
                                _react2.default.createElement('br', null),
                                '- r\xE9silier les contrats ',
                                this.state.immatriculation,
                                _react2.default.createElement('br', null),
                                '- prendre note que l\'adresse et le mode de facturation ne changent pas,',
                                _react2.default.createElement('br', null),
                                '- adresser la facturation au nom et \xE0 l\'adresse suivante.........................',
                                _react2.default.createElement('br', null),
                                '.............................................................................................',
                                _react2.default.createElement('br', null),
                                '- cesser les pr\xE9l\xE9vements, le compte \xE9tant bloqu\xE9 dans l\'attente du r\xE9glement',
                                _react2.default.createElement('br', null),
                                'de la succession,',
                                _react2.default.createElement('br', null),
                                '- proc\xE9der au remboursement de la partie de la cotisation vers\xE9e par anticipation pour ',
                                _react2.default.createElement('br', null),
                                'la p\xE9riode du ................................... au ............................ ,',
                                _react2.default.createElement('br', null),
                                '- vous mettre en rapport avec Ma\xEEtre ........................, domicili\xE9 .................,',
                                _react2.default.createElement('br', null),
                                '....................................................................................................,',
                                _react2.default.createElement('br', null),
                                'charg\xE9 de la succession.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mentionAssurance },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Assurance;
}(_react2.default.Component);

exports.default = Assurance;

/***/ }),

/***/ "./src/components/letter/Bailleur.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Bailleur = function (_React$Component) {
    _inherits(Bailleur, _React$Component);

    function Bailleur(props) {
        _classCallCheck(this, Bailleur);

        var _this = _possibleConstructorReturn(this, (Bailleur.__proto__ || Object.getPrototypeOf(Bailleur)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '............',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(Bailleur, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-bailleur.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Bailleur ou syndic de copropri\xE9t\xE9'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Dans le cas d\u2019une location, il faut pr\xE9venir le bailleur ou l\u2019agence de location.',
                            _react2.default.createElement('br', null),
                            'Dans le cas d\u2019une copropri\xE9t\xE9, il faut pr\xE9venir le syndic de copropri\xE9t\xE9.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Si le d\xE9funt \xE9tait locataire (locaux lou\xE9s vides ou ne relevant pas de la loi de 1948), et qu\u2019aucun membre de la famille ne souhaite reprendre le bail \xE0 son nom, celui-ci cesse \xE0 la date du d\xE9c\xE8s'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Si le d\xE9funt \xE9tait propri\xE9taire bailleur, le bail continue \xE0 courir apr\xE8s son d\xE9c\xE8s. Il convient alors d\u2019informer les locataires des coordonn\xE9es du nouveau b\xE9n\xE9ficiaire du loyer (notaire, h\xE9ritier) ainsi que le syndic \xE9ventuel'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'nom du bailleur'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 'Bailleur', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@bailleur.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Au bailleur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Suite au d\xE9c\xE8s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', votre locataire domicili\xE9(e) .......................',
                                _react2.default.createElement('br', null),
                                ', ......................................................................................................',
                                _react2.default.createElement('br', null),
                                'je proc\xE8de aux formalit\xE9s qui m\'incombent.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'A ces fins, je vous demande de bien vouloir : ',
                                _react2.default.createElement('br', null),
                                '- r\xE9silier sans d\xE9lai le bail \xE9tabli le .................... au b\xE9n\xE9fice du d\xE9funt,',
                                _react2.default.createElement('br', null),
                                '- maintenir le bail en l\'\xE9tat dans l\'attente du r\xE9glement de la succession, ',
                                _react2.default.createElement('br', null),
                                '- transf\xE9rer le bail au nom de .................................................',
                                _react2.default.createElement('br', null)
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous informe que le notaire charg\xE9 de la succession est Ma\xEEtre ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.................................'
                                ),
                                _react2.default.createElement('br', null),
                                'domicili\xE9 ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............................................................................................'
                                ),
                                _react2.default.createElement('br', null),
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............................................................................................'
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je reste \xE0 votre disposition pour l\'\xE9tat des lieux et la remise des cl\xE9s.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mentionBanque },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Bailleur;
}(_react2.default.Component);

exports.default = Bailleur;

/***/ }),

/***/ "./src/components/letter/Banque.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Banque = function (_React$Component) {
    _inherits(Banque, _React$Component);

    function Banque(props) {
        _classCallCheck(this, Banque);

        var _this = _possibleConstructorReturn(this, (Banque.__proto__ || Object.getPrototypeOf(Banque)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            compte: '............',
            livret: '............',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(Banque, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-banque.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('compte').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '' || document.getElementById('livret').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    compte: document.getElementById('compte').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    livret: document.getElementById('livret').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Les organismes bancaires'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Les informer pour pouvoir faire l\u2019inventaire des biens du de\u0301funt ou bloquer les comptes en attendant la liquidation de la succession. Seuls les paiements e\u0301mis avant le de\u0301ce\u0300s sont honore\u0301s. Toutefois, un pre\u0301le\u0300vement, dont le montant maximum est plafonne\u0301, peut e\u0302tre effectue\u0301 sur le compte du de\u0301funt pour le re\u0300glement des obse\u0300ques.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'De\u0300s que la banque arre\u0302te les comptes, elle reprend les che\u0301quiers et les cartes de cre\u0301dit. Seuls les comptes personnels du de\u0301funt sont automatiquement bloque\u0301s. Le compte joint continue de fonctionner apre\u0300s un de\u0301ce\u0300s, mais son contenu entre pour moitie\u0301 dans la succession. Il conviendra de transformer un compte joint en compte personnel dans les six mois suivants. Les comptes e\u0301pargne ouverts au nom du de\u0301funt sont bloque\u0301s jusqu\u2019au re\u0300glement de la succession.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Toute procuration s\u2019arre\u0302te au de\u0301ce\u0300s sauf si elle est post mortem.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Renseignez-vous aupre\u0300s de l\u2019e\u0301tablissement bancaire pour connai\u0302tre les e\u0301ventuels be\u0301ne\u0301fices lie\u0301s a\u0300 la carte bancaire en matie\u0300re de capital de\u0301ce\u0300s.'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'nom de l\'organisme bancaire'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 'Organisme bancaire', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@banque.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'N\xB0 des comptes'
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'compte courant'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'compte', placeholder: 'FR7630004015870002601171220', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'compte courant'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'livret', placeholder: 'FR7630004015870002601171660', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'A la banque'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Suite au d\xE9c\xE8s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', je proc\xE8de aux formalit\xE9s qui m\'incombent.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Aussi, je vous prie de : ',
                                _react2.default.createElement('br', null),
                                '- bloquer le(s) comptes(s) n\xB0 ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.compte,
                                    ' '
                                ),
                                ' ',
                                _react2.default.createElement('br', null),
                                '- transformer le compte joint n\xB0 ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.compte,
                                    ' '
                                ),
                                _react2.default.createElement('br', null),
                                'en compte personnel au nom de ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.................................'
                                ),
                                _react2.default.createElement('br', null),
                                '- m\'indiquer la marche \xE0 suivre pour b\xE9n\xE9ficier de la clause d\'assurance d\xE9c\xE8s ',
                                _react2.default.createElement('br', null),
                                'du(des) pr\xEAts n\xB0 ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.....................................................'
                                ),
                                _react2.default.createElement('br', null)
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous informe que le notaire charg\xE9 de la succession est Ma\xEEtre ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.................................'
                                ),
                                _react2.default.createElement('br', null),
                                'domicili\xE9 ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............................................................................................'
                                ),
                                _react2.default.createElement('br', null),
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............................................................................................'
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression, de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mentionBanque },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Banque;
}(_react2.default.Component);

exports.default = Banque;

/***/ }),

/***/ "./src/components/letter/CaisseAllocation.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CaisseAllocation = function (_React$Component) {
    _inherits(CaisseAllocation, _React$Component);

    function CaisseAllocation(props) {
        _classCallCheck(this, CaisseAllocation);

        var _this = _possibleConstructorReturn(this, (CaisseAllocation.__proto__ || Object.getPrototypeOf(CaisseAllocation)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '............',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(CaisseAllocation, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-caf.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('immatriculation').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    immatriculation: document.getElementById('immatriculation').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Pr\xE9venir la caisse d\'allocation familiale'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Informer pour arr\xEAter le versement des prestations sociales \xE9ventuelles.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Demander une nouvelle immatriculation pour le conjoint survivant.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Faire valoir d\u2019\xE9ventuels droits'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Caisse d\'allocation familiale'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 'CAF', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@caf.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Information sur le contrat'
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'n\xB0 d\'allocataire'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'immatriculation', placeholder: '11713792', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'A la caisse d\'allocation familiale'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Suite au d\xE9c\xE8s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ',n\xB0 d\'allocataire ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.immatriculation
                                ),
                                ', je proc\xE8de aux formalit\xE9s qui m\'incombent.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous saurai gr\xE9 de : ',
                                _react2.default.createElement('br', null),
                                '- de bien vouloir me faire parvenir les formulaire pour :',
                                _react2.default.createElement('br', null),
                                '\xA0 - l\'allocation de parent isol\xE9, ',
                                _react2.default.createElement('br', null),
                                '\xA0 - l\'allocation de soutien familial,',
                                _react2.default.createElement('br', null),
                                '- d\'\xE9tudier ma nouvelle situation ou celle de .........................................................',
                                _react2.default.createElement('br', null),
                                'afin de v\xE9rifier si d\'autres droits me sont / lui sont ouverts, ',
                                _react2.default.createElement('br', null),
                                '- d\'effectuer le changement d\'allocataire ,',
                                _react2.default.createElement('br', null),
                                '- d\'arr\xEAter le versement des prestations sociales \xE9ventuelles.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression, de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mentionBanque },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return CaisseAllocation;
}(_react2.default.Component);

exports.default = CaisseAllocation;

/***/ }),

/***/ "./src/components/letter/Complementaire.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Complementaire = function (_React$Component) {
    _inherits(Complementaire, _React$Component);

    function Complementaire(props) {
        _classCallCheck(this, Complementaire);

        var _this = _possibleConstructorReturn(this, (Complementaire.__proto__ || Object.getPrototypeOf(Complementaire)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '............',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(Complementaire, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-complementaire-maladie.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('immatriculation').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    immatriculation: document.getElementById('immatriculation').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'L\u2019organisme de sant\xE9 compl\xE9mentaire'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'La pr\xE9venir pour obtenir les sommes dues au d\xE9funt au jour du d\xE9c\xE8s.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Suivant la formule souscrite et les conditions g\xE9n\xE9rales et particuli\xE8res, v\xE9rifier si celui-ci propose la prise en charge des frais d\'obs\xE8ques, le versement d\'un capital d\xE9c\xE8s et le remboursement d\'une partie des cotisations acquitt\xE9es.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'V\xE9rifier \xE9ventuellement le maintien des droits du conjoint survivant.'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'nom de l\'assurance compl\xE9mentaire maladie'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 'Assurance maladie', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@complementaire.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Information sur le contrat'
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'n\xB0 d\'immatriculation'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'immatriculation', placeholder: '11713792', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'A l\'assureur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Suite au d\xE9c\xE8s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', n de soci\xE9taire ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.immatriculation
                                ),
                                ', je proc\xE8de aux formalit\xE9s qui m\'incombent.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'A ces fins, je vous saurais gr\xE9 de : ',
                                _react2.default.createElement('br', null),
                                '- maintenir l\'ensemble des contrats et de les tranf\xE9rer au nom de ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...............................'
                                ),
                                _react2.default.createElement('br', null),
                                '- r\xE9silier les contrats',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............................................'
                                ),
                                _react2.default.createElement('br', null),
                                '- prendre note que l\'adresse et le mode de facturation de changent pas,',
                                _react2.default.createElement('br', null),
                                '- adresser la facturation au nom  et \xE0 l\'adresse suivante ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...............................'
                                ),
                                _react2.default.createElement('br', null),
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........................................................................................'
                                ),
                                _react2.default.createElement('br', null),
                                '- cesser les pr\xE9v\xE8lements, le compte \xE9tant bloqu\xE9 dans l\'attente du r\xE9glement de la succession',
                                _react2.default.createElement('br', null),
                                '- proc\xE9der au remboursement de la partie de la cotisation vers\xE9e par anticipation pour  ',
                                _react2.default.createElement('br', null),
                                'la p\xE9riode du ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...............................'
                                ),
                                ' au ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...............................'
                                ),
                                '  ',
                                _react2.default.createElement('br', null),
                                '- vous mettre au rapport avec Ma\xEEtre ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...............................'
                                ),
                                ', domicili\xE9 ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...............................'
                                ),
                                '  ',
                                _react2.default.createElement('br', null),
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........................................................................................,'
                                ),
                                _react2.default.createElement('br', null),
                                'charg\xE9 de la succession',
                                _react2.default.createElement('br', null)
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression, de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mentionComplementaire },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Complementaire;
}(_react2.default.Component);

exports.default = Complementaire;

/***/ }),

/***/ "./src/components/letter/Credit.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Credit = function (_React$Component) {
    _inherits(Credit, _React$Component);

    function Credit(props) {
        _classCallCheck(this, Credit);

        var _this = _possibleConstructorReturn(this, (Credit.__proto__ || Object.getPrototypeOf(Credit)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '............',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(Credit, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-credit.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('immatriculation').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    immatriculation: document.getElementById('immatriculation').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Les organismes de cr\xE9dit et d\'assurance vie'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Si un contrat d\u2019assurance vie a \xE9t\xE9 souscrit par le d\xE9funt, en informer l\u2019assureur pour obtenir le paiement du capital ou des rentes.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Les informer du report ou du blocage des pr\xE9l\xE8vements jusqu\u2019au r\xE8glement de la succession.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'En fonction des assurances dont ils ont pu faire l\u2019objet au moment de la souscription, les cr\xE9dits en cours peuvent \xEAtre \xE0 prendre en charge pour tout ou partie. Les cr\xE9dits en cours pourront, le cas \xE9ch\xE9ant, \xEAtre pris en charge par les assurances qui leur sont li\xE9es'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'organismes de cr\xE9dit'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 'Orgasnime de cr\xE9dit', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@credit.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Information sur le contrat'
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'n\xB0 des comptes'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'immatriculation', placeholder: '11713792', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'A l\'organisme de cr\xE9dit'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Suite au d\xE9c\xE8s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', je proc\xE8de aux formalit\xE9s qui m\'incombent.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous saurai gr\xE9 de : ',
                                _react2.default.createElement('br', null),
                                '- m\'indiquer les pi\xE9ces n\xE9cessaires \xE0 fournir pour l\'arr\xEAt du cr\xE9dit r\xE9f\xE9renc\xE9 ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.immatriculation
                                ),
                                _react2.default.createElement('br', null),
                                'ci-dessus, sachant qu\'une assurance d\xE9c\xE9s a \xE9t\xE9 souscrite,',
                                _react2.default.createElement('br', null),
                                '- m\'indiquer le montant des sommes vous restant d\xFBes, ce cr\xE9dit n\'\xE9tant pas assorti d\'une assurance d\xE9c\xE9s,',
                                _react2.default.createElement('br', null),
                                '- m\'indiquer si ce cr\xE9dit \xE9tait assorti d\'une assurance cr\xE9dit,',
                                _react2.default.createElement('br', null),
                                '- m\'indiquer les conditions \xE9ventuelles de reprise du cr\xE9dit, ',
                                _react2.default.createElement('br', null)
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous informe que le notaire charg\xE9 de la succession est Ma\xEEtre ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.................................'
                                ),
                                _react2.default.createElement('br', null),
                                'domicili\xE9 ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............................................................................................'
                                ),
                                _react2.default.createElement('br', null),
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............................................................................................'
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression, de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mentionBanque },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Credit;
}(_react2.default.Component);

exports.default = Credit;

/***/ }),

/***/ "./src/components/letter/Employeur.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Employeur = function (_React$Component) {
    _inherits(Employeur, _React$Component);

    function Employeur(props) {
        _classCallCheck(this, Employeur);

        var _this = _possibleConstructorReturn(this, (Employeur.__proto__ || Object.getPrototypeOf(Employeur)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '............',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(Employeur, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-employeur.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('immatriculation').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    immatriculation: document.getElementById('immatriculation').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrott', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Employeur ou P\xF4le Emploi'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'L\u2019(les) informer du d\xE9c\xE8s du salari\xE9 pour obtenir le solde de tout compte, le certificat de travail, l\u2019attestation de pr\xE9sence dans l\u2019entreprise, l\u2019attestation de salaire, le salaire et les accessoires au salaire (participations, int\xE9ressement, primes...), les cong\xE9s pay\xE9s et les trois derniers bulletins de paie. Ces documents vous seront demand\xE9s par les organismes de retraite ou de versement de capital d\xE9c\xE8s'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Ne pas oublier de demander les prestations figurant au r\xE8glement de l\u2019entreprise ou aux conventions collectives. Dans le cadre d\u2019un contrat souscrit par l\u2019employeur, la famille d\u2019un salari\xE9 peut percevoir un capital d\xE9c\xE8s, m\xEAme si le d\xE9c\xE8s a lieu en dehors du lieu de travail. Le montant de ce capital peut \xEAtre forfaitaire ou en fonction du salaire.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Si le d\xE9funt \xE9tait demandeur d\u2019emploi, pr\xE9venir P\xF4le Emploi pour le r\xE8glement des sommes dues \xE0 la date du d\xE9c\xE8s et v\xE9rifier s\u2019il ouvrait des droits aupr\xE8s de cet organisme en vue de clore le dossier'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'nom de l\'employeur ou p\xF4le emploi'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 'Employeur ou P\xF4le Emploi', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@employeur.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Information sur le contrat'
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'n\xB0 d\'identifiant'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'immatriculation', placeholder: '11713792', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'A l\'employeur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Suite au d\xE9c\xE8s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', n d\'inscription ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.immatriculation
                                ),
                                ', qui \xE9tait employ\xE9(e) au sein de votre entreprise, en qualit\xE9 de ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '..........................'
                                ),
                                ', je proc\xE8de aux formalit\xE9s qui m\'incombent.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'A ces fins, je vous saurais gr\xE9 : ',
                                _react2.default.createElement('br', null),
                                '- de verser les sommes restant dues,',
                                _react2.default.createElement('br', null),
                                '- de me faire parvenir : ',
                                _react2.default.createElement('br', null),
                                '\xA0 \xA0 - le solde de tout compte, ',
                                _react2.default.createElement('br', null),
                                '\xA0 \xA0 - un certificat de travail, ',
                                _react2.default.createElement('br', null),
                                '\xA0 \xA0 - une attestation de pr\xE9sence dans votre entreprise, ',
                                _react2.default.createElement('br', null),
                                '\xA0 \xA0 - une attestation de salaire, ',
                                _react2.default.createElement('br', null),
                                '&nbsp \xA0; - les trois derniers bulletins de salaire, ',
                                _react2.default.createElement('br', null),
                                '- de me pr\xE9ciser quelles sont les aides ou prestations pr\xE9vues dans votre soci\xE9t\xE9 ',
                                _react2.default.createElement('br', null),
                                'et de m\'indiquer la d\xE9marche \xE0 effectuer pour y pr\xE9tendre.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mentionEmployeur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Employeur;
}(_react2.default.Component);

exports.default = Employeur;

/***/ }),

/***/ "./src/components/letter/Impot.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Impot = function (_React$Component) {
    _inherits(Impot, _React$Component);

    function Impot(props) {
        _classCallCheck(this, Impot);

        var _this = _possibleConstructorReturn(this, (Impot.__proto__ || Object.getPrototypeOf(Impot)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '............',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(Impot, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-impot.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Centre des imp\xF4ts'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'R\xE9gulariser la situation concernant :'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            '\u2013 l\u2019imp\xF4t sur le revenu,'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            '\u2013 la taxe fonci\xE8re,'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            '\u2013 et la taxe d\u2019habitation.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Lui adresser la d\xE9claration de succession.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Si un notaire est charg\xE9 de la succession, c\u2019est lui qui, en principe, est mandat\xE9 par les h\xE9ritiers pour accomplir ces d\xE9marches'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'centre d\'imp\xF4ts'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 'Nom de l\'imp\xF4t', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@impot.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Au centre des imp\xF4ts'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Suite au d\xE9c\xE9s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.....................'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', domicili\xE9 ............................ .................................................................................................................',
                                _react2.default.createElement('br', null)
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je proc\xE9de aux formalit\xE9s qui m\'incombent.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                '\xC0 ces fins, je vous saurais gr\xE9 de me faire parvenir un formulaire de d\xE9claration de revenus et de m\u2019indiquer les autres formalit\xE9s \xE0 accomplir aupr\xE8s de vos services.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mentionBanque },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Impot;
}(_react2.default.Component);

exports.default = Impot;

/***/ }),

/***/ "./src/components/letter/Mairie.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Contacts = __webpack_require__("./src/styles/Contacts.scss");

var _Contacts2 = _interopRequireDefault(_Contacts);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Mairie = function (_React$Component) {
    _inherits(Mairie, _React$Component);

    function Mairie(props) {
        _classCallCheck(this, Mairie);

        var _this = _possibleConstructorReturn(this, (Mairie.__proto__ || Object.getPrototypeOf(Mairie)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '............',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(Mairie, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-mairie.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('immatriculation').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    immatriculation: document.getElementById('immatriculation').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'La mairie'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Il faut se rendre \xE0 la mairie du lieu du d\xE9c\xE8s pour d\xE9clarer le d\xE9c\xE8s. La mairie doit \xE9tablir l\'acte de d\xE9c\xE8s. Ce document, \xE0 faire \xE9tablir en plusieurs exemplaires (au moins une dizaine), vous sera indispensable pour les d\xE9marches administratives et vous servira \xE9galement de justificatif aupr\xE8s de votre employeur si votre lien de parent\xE9 avec le d\xE9funt vous ouvre droit \xE0 une absence r\xE9mun\xE9r\xE9e pour \xE9v\xE9nement familial.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Dans le cas d\u2019un d\xE9c\xE8s dans un \xE9tablissement public hospitalier, dans une clinique priv\xE9e ou dans une maison de retraite, la d\xE9claration de d\xE9c\xE8s est effectu\xE9e par l\u2019\xE9tablissement apr\xE8s constatation du d\xE9c\xE8s par le m\xE9decin.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Pour tout d\xE9c\xE8s ayant lieu hors du domicile ou hors d\u2019un \xE9tablissement \xE0 caract\xE8re hospitalier (voie publique, lieu de travail, \xE0 l\u2019\xE9tranger...), la d\xE9claration et le certificat de d\xE9c\xE8s sont soumis \xE0 des r\xE8gles sp\xE9cifiques.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Lorsque le d\xE9funt est li\xE9 par un Pacs, il faut informer le tribunal d\u2019instance dans les 36 heures qui suivent le d\xE9c\xE8s.'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.bloc },
                            _react2.default.createElement(
                                'p',
                                null,
                                '\xE9l\xE9ments \xE0 fournir \xE0 la mairie'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.divContact },
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.contentContact },
                                _react2.default.createElement(
                                    'p',
                                    { className: _Retraite2.default.contactName },
                                    'Certificat m\xE9dical constatant le d\xE9c\xE9s'
                                )
                            ),
                            _react2.default.createElement('hr', { className: _Retraite2.default.seperator })
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.divContact },
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.contentContact },
                                _react2.default.createElement(
                                    'p',
                                    { className: _Retraite2.default.contactName },
                                    'Pi\xE9ce d\'identit\xE9 du d\xE9funt'
                                ),
                                _react2.default.createElement(
                                    'p',
                                    { className: _Retraite2.default.description },
                                    'Livret de famille ou carte d\'identit\xE9'
                                )
                            ),
                            _react2.default.createElement('hr', { className: _Retraite2.default.seperator })
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.divContact },
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.contentContact },
                                _react2.default.createElement(
                                    'p',
                                    { className: _Retraite2.default.contactName },
                                    'Pi\xE9ce d\'identit\xE9 du d\xE9clarant'
                                )
                            ),
                            _react2.default.createElement('hr', { className: _Retraite2.default.seperator })
                        )
                    )
                )
            );
        }
    }]);

    return Mairie;
}(_react2.default.Component);

exports.default = Mairie;

/***/ }),

/***/ "./src/components/letter/Medecin.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Medecin = function (_React$Component) {
    _inherits(Medecin, _React$Component);

    function Medecin(props) {
        _classCallCheck(this, Medecin);

        var _this = _possibleConstructorReturn(this, (Medecin.__proto__ || Object.getPrototypeOf(Medecin)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '............',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(Medecin, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-medecin.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Le m\xE9decin traitant'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Quel que soit le lieu du d\xE9c\xE8s, celui-ci doit \xEAtre officiellement constat\xE9. Ce constat, g\xE9n\xE9ralement effectu\xE9 par un m\xE9decin, est une formalit\xE9 obligatoire pr\xE9c\xE9dant l\u2019\xE9tablissement de l\u2019acte de d\xE9c\xE8s.'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'nom du m\xE9decin'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 'M\xE9decin', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@medecin.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Au m\xE9decin'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Suite au d\xE9c\xE8s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous faire part de son d\xE9c\xE9s. ',
                                _react2.default.createElement('br', null)
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression, de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mentionEmployeur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Medecin;
}(_react2.default.Component);

exports.default = Medecin;

/***/ }),

/***/ "./src/components/letter/Notaire.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Notaire = function (_React$Component) {
    _inherits(Notaire, _React$Component);

    function Notaire(props) {
        _classCallCheck(this, Notaire);

        var _this = _possibleConstructorReturn(this, (Notaire.__proto__ || Object.getPrototypeOf(Notaire)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '............',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(Notaire, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-notaire.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Pr\xE9venir le notaire'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            _react2.default.createElement(
                                'b',
                                null,
                                'Le recours au notaire est indispensable si le d\xE9funt poss\xE9dait des biens immobiliers'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'En effet, leur transmission doit \xEAtre constat\xE9e dans une attestation notari\xE9e publi\xE9e au bureau des hypoth\xE8ques.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'En cas de donation au dernier vivant ou de testament, le notaire se chargera d\u2019organiser la succession et d\u2019\xE9tablir la d\xE9claration de succession, si n\xE9cessaire'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'nom du notaire'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 'Notaire', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@notaire.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Au notaire'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous informe du d\xE9c\xE9s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                '.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Aussi, je vous demande de proc\xE9der \xE0 l\'ouverture de la succession.',
                                _react2.default.createElement('br', null)
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mentionBanque },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Notaire;
}(_react2.default.Component);

exports.default = Notaire;

/***/ }),

/***/ "./src/components/letter/Organisme.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Organisme = function (_React$Component) {
    _inherits(Organisme, _React$Component);

    function Organisme(props) {
        _classCallCheck(this, Organisme);

        var _this = _possibleConstructorReturn(this, (Organisme.__proto__ || Object.getPrototypeOf(Organisme)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '............',
            compte: '............',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(Organisme, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-organisme.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('immatriculation').value == '' || document.getElementById('compte').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    immatriculation: document.getElementById('immatriculation').value,
                    compte: document.getElementById('compte').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Les organismes payeurs'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            _react2.default.createElement(
                                'b',
                                null,
                                'La pr\xE9fecture ou sous-pr\xE9fecture'
                            ),
                            ' pour modifier la carte grise d\u2019un v\xE9hicule. Lorsqu\u2019un v\xE9hicule est immatricul\xE9 au nom du d\xE9funt, les proches peuvent l\u2019utiliser le temps de r\xE9gler la succession (sous r\xE9serve de l\u2019accord de l\u2019assureur). Par la suite, celui qui conserve le v\xE9hicule doit faire \xE9tablir une carte grise \xE0 son nom en retirant un formulaire aupr\xE8s de la pr\xE9fecture, fournir une pi\xE8ce d\u2019identit\xE9, un justificatif de domicile, une attestation du notaire ou un acte de notori\xE9t\xE9 ainsi qu\u2019une lettre de d\xE9sistement des autres h\xE9ritiers ou un certificat du notaire signifiant leur accord. Il n\u2019existe aucun d\xE9lai obligatoire pour effectuer la d\xE9marche de modification de la carte grise lorsque le conducteur du v\xE9hicule est le conjoint survivant. Dans les autres cas, la carte grise doit \xEAtre modifi\xE9e en pr\xE9fecture dans les quinze jours. Le contrat d\u2019assurance du v\xE9hicule est maintenu apr\xE8s le d\xE9c\xE8s. Il appartient ensuite aux h\xE9ritiers, selon les cas, de transf\xE9rer ou de r\xE9silier le contrat. ',
                            _react2.default.createElement('br', null),
                            'Si les h\xE9ritiers vendent le v\xE9hicule moins de trois mois apr\xE8s le d\xE9c\xE8s, ou si celui-ci n\u2019a pas circul\xE9 depuis le d\xE9c\xE8s, l\u2019\xE9tablissement d\u2019une nouvelle carte grise n\u2019est pas n\xE9cessaire pour la vente.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            _react2.default.createElement(
                                'b',
                                null,
                                'Le conseil g\xE9n\xE9ral'
                            ),
                            ' et autres organismes pour faire cesser les diff\xE9rentes allocations (Apa : allocation personnalis\xE9e d\u2019autonomie, autres prestations sociales...).'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            _react2.default.createElement(
                                'b',
                                null,
                                'La Poste'
                            ),
                            ' pour le r\xE9acheminement du courrier.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            _react2.default.createElement(
                                'b',
                                null,
                                '\xC9lectricit\xE9 - Eau - Abonnements t\xE9l\xE9phoniques - Abonnements journaux, revues...'
                            ),
                            ' pour r\xE9siliation des contrats ou d\xE9signation d\u2019un nouveau titulaire'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Orgasnime'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 'Nom de l\'orgasnime', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@organisme.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Information sur le contrat'
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'n\xB0 de contrat'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'immatriculation', placeholder: '11713792', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'n\xB0 de compte bancaire'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'compte', placeholder: '11713792', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Aux organismes payeurs'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Suite au d\xE9c\xE8s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', domicili\xE9 .............................................',
                                _react2.default.createElement('br', null),
                                '........................................................................................................................',
                                _react2.default.createElement('br', null),
                                'je proc\xE8de aux formalit\xE9s qui m\'incombent.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'A ces fins, e vous saurai gr\xE9 de : ',
                                _react2.default.createElement('br', null),
                                '- de r\xE9silier l\'abonnement ou contrat n\xB0 ',
                                this.state.immatriculation,
                                ' ',
                                _react2.default.createElement('br', null),
                                '- de transf\xE9rer cet abonnement ou contrat au nom de ......................... ',
                                _react2.default.createElement('br', null),
                                '- d\'effectuer le pr\xE9l\xE8vement sur le n\xB0 de compte ',
                                this.state.compte,
                                ' ',
                                _react2.default.createElement('br', null),
                                '(RIB/RIP ci-joint).'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mentionBanque },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Organisme;
}(_react2.default.Component);

exports.default = Organisme;

/***/ }),

/***/ "./src/components/letter/Retraite.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Retraite = function (_React$Component) {
    _inherits(Retraite, _React$Component);

    function Retraite(props) {
        _classCallCheck(this, Retraite);

        var _this = _possibleConstructorReturn(this, (Retraite.__proto__ || Object.getPrototypeOf(Retraite)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '............',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(Retraite, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-retraite.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('immatriculation').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    immatriculation: document.getElementById('immatriculation').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Caisses de retraite'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Les caisses de retraite, principales et compl\xE9mentaires, doivent \xEAtre inform\xE9es du d\xE9c\xE8s pour interrompre les versements.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Pour v\xE9rifier les droits au capital d\xE9c\xE8s si le d\xE9funt est d\xE9c\xE9d\xE9 dans les trois mois suivant la notification de retraite. Ou faire valoir les droits \xE0 la pension de r\xE9version pour le conjoint.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Le conjoint survivant m\xEAme divorc\xE9, s\u2019il n\u2019est pas remari\xE9, peut b\xE9n\xE9ficier, sous certaines conditions, de la r\xE9version des droits \xE0 la retraite du d\xE9funt si celui-ci percevait une retraite ou pouvait y pr\xE9tendre'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'nom de la caisse de retraite'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 'Caisse de retraite', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@retraite.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Information sur le contrat'
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'n\xB0 d\'immatriculation'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'immatriculation', placeholder: '11713792', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'A la caisse de retraite'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Suite au d\xE9c\xE8s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', n d\'inscription ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.immatriculation
                                ),
                                ', je proc\xE8de aux formalit\xE9s qui m\'incombent.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'A ces fins, je vous saurais gr\xE9 de : ',
                                _react2.default.createElement('br', null),
                                '- v\xE9rifier mes droits ou ceux de ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...............................'
                                ),
                                ' au capital d\xE9c\xE9s,',
                                _react2.default.createElement('br', null),
                                '- faire valoir mes droits ou ceux de ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.........................'
                                ),
                                ' \xE0 la pension de r\xE9version,',
                                _react2.default.createElement('br', null),
                                '- de proc\xE9der au r\xE9glement des arri\xE9r\xE9s dus \xE0 la date du d\xE9c\xE9s.',
                                _react2.default.createElement('br', null)
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression, de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mention },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Retraite;
}(_react2.default.Component);

exports.default = Retraite;

/***/ }),

/***/ "./src/components/letter/SecuriteSociale.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Retraite = __webpack_require__("./src/styles/Retraite.scss");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _meta = __webpack_require__("./src/scripts/meta.js");

var _index2 = __webpack_require__("./src/tools/index.js");

var _onboarding = __webpack_require__("./src/scripts/onboarding.js");

var _types = __webpack_require__("./src/constants/types.json");

var _types2 = _interopRequireDefault(_types);

var _reactHoverImage = __webpack_require__("./node_modules/react-hover-image/build/index.js");

var _reactHoverImage2 = _interopRequireDefault(_reactHoverImage);

var _html2canvas = __webpack_require__("./node_modules/html2canvas/dist/npm/index.js");

var _html2canvas2 = _interopRequireDefault(_html2canvas);

var _jspdf = __webpack_require__("./node_modules/jspdf/dist/jspdf.min.js");

var jsPDF = _interopRequireWildcard(_jspdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SecuriteSociale = function (_React$Component) {
    _inherits(SecuriteSociale, _React$Component);

    function SecuriteSociale(props) {
        _classCallCheck(this, SecuriteSociale);

        var _this = _possibleConstructorReturn(this, (SecuriteSociale.__proto__ || Object.getPrototypeOf(SecuriteSociale)).call(this, props));

        _this.state = {
            caisse: '............................',
            numeroAdresse: '............................',
            rue: '',
            postale: '............................',
            ville: '',
            pays: '',
            telephone: '',
            telecopie: '',
            email: '',
            immatriculation: '..................................',
            faite: '..........................',
            recu: '',
            faitePar: '',
            error: ''
        };
        _this.handleLetter = _this.handleLetter.bind(_this);
        return _this;
    }

    _createClass(SecuriteSociale, [{
        key: 'printElem',
        value: function printElem() {
            var input = document.getElementById('letter');
            (0, _html2canvas2.default)(input).then(function (canvas) {
                var dataURL = canvas.toDataURL('image/jpeg');
                var downloadLink = document.createElement('a');
                downloadLink.href = dataURL;
                downloadLink.download = 'lettre-securite-social.png';
                downloadLink.style.display = 'nones';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                // console.log(imgData);
                // window.open(imgData);
                // const pdf = new pdfConverter('p', 'mm', 'a4');
                // pdf.fromHTML(window.document.getElementById('letter'), 10, 10,{'width': 180});
                // // pdf.addImage(imgData, 'JPEG', 0, 0);
                // // pdf.output('dataurlnewwindow');
                // pdf.save("download.pdf");
            });
        }
    }, {
        key: 'handleLetter',
        value: function handleLetter() {
            if (document.getElementById('caisse').value == '' || document.getElementById('numeroAddresse').value == '' || document.getElementById('rue').value == '' || document.getElementById('postale').value == '' || document.getElementById('ville').value == '' || document.getElementById('pays').value == '' || document.getElementById('telephone').value == '' || document.getElementById('telecopie').value == '' || document.getElementById('email').value == '' || document.getElementById('immatriculation').value == '' || document.getElementById('faite').value == '' || document.getElementById('recu').value == '' || document.getElementById('faitePar').value == '') {
                this.setState({
                    error: "Veuillez compléter l'intégralité des informations"
                });
            } else {
                this.setState({
                    caisse: document.getElementById('caisse').value,
                    numeroAdresse: document.getElementById('numeroAddresse').value,
                    rue: document.getElementById('rue').value,
                    postale: document.getElementById('postale').value,
                    ville: document.getElementById('ville').value,
                    pays: document.getElementById('pays').value,
                    telephone: document.getElementById('telephone').value,
                    telecopie: document.getElementById('telecopie').value,
                    email: document.getElementById('email').value,
                    immatriculation: document.getElementById('immatriculation').value,
                    faite: document.getElementById('faite').value,
                    recu: document.getElementById('recu').value,
                    faitePar: document.getElementById('faitePar').value,
                    error: ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _Page2.default,
                { title: 'Sahra Vadrot', subtitle: 'Cet espace vous permet de renseigner l\'ensemble des informations qui seront utiles pour pr\xE9venir les caisses de retraite ' },
                _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.main },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'organisme g\xE9n\xE9ral de sant\xE9'
                            )
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Demandez le remboursement des frais de maladie restant dus au d\xE9funt.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Demandez \xE9ventuellement l\u2019immatriculation personnelle du conjoint survivant (d\xE9lai de six mois maximum).'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Faites valoir, si n\xE9cessaire, les droits \xE0 la pension de veuf ou de veuve invalide.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'V\xE9rifiez les droits du conjoint \xE0 l\u2019allocation veuvage.'
                        ),
                        _react2.default.createElement(
                            'p',
                            { className: _Retraite2.default.dataTxt },
                            'Demandez le versement d\u2019un capital d\xE9c\xE8s sous r\xE9serve que le d\xE9funt ait \xE9t\xE9: ',
                            _react2.default.createElement('br', null),
                            '\u2013 en activit\xE9 professionnelle et salari\xE9 (ou non salari\xE9 depuis moins de trois mois avant le d\xE9c\xE8s) ;',
                            _react2.default.createElement('br', null),
                            '\u2013 ou b\xE9n\xE9ficiaire de l\u2019allocation-ch\xF4mage, de l\u2019allocation au titre d\u2019un cong\xE9 de conversion, d\u2019une pension d\u2019invalidit\xE9 ou d\u2019une rente accident du travail (\xE9quivalente \xE0 un taux d\u2019incapacit\xE9 d\u2019au moins 2/3)...'
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'h3',
                            { className: _Retraite2.default.titleRetraite },
                            'Coordonn\xE9es'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentForm },
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    's\xE9curit\xE9 sociale'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'caisse', placeholder: 's\xE9curit\xE9 sociale', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'adresse'
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'numeroAddresse', placeholder: '191', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'rue', placeholder: 'Rue Jean Jaures', className: [_Retraite2.default.inputForm, _Retraite2.default.sizeRue].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'postale', placeholder: '75002', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'ville', placeholder: 'Paris', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'pays', placeholder: 'France', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.labelAdresse },
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9phone'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'num\xE9ro de t\xE9l\xE9copie'
                                    ),
                                    _react2.default.createElement(
                                        'label',
                                        null,
                                        'email'
                                    )
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: _Retraite2.default.adresse },
                                    _react2.default.createElement('input', { type: 'text', id: 'telephone', placeholder: '01 84 16 32 56', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'telecopie', placeholder: '01 84 16 32 57', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                    _react2.default.createElement('input', { type: 'text', id: 'email', placeholder: 'contact@securite-sociale.fr', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Information sur le contrat'
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'n\xB0 de s\xE9curit\xE9 sociale'
                                ),
                                _react2.default.createElement('input', { type: 'text', id: 'immatriculation', placeholder: '11713792', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'h3',
                                { className: _Retraite2.default.titleRetraite },
                                'Suivi de dossier'
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.labelDemarche },
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'Acte re\xE7u le '
                                ),
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'D\xE9marche faite par'
                                )
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.adresse },
                                _react2.default.createElement('input', { type: 'text', id: 'faite', placeholder: '12/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'recu', placeholder: '13/12/2017', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') }),
                                _react2.default.createElement('input', { type: 'text', id: 'faitePar', placeholder: 'Mr Dupont Pierre', className: [_Retraite2.default.inputForm, _Retraite2.default.adaptSizeT].join(' ') })
                            ),
                            _react2.default.createElement(
                                'div',
                                null,
                                _react2.default.createElement(
                                    'label',
                                    null,
                                    'suite donn\xE9e ou \xE0 donner'
                                ),
                                _react2.default.createElement('input', { type: 'text', placeholder: '\xE0 imprimer', className: _Retraite2.default.inputForm })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: _Retraite2.default.divButton },
                                _react2.default.createElement(
                                    'h3',
                                    { className: _Retraite2.default.titleRetraite },
                                    'Courrier type'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.handleLetter },
                                    'METTRE A JOUR'
                                ),
                                _react2.default.createElement(
                                    'button',
                                    { className: _Retraite2.default.buttonCustom, onClick: this.printElem },
                                    'IMPRIMER'
                                )
                            ),
                            _react2.default.createElement(
                                'h3',
                                null,
                                ' ',
                                this.state.error,
                                ' '
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'page',
                        { className: _Retraite2.default.afour, id: 'letter' },
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.expediteur },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Exp\xE9diteur'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faitePar
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '............................'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.ToCaisse },
                            _react2.default.createElement(
                                'p',
                                null,
                                'A la CPAM'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.caisse,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.numeroAdresse,
                                    ' ',
                                    this.state.rue
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    ' ',
                                    this.state.postale,
                                    ' ',
                                    this.state.ville,
                                    ' ',
                                    this.state.pays,
                                    ' '
                                )
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.date },
                                'Le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.faite
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.contentLetter },
                            _react2.default.createElement(
                                'p',
                                null,
                                'Madame, Monsieur,'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Suite au d\xE9c\xE8s de Monsieur (Madame ou Mademoiselle), ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ', mon/ma (indiquer le lien de parent\xE9)',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '...........'
                                ),
                                ', survenu le ',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    '.............'
                                ),
                                ',n\xB0 d\'immatriculation',
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    this.state.immatriculation
                                ),
                                ',',
                                _react2.default.createElement('br', null),
                                'je proc\xE8de aux formalit\xE9s qui m\'incombent.'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'A ces fins, je vous saurais gr\xE9 : ',
                                _react2.default.createElement('br', null),
                                '- de m\'indiquer la marche \xE0 suivre pour faire valoir mes droits \xE9ventuels, ou ceux de : ',
                                _react2.default.createElement('br', null),
                                '\xA0 \xA0 - au capital d\xE9c\xE9s, ',
                                _react2.default.createElement('br', null),
                                '\xA0 \xA0 - \xE0 l\'allocation veuvage, ',
                                _react2.default.createElement('br', null),
                                '\xA0 \xA0 - \xE0 la pension de veuf ou veuve invalide, ',
                                _react2.default.createElement('br', null),
                                '- de proc\xE9der aux remboursements des frais de maladie restant dus au d\xE9funt,',
                                _react2.default.createElement('br', null),
                                '- de proc\xE9der \xE0 mon immatriculation personnelle,',
                                _react2.default.createElement('br', null)
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Merci de pr\xE9ciser \xE9ventuellement si d\'autres d\xE9marches sont \xE0 effectuer pour faire valoir',
                                _react2.default.createElement('br', null),
                                'mes droits ou ceux de M........................................................................',
                                _react2.default.createElement('br', null)
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Je vous prie d\'agr\xE9er, Madame, Monsieur, l\'expression de mes sentiments les meilleurs.'
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: _Retraite2.default.signature },
                                'Signature'
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _Retraite2.default.mentionBanque },
                            _react2.default.createElement(
                                'p',
                                null,
                                'P.J. : acte de d\xE9c\xE9s'
                            ),
                            _react2.default.createElement(
                                'p',
                                null,
                                'Courrier en recommand\xE9 avec accus\xE9 de r\xE9ception'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return SecuriteSociale;
}(_react2.default.Component);

exports.default = SecuriteSociale;

/***/ }),

/***/ "./src/components/modals/ConfirmModal.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _ConfirmModal = __webpack_require__("./src/styles/ConfirmModal.scss");

var _ConfirmModal2 = _interopRequireDefault(_ConfirmModal);

var _Modal = __webpack_require__("./src/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ConfirmModal = function ConfirmModal(_ref) {
    var confirm = _ref.confirm,
        abort = _ref.abort,
        children = _ref.children;

    return _react2.default.createElement(
        _Modal2.default,
        null,
        _react2.default.createElement(
            'div',
            { className: _ConfirmModal2.default.main },
            _react2.default.createElement(
                'div',
                { className: _ConfirmModal2.default.content },
                children
            ),
            _react2.default.createElement(
                'div',
                { className: _ConfirmModal2.default.actions },
                _react2.default.createElement(
                    'button',
                    { className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default), onClick: function onClick(e) {
                            return abort();
                        } },
                    'ANNULER'
                ),
                _react2.default.createElement(
                    'button',
                    { onClick: function onClick(e) {
                            return confirm();
                        }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.assertive) },
                    'SUPPRIMER'
                )
            )
        )
    );
};

exports.default = ConfirmModal;

/***/ }),

/***/ "./src/components/modals/ContactsModal.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _contactTypes = __webpack_require__("./src/constants/data/contactTypes.json");

var _contactTypes2 = _interopRequireDefault(_contactTypes);

var _tools = __webpack_require__("./src/tools/index.js");

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _ContactRecallModal = __webpack_require__("./src/styles/ContactRecallModal.scss");

var _ContactRecallModal2 = _interopRequireDefault(_ContactRecallModal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ContactModal = function (_Component) {
  _inherits(ContactModal, _Component);

  function ContactModal(props, context) {
    var _this$state;

    _classCallCheck(this, ContactModal);

    var _this = _possibleConstructorReturn(this, (ContactModal.__proto__ || Object.getPrototypeOf(ContactModal)).call(this, props, context));

    console.log(props);
    var item = props.item || {};
    var status = props.status;

    _this.state = (_this$state = {
      import: true,
      lastName: item.civility || '0'
    }, _defineProperty(_this$state, 'lastName', item.lastName || ''), _defineProperty(_this$state, 'firstName', item.firstName || ''), _defineProperty(_this$state, 'company', item.company || ''), _defineProperty(_this$state, 'type', item.type || ''), _defineProperty(_this$state, 'email', item.email || ''), _defineProperty(_this$state, 'telephones', item.telephones || [{
      phone: '',
      type: 'fixe'
    }]), _defineProperty(_this$state, 'address', item.address || {
      way: '',
      code: '',
      city: ''
    }), _defineProperty(_this$state, 'birth', item.birth || {
      day: '',
      month: '',
      year: ''
    }), _defineProperty(_this$state, 'commentary', item.commentary || ''), _defineProperty(_this$state, 'statut', status), _defineProperty(_this$state, 'delay', item.delay || 'now'), _defineProperty(_this$state, 'edit', false), _defineProperty(_this$state, 'warn', false), _this$state);

    return _this;
  }

  _createClass(ContactModal, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.edit === true) this.state.edit = true;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {}
  }, {
    key: 'onimport',
    value: function onimport() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      this.setState({ import: value });
    }
  }, {
    key: 'save',
    value: function save(e) {
      var _this2 = this;

      //create new object
      var _state = this.state,
          civility = _state.civility,
          lastName = _state.lastName,
          firstName = _state.firstName,
          company = _state.company,
          type = _state.type,
          email = _state.email,
          statut = _state.statut,
          delay = _state.delay,
          commentary = _state.commentary;


      if (!lastName && !company) return this.setState({ warn: true });

      var telephones = [].concat(_toConsumableArray(this.state.telephones));
      var address = _extends({}, this.state.address);

      var newContact = {
        civility: civility,
        lastName: lastName,
        firstName: firstName,
        company: company,
        type: type,
        email: email,
        commentary: commentary,
        telephones: telephones,
        address: address,
        statut: statut,
        delay: delay
      };

      var infos = null;

      cozy.client.settings.getInstance().then(function (result) {
        console.log(result);
        infos = result;
      }).catch(function (error) {
        console.log(error);
      });

      (0, _tools.getDataElements)('com.empreinte.homeData').then(function (res) {
        _this2.user = res[0];
        console.log(_this2.user);

        cozy.client.fetchJSON('POST', '/permissions?codes=partage', {
          data: {
            type: 'io.cozy.permissions',
            attributes: {
              permissions: {
                "settings": {
                  "description": "Required by the cozy-bar display Claudy and to know which applications are coming soon",
                  "type": "io.cozy.settings",
                  "verbs": ["ALL"]
                },
                "data-funerals-lastwill": {
                  "description": "App required data Last Will access",
                  "type": "com.empreinte.FLastWill",
                  "verbs": ["ALL"]
                },
                "data-funerals-contacts": {
                  "description": "App required data Last Will access",
                  "type": "com.empreinte.Fcontacts",
                  "verbs": ["ALL"]
                },
                "data-funerals-custom-contacts": {
                  "description": "App required data Last Will access",
                  "type": "com.empreinte.Fcustomcontacts",
                  "verbs": ["ALL"]
                },
                "data-homeData": {
                  "description": "App required data homeData access",
                  "type": "com.empreinte.homeData",
                  "verbs": ["ALL"]
                },
                "contacts": {
                  "description": "App required contacts access",
                  "type": "com.empreinte.contacts",
                  "verbs": ["ALL"]
                },
                "metas": {
                  "description": "App required metas access",
                  "type": "com.empreinte.meta",
                  "verbs": ["ALL"]
                },
                "contact": {
                  "description": "App required contact access",
                  "type": "io.cozy.contacts",
                  "verbs": ["ALL"]
                }
              }
            }
          }
        }).then(function (result) {
          _this2.sharing = result.attributes.codes['partage'];
          console.log(_this2.sharing);

          var url = 'http://' + window.location.hostname + '/public?sharecode=' + _this2.sharing + '#/';
          var civ = newContact.civility === 0 ? "Madame" : "Monsieur";

          var now = "Bonjour " + civ + " " + newContact.lastName + ". Vous recevez ce mail d’information car" + _this2.user.civilite + " " + _this2.user.name + " vous a désigné comme proche référent dans l’espace <b><i>Faire face au décès</b></i> de la MAIF. Nous vous en félicitons.<br />Votre proche souhaite anticiper ses obsèques et préparer les démarches qui en découleront. Il a souscrit le contrat obsèques SOLLICITUDES de la MAIF et a ouvert un espace privé.<br /><br />Au moment de son décès, nous vous demandons de contacter immédiatement Parnasse-MAIF au :<br /><center><b>05 49 73 89 43</b></center><br />Celle-ci mettra en place l’ensemble des garanties et des prestations du contrat obsèques. L’offre souscrite facilitera considérablement votre cheminement dans ce moment douloureux. L’objectif est d’alléger la situation, de l’apaiser au maximum. <br />L’espace <b><i>Faire face au décès</b></i> de votre proche contient des informations qui vous seront précieuses pour l’organisation de ses obsèques : dernières volontés, don de soi, prestataire funéraire … ainsi que les informations et contacts administratifs auxquels il est rattaché. Vous n’aurez pas à les chercher, tout est ordonné. Vous aurez accès à un assistant administratif. Il vous facilitera la tâche en vous guidant pas à pas dans vos démarches. <br /><br />Vous pouvez d’ores et déjà accéder à certaines informations du dossier en cliquant sur ce lien : " + url + "<br />Au nom de notre sociétaire, nous vous remercions vivement pour votre implication. <br /><br />Cordialement <br /><br />L’équipe Parnasse-MAIF";

          var diff = "Bonjour " + civ + " " + newContact.lastName + ". Vous recevez ce mail d’information car" + _this2.user.civilite + " " + _this2.user.name + " vous a désigné comme proche référent dans l’espace <b><i>Faire face au décès</b></i> de la MAIF. Nous vous en félicitons.<br />Votre proche souhaite anticiper ses obsèques et préparer les démarches qui en découleront. Il a souscrit le contrat obsèques SOLLICITUDES de la MAIF et a ouvert un espace privé.<br /><br />Au moment de son décès, nous vous demandons de contacter immédiatement Parnasse-MAIF au :<br /><center><b>05 49 73 89 43</b></center><br />Celle-ci mettra en place l’ensemble des garanties et des prestations du contrat obsèques. L’offre souscrite facilitera considérablement votre cheminement dans ce moment douloureux. L’objectif est d’alléger la situation, de l’apaiser au maximum. <br />L’espace <b><i>Faire face au décès</b></i> de votre proche contient des informations qui vous seront précieuses pour l’organisation de ses obsèques : dernières volontés, don de soi, prestataire funéraire … ainsi que les informations et contacts administratifs auxquels il est rattaché. Vous n’aurez pas à les chercher, tout est ordonné. Vous aurez accès à un assistant administratif. Il vous facilitera la tâche en vous guidant pas à pas dans vos démarches.<br /><br />Lors de la déclaration du décès, Parnasse-MAIF vous adressera un mail contenant le lien vers l’espace de votre proche.<br />Au nom de notre sociétaire, nous vous remercions vivement pour votre implication. <br /><br />Cordialement <br /><br />L’équipe Parnasse-MAIF";

          var body = delay === "now" ? now : diff;

          var job = cozy.client.jobs.create('sendmail', {
            mode: 'from',
            to: [{ name: 'COZY - MAIF OBSEQUE', email: newContact.email }],
            subject: _this2.user.firstname + " " + _this2.user.name + ' vous donne accès à ses informations.',
            parts: [{ type: 'text/html', body: body }]
          }).then(function (res) {
            console.log(res);
          });
        });

        console.log(newContact);
        _this2.props.onSave(newContact);
        _this2.close(e);
      });
    }
  }, {
    key: 'close',
    value: function close(e) {
      e.stopPropagation();

      //close the portal
      this.props.closePortal();
    }
  }, {
    key: 'edit',
    value: function edit(e) {
      e.stopPropagation();

      this.setState({ edit: true });
    }
  }, {
    key: 'remove',
    value: function remove(e) {
      this.props.onRemove();
      this.close(e);
    }
  }, {
    key: 'addTelephone',
    value: function addTelephone(e) {
      e.preventDefault();
      e.stopPropagation();
      this.setState({
        telephones: [].concat(_toConsumableArray(this.state.telephones), [{
          phone: '',
          type: 'fixe'
        }])
      });
    }
  }, {
    key: 'renderEdition',
    value: function renderEdition() {
      var _this3 = this;

      return _react2.default.createElement(
        'div',
        { className: _ContactRecallModal2.default.edition, onClick: function onClick(e) {
            return e.stopPropagation();
          } },
        _react2.default.createElement(
          'div',
          { className: _ContactRecallModal2.default.header },
          _react2.default.createElement(
            'h1',
            null,
            this.props.title
          )
        ),
        this.state.import == false && _react2.default.createElement(
          'form',
          { className: _ContactRecallModal2.default.content },
          _react2.default.createElement(
            'div',
            { className: _ContactRecallModal2.default.row },
            _react2.default.createElement(
              'div',
              { className: _ContactRecallModal2.default.group },
              _react2.default.createElement(
                'label',
                null,
                'Civilit\xE9'
              ),
              _react2.default.createElement(
                'select',
                {
                  type: 'text',
                  placeholder: 'Civilit\xE9',
                  value: this.state.civility,
                  onChange: function onChange(e) {
                    return _this3.setState({ civility: e.target.value });
                  } },
                _react2.default.createElement(
                  'option',
                  { value: 0 },
                  'Madame'
                ),
                _react2.default.createElement(
                  'option',
                  { value: 1 },
                  'Monsieur'
                ),
                _react2.default.createElement(
                  'option',
                  { value: 2 },
                  'Autre'
                )
              )
            ),
            _react2.default.createElement(
              'div',
              { className: _ContactRecallModal2.default.group },
              _react2.default.createElement(
                'label',
                null,
                'Nom'
              ),
              _react2.default.createElement('input', {
                type: 'text',
                placeholder: 'Nom',
                value: this.state.lastName,
                style: ifStyle(this.state.warn && this.state.lastName === '', { border: '1px solid orangered' }),
                onChange: function onChange(e) {
                  return _this3.setState({ lastName: e.target.value });
                } })
            ),
            _react2.default.createElement(
              'div',
              { className: _ContactRecallModal2.default.group },
              _react2.default.createElement(
                'label',
                null,
                'Pr\xE9nom'
              ),
              _react2.default.createElement('input', {
                type: 'text',
                style: ifStyle(this.state.warn && this.state.firstName === '', { border: '1px solid orangered' }),
                placeholder: 'Pr\xE9nom',
                value: this.state.firstName,
                onChange: function onChange(e) {
                  return _this3.setState({ firstName: e.target.value });
                } })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _ContactRecallModal2.default.row },
            _react2.default.createElement(
              'div',
              { className: _ContactRecallModal2.default.group },
              _react2.default.createElement(
                'label',
                null,
                'Adresse'
              ),
              _react2.default.createElement('input', {
                type: 'text',
                placeholder: 'Adresse',
                value: this.state.address.way,
                onChange: function onChange(e) {
                  return _this3.setState({
                    address: _extends({}, _this3.state.address, {
                      way: e.target.value
                    })
                  });
                } })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _ContactRecallModal2.default.row },
            _react2.default.createElement(
              'div',
              { className: _ContactRecallModal2.default.group },
              _react2.default.createElement('input', {
                type: 'text',
                placeholder: 'Code postal',
                value: this.state.address.code,
                onChange: function onChange(e) {
                  return _this3.setState({
                    address: _extends({}, _this3.state.address, {
                      code: e.target.value
                    })
                  });
                } })
            ),
            _react2.default.createElement(
              'div',
              { className: _ContactRecallModal2.default.group },
              _react2.default.createElement('input', {
                type: 'text',
                placeholder: 'Ville',
                value: this.state.address.city,
                onChange: function onChange(e) {
                  return _this3.setState({
                    address: _extends({}, _this3.state.address, {
                      city: e.target.value
                    })
                  });
                } })
            ),
            _react2.default.createElement(
              'div',
              { className: _ContactRecallModal2.default.group },
              _react2.default.createElement('input', {
                type: 'text',
                placeholder: 'Pays',
                value: this.state.address.land,
                onChange: function onChange(e) {
                  return _this3.setState({
                    address: _extends({}, _this3.state.address, {
                      land: e.target.value
                    })
                  });
                } })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _ContactRecallModal2.default.row },
            _react2.default.createElement(
              'div',
              { className: _ContactRecallModal2.default.group },
              _react2.default.createElement(
                'label',
                null,
                'Email (OBLIGATOIRE)'
              ),
              _react2.default.createElement('input', {
                type: 'email',
                placeholder: 'Email',
                value: this.state.email,
                onChange: function onChange(e) {
                  return _this3.setState({ email: e.target.value });
                } })
            ),
            _react2.default.createElement(
              'div',
              { className: _ContactRecallModal2.default.group },
              _react2.default.createElement(
                'label',
                null,
                'T\xE9l\xE9phone'
              ),
              this.state.telephones && this.state.telephones.map(function (item, key) {
                return _react2.default.createElement(
                  'div',
                  { key: key, className: _ContactRecallModal2.default.inline },
                  _react2.default.createElement('input', {
                    type: 'text',
                    placeholder: 'T\xE9l\xE9phone',
                    value: item.phone,
                    onChange: function onChange(e) {
                      item.phone = e.target.value;
                      _this3.setState({});
                    } })
                );
              })
            )
          ),
          this.props.status === "ref" ? _react2.default.createElement(
            'div',
            { className: _ContactRecallModal2.default.group },
            _react2.default.createElement(
              'label',
              null,
              'Acc\xE8s \xE0 l\'espace d\xE9c\xE8s'
            ),
            _react2.default.createElement(
              'select',
              {
                placeholder: 'Acc\xE8s \xE0 l\'espace d\xE9c\xE8s',
                value: this.state.delay,
                onChange: function onChange(e) {
                  return _this3.setState({ delay: e.target.value });
                }
              },
              _react2.default.createElement(
                'option',
                { value: 'now' },
                'Partage imm\xE9diat'
              ),
              _react2.default.createElement(
                'option',
                { value: 'death' },
                'Partage diff\xE9r\xE9'
              )
            )
          ) : _react2.default.createElement('span', null)
        ),
        this.state.import == true && _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'div',
            { className: (0, _classnames2.default)("col-md-6", _ContactRecallModal2.default.importCard), onClick: function onClick() {
                return _this3.onimport();
              } },
            _react2.default.createElement('i', { className: "ion-ios-person" }),
            ' ',
            _react2.default.createElement('br', null),
            'Cr\xE9er votre contact ',
            _react2.default.createElement('br', null),
            _react2.default.createElement(
              'div',
              null,
              'Plus tard, il sera possible d\'importer vos contacts depuis votre espace MAIF'
            )
          ),
          _react2.default.createElement(
            'div',
            { className: (0, _classnames2.default)("col-md-6", _ContactRecallModal2.default.importCard, _ContactRecallModal2.default.disable) },
            _react2.default.createElement('div', { className: _ContactRecallModal2.default.overlay }),
            _react2.default.createElement('i', { className: (0, _classnames2.default)("ion-ios-people") }),
            ' ',
            _react2.default.createElement('br', null),
            'Importer votre contact ',
            _react2.default.createElement('br', null)
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _ContactRecallModal2.default.footer },
          _react2.default.createElement(
            'div',
            { className: _ContactRecallModal2.default.footerRight },
            _react2.default.createElement(
              'button',
              {
                onClick: function onClick(e) {
                  return _this3.close(e);
                },
                className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.defaultLight, _ContactRecallModal2.default.button)
              },
              'FERMER'
            ),
            this.state.import == false && _react2.default.createElement(
              'button',
              {
                className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default, _ContactRecallModal2.default.button),
                onClick: function onClick(e) {
                  return _this3.save(e);
                } },
              'VALIDER'
            )
          )
        )
      );
    }
  }, {
    key: 'renderView',
    value: function renderView() {
      var _this4 = this;

      return _react2.default.createElement(
        'div',
        { className: _ContactRecallModal2.default.main, onClick: function onClick(e) {
            return e.stopPropagation();
          } },
        _react2.default.createElement(
          'div',
          { className: _ContactRecallModal2.default.header },
          _react2.default.createElement(
            'h1',
            null,
            this.state.civility,
            ' ',
            this.state.firstName,
            ' ',
            this.state.lastName && this.state.lastName.toUpperCase()
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _ContactRecallModal2.default.content },
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'h3',
              null,
              'Anniversaire'
            ),
            _react2.default.createElement(
              'p',
              null,
              this.state.birth.day,
              ' / ',
              this.state.birth.month,
              ' / ',
              this.state.birth.year
            )
          ),
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'h3',
              null,
              'T\xE9l\xE9phone'
            ),
            this.state.telephones && this.state.telephones.map(function (item, index) {
              return _react2.default.createElement(
                'p',
                { key: index },
                _react2.default.createElement(
                  'strong',
                  null,
                  item.type && item.type.toUpperCase() + ' :'
                ),
                _react2.default.createElement(
                  'a',
                  { href: "tel:" + item.phone },
                  item.phone
                )
              );
            })
          ),
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'h3',
              null,
              'Email'
            ),
            _react2.default.createElement(
              'p',
              null,
              _react2.default.createElement(
                'a',
                { href: "mailto:" + this.state.email },
                this.state.email
              )
            )
          ),
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'h3',
              null,
              'Adresse'
            ),
            _react2.default.createElement(
              'p',
              null,
              this.state.address.way
            ),
            _react2.default.createElement(
              'p',
              null,
              this.state.address.code
            ),
            _react2.default.createElement(
              'p',
              null,
              this.state.address.city
            ),
            _react2.default.createElement(
              'p',
              null,
              this.state.address.land
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _ContactRecallModal2.default.footer },
          _react2.default.createElement(
            'div',
            { className: _ContactRecallModal2.default.footerRight },
            _react2.default.createElement(
              'button',
              {
                className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default, _ContactRecallModal2.default.button),
                onClick: function onClick(e) {
                  return _this4.edit(e);
                } },
              _react2.default.createElement(
                'span',
                { className: _buttons2.default.text },
                'MODIFIER'
              )
            ),
            _react2.default.createElement(
              'button',
              {
                onClick: function onClick(e) {
                  return _this4.remove(e);
                },
                className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.assertive, _ContactRecallModal2.default.button) },
              _react2.default.createElement(
                'span',
                { className: _buttons2.default.text },
                'SUPPRIMER'
              )
            ),
            _react2.default.createElement(
              'button',
              {
                onClick: function onClick(e) {
                  return _this4.close(e);
                },
                className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default, _ContactRecallModal2.default.button)
              },
              'ANNULER'
            )
          )
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.state.edit) return this.renderEdition();else return this.renderView();
    }
  }]);

  return ContactModal;
}(_react.Component);

exports.default = ContactModal;


var ifStyle = function ifStyle(condition, style) {
  if (condition) return style;
  return {};
};

/***/ }),

/***/ "./src/components/modals/ImporterModal.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _ImporterModal = __webpack_require__("./src/styles/ImporterModal.scss");

var _ImporterModal2 = _interopRequireDefault(_ImporterModal);

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _DirectoryPicker = __webpack_require__("./src/components/elements/DirectoryPicker.jsx");

var _DirectoryPicker2 = _interopRequireDefault(_DirectoryPicker);

var _reactDropzone = __webpack_require__("./node_modules/react-dropzone/dist/index.js");

var _reactDropzone2 = _interopRequireDefault(_reactDropzone);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

var _constants = __webpack_require__("./src/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImportDocument = function ImportDocument(_ref) {
    var item = _ref.item,
        currentType = _ref.currentType,
        onDocChange = _ref.onDocChange,
        toobig = _ref.toobig;


    var typesByGroup = (0, _fileTypes.getTypesByGroup)();
    var isDirectory = item.isDirectory || false;

    if (!item.typeFile) {
        if (currentType != '') {
            item.typeFile = currentType;
        } else {
            item.typeFile = '';
        }
    }
    var preview = '/images/file.png';

    if (/^image\//.test(item.type)) {
        preview = item.preview;
    }

    if (isDirectory) preview = '/images/folder.png';

    return _react2.default.createElement(
        'div',
        { style: toobig ? { borderColor: '#ff3f3a' } : {}, className: _ImporterModal2.default.doc, onClick: function onClick(e) {
                return e.stopPropagation();
            } },
        _react2.default.createElement(
            'div',
            { className: _ImporterModal2.default.image },
            _react2.default.createElement('object', { data: preview, type: 'application/pdf' })
        ),
        _react2.default.createElement(
            'span',
            { className: _ImporterModal2.default.docName },
            item.name
        ),
        toobig && _react2.default.createElement(
            'span',
            { style: { color: '#ff3f3a', fontSize: '12px' } },
            'Trop lourd (> 20Mo)'
        )
    );
};

var ImporterModal = function (_Component) {
    _inherits(ImporterModal, _Component);

    function ImporterModal(props, context) {
        _classCallCheck(this, ImporterModal);

        var _this = _possibleConstructorReturn(this, (ImporterModal.__proto__ || Object.getPrototypeOf(ImporterModal)).call(this, props, context));

        _this.state = {
            documents: [],
            dropzoneActive: false
        };
        return _this;
    }

    _createClass(ImporterModal, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(props, context) {

            // Réinitialise la modal
            this.setState({
                dropzoneActive: false
            });
        }
    }, {
        key: 'cancel',
        value: function cancel(e) {
            e.stopPropagation();
            this.props.closePortal();
        }
    }, {
        key: 'next',
        value: function next() {
            this.props.onChangeView(_constants.VIEW_DIR);
        }
    }, {
        key: 'prev',
        value: function prev() {
            this.props.onChangeView(_constants.VIEW_FILE);
        }
    }, {
        key: 'import',
        value: function _import(e) {
            var _this2 = this;

            console.log(this.props.folder);
            if (this.state.documents.length > 0) {
                cozy.client.files.statByPath(_constants.ROOT_PATH + '/' + this.props.folder).then(function (stat) {
                    return _this2.props.onImport(_this2.state.documents, stat._id);
                    location.reload();
                }).then(function (data) {
                    if (data.files) {
                        var toImport = data.files.filter(function (f) {
                            return f.size <= _constants.MAX_FILE_SIZE;
                        });
                        if (toImport.length > 0) {
                            _this2.props.onImportDone(toImport);
                            // location.reload();
                        }
                    }
                });
            }
            this.cancel(e);
        }
    }, {
        key: '_dropFiles',
        value: function _dropFiles(f, e) {
            var _this3 = this;

            e.preventDefault();
            e.stopPropagation();

            if (e.dataTransfer) {

                if (e.dataTransfer.items) {
                    var items = e.dataTransfer.items;

                    var filesPromise = [];

                    var _loop = function _loop(i, item) {
                        // Skip this one if we didn't get a file.
                        if (item.kind != 'file') {
                            return 'continue';
                        }
                        var entry = item.webkitGetAsEntry();
                        if (entry.isDirectory) {

                            var readEntries = function readEntries(dirReader, entries) {
                                return new Promise(function (resolve, reject) {
                                    dirReader.readEntries(function (results) {
                                        if (!results.length) {
                                            return resolve(entries);
                                        } else {
                                            return Promise.all(results.map(function (r) {
                                                return new Promise(function (resolve, reject) {
                                                    if (r.isDirectory) return resolve();
                                                    r.file(resolve, reject);
                                                });
                                            })).then(function (files) {
                                                entries = entries.concat(files.slice().filter(function (f) {
                                                    return !!f;
                                                }));
                                                return readEntries(dirReader, entries).then(function (e) {
                                                    return resolve(e);
                                                });
                                            });
                                        }
                                    }, reject);
                                });
                            };

                            var dirReader = entry.createReader();
                            filesPromise.push(); //Read folder content

                            var p = readEntries(dirReader, []).then(function (content) {
                                return {
                                    name: entry.name,
                                    isDirectory: true,
                                    content: content
                                };
                            });

                            filesPromise.push(p);
                        } else if (entry.isFile) {
                            var _p = new Promise(function (resolve, reject) {
                                entry.file(resolve, reject);
                            }).then(function (e) {
                                return [e];
                            });

                            filesPromise.push(_p);
                        }
                    };

                    for (var i = 0, item; item = items[i]; ++i) {
                        var _ret = _loop(i, item);

                        if (_ret === 'continue') continue;
                    }

                    Promise.all(filesPromise).then(function (files) {
                        return _lodash2.default.flatten(files);
                    }).then(function (files) {
                        return _this3.addFiles(files);
                    });
                } else if (e.dataTransfer.files) {
                    var files = Array.prototype.slice.call(e.dataTransfer.files);
                    this.addFiles(files);
                } else {
                    console.error('Error can\'t read files');
                }
            } else if (e.target.files) {
                this.addFiles(e.target.files);
            }
        }
    }, {
        key: 'addFiles',
        value: function addFiles(files) {

            var oldDocs = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.state.documents[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var oldD = _step.value;

                    var ok = true;
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;

                    try {
                        for (var _iterator3 = files[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var newD = _step3.value;

                            if (newD.name === oldD.name) {
                                ok = false;
                                break;
                            }
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3;
                            }
                        }
                    }

                    if (ok) oldDocs.push(oldD);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (this.props.currentType) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = files[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var d = _step2.value;

                        d.typeFile = this.props.currentType;
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }

            this.setState({
                dropzoneActive: false,
                documents: [].concat(oldDocs, _toConsumableArray(files))
            });
        }
    }, {
        key: '_dragEnter',
        value: function _dragEnter(e) {
            if (e.dataTransfer.types[0] === "Files") {
                this.setState({
                    dropzoneActive: true
                });
            }
        }
    }, {
        key: '_dragLeave',
        value: function _dragLeave(e) {
            this.setState({
                dropzoneActive: false
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            return _react2.default.createElement(
                'div',
                { onClick: function onClick(e) {
                        return e.stopPropagation();
                    }, className: _ImporterModal2.default.main },
                _react2.default.createElement(
                    'div',
                    { className: _ImporterModal2.default.file },
                    _react2.default.createElement(
                        'div',
                        { className: _ImporterModal2.default.header },
                        _react2.default.createElement(
                            'span',
                            null,
                            'AJOUTER DES FICHIERS'
                        ),
                        _react2.default.createElement(
                            'button',
                            { className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable, _buttons2.default.clear), onClick: function onClick(e) {
                                    return _this4.cancel(e);
                                } },
                            _react2.default.createElement('i', { className: 'ion-ios-close-empty' })
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _ImporterModal2.default.content },
                        _react2.default.createElement(
                            _reactDropzone2.default,
                            {
                                ref: 'dropzone',
                                disableClick: false,
                                disablePreview: false,
                                className: (0, _classnames2.default)(_ImporterModal2.default.dropzone, _defineProperty({}, _ImporterModal2.default.active, this.state.dropzoneActive)),
                                onDrop: function onDrop(files, non, e) {
                                    return _this4._dropFiles(files, e);
                                },
                                onDragEnter: function onDragEnter(e) {
                                    return _this4._dragEnter(e);
                                },
                                onDragLeave: function onDragLeave(e) {
                                    return _this4._dragLeave(e);
                                },
                                inputProps: { capture: true }
                            },
                            this.state.documents.map(function (doc, key) {
                                return _react2.default.createElement(ImportDocument, { toobig: doc.size > _constants.MAX_FILE_SIZE, key: key, item: doc, onDocChange: function onDocChange() {
                                        return _this4.setState({});
                                    }, currentType: _this4.props.currentType });
                            }),
                            this.state.documents.length == 0 ? _react2.default.createElement(
                                'span',
                                { className: _ImporterModal2.default.message },
                                'd\xE9posez vos fichiers ici'
                            ) : null
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _ImporterModal2.default.footer },
                        _react2.default.createElement(
                            'button',
                            { type: 'button', className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable), onClick: function onClick(e) {
                                    return _this4.cancel(e);
                                } },
                            _react2.default.createElement('i', { className: 'ion-ios-close-empty' }),
                            'ANNULER'
                        ),
                        _react2.default.createElement(
                            'button',
                            { type: 'button', className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable), onClick: function onClick(e) {
                                    return _this4.import(e);
                                } },
                            _react2.default.createElement('i', { className: 'ion-ios-cloud-upload-outline' }),
                            'OK'
                        )
                    )
                )
            );
        }
    }]);

    return ImporterModal;
}(_react.Component);

exports.default = ImporterModal;

/***/ }),

/***/ "./src/components/modals/Modal.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Modal = undefined;

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _Modal = __webpack_require__("./src/styles/Modal.scss");

var _Modal2 = _interopRequireDefault(_Modal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Modal = exports.Modal = function Modal(_ref) {
    var closePortal = _ref.closePortal,
        children = _ref.children,
        onClickOutside = _ref.onClickOutside;


    if (typeof children.type === 'function') {
        children = _react2.default.cloneElement(children, { closePortal: closePortal });
    }

    var handleClickOutside = onClickOutside || closePortal;

    return _react2.default.createElement(
        'div',
        { className: _Modal2.default.modal, onClick: handleClickOutside },
        children
    );
};

exports.default = Modal;

/***/ }),

/***/ "./src/components/modals/SelectorModal.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _ImporterModal = __webpack_require__("./src/styles/ImporterModal.scss");

var _ImporterModal2 = _interopRequireDefault(_ImporterModal);

var _buttons = __webpack_require__("./src/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _DirectoryPicker = __webpack_require__("./src/components/elements/DirectoryPicker.jsx");

var _DirectoryPicker2 = _interopRequireDefault(_DirectoryPicker);

var _constants = __webpack_require__("./src/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SelectorModal = function (_Component) {
    _inherits(SelectorModal, _Component);

    function SelectorModal(props, context) {
        _classCallCheck(this, SelectorModal);

        return _possibleConstructorReturn(this, (SelectorModal.__proto__ || Object.getPrototypeOf(SelectorModal)).call(this, props, context));
    }

    _createClass(SelectorModal, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(props, context) {}
    }, {
        key: 'cancel',
        value: function cancel(e) {
            e.stopPropagation();
            this.props.closePortal();
        }
    }, {
        key: 'select',
        value: function select(e) {
            this.props.onSelect(this.props.currentPath);

            this.cancel(e);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
                'div',
                { onClick: function onClick(e) {
                        return e.stopPropagation();
                    }, className: _ImporterModal2.default.main },
                _react2.default.createElement(
                    'div',
                    { className: _ImporterModal2.default.dir },
                    _react2.default.createElement(
                        'div',
                        { className: _ImporterModal2.default.header },
                        _react2.default.createElement(
                            'span',
                            null,
                            'CHOISIR UN EMPLACEMENT'
                        ),
                        _react2.default.createElement(
                            'button',
                            { className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable, _buttons2.default.clear), onClick: function onClick(e) {
                                    return _this2.cancel(e);
                                } },
                            _react2.default.createElement('i', { className: 'ion-ios-close-empty' })
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _ImporterModal2.default.content },
                        _react2.default.createElement(_DirectoryPicker2.default, {
                            dirs: this.props.documentsTree,
                            root: _constants.ROOT_PATH,
                            files: this.props.files || false,
                            hideFiles: this.props.hideFiles || false,
                            'default': this.props.currentPath,
                            rootDirectoryName: _constants.ROOT_NAME,
                            onPathChange: function onPathChange(path) {
                                return _this2.props.onDirectoryChange(path);
                            } })
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _ImporterModal2.default.footer },
                        _react2.default.createElement(
                            'button',
                            { type: 'button', className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable), onClick: function onClick(e) {
                                    return _this2.cancel(e);
                                } },
                            _react2.default.createElement('i', { className: 'ion-ios-arrow-left' }),
                            'ANNULER'
                        ),
                        _react2.default.createElement(
                            'button',
                            { type: 'button', className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable), onClick: function onClick(e) {
                                    return _this2.select(e);
                                } },
                            _react2.default.createElement('i', { className: 'ion-ios-browsers-outline' }),
                            'SELECTIONNER'
                        )
                    )
                )
            );
        }
    }]);

    return SelectorModal;
}(_react.Component);

exports.default = SelectorModal;

/***/ }),

/***/ "./src/components/utils/CustomInput.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _reactDatepicker = __webpack_require__("./node_modules/react-datepicker/es/index.js");

var _reactDatepicker2 = _interopRequireDefault(_reactDatepicker);

var _moment = __webpack_require__("./node_modules/moment/moment.js");

var _moment2 = _interopRequireDefault(_moment);

__webpack_require__("./src/styles/react-datepicker.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CustomInput = function (_Component) {
    _inherits(CustomInput, _Component);

    function CustomInput(props, context) {
        _classCallCheck(this, CustomInput);

        var _this = _possibleConstructorReturn(this, (CustomInput.__proto__ || Object.getPrototypeOf(CustomInput)).call(this, props, context));

        _this.state = {
            value: ''
        };
        return _this;
    }

    _createClass(CustomInput, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.state.value = this.props.value;
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
            this.state.value = newProps.value;
        }
    }, {
        key: 'onChangePhone',
        value: function onChangePhone(value) {
            // check if is a phone number
            var checkPhone = /0\d?([. -]?\d\d){0,4}\d?/;

            this.onChange(value);
        }
    }, {
        key: 'onChange',
        value: function onChange(value) {
            if (this.props.type === "date") {
                if (value && value.isValid()) {
                    value = value.format('DD/MM/YYYY');
                } else {
                    value = (0, _moment2.default)().format('DD/MM/YYYY');
                }
            }

            this.setState({ value: value });
            this.props.onChange(value);
        }
    }, {
        key: 'onChangeMulti',
        value: function onChangeMulti(v, index) {
            var value = this.state.value;
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') value = {};

            value[index] = v;

            this.setState({ value: value });
            this.props.onChange(value);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var value = this.state.value;
            var type = this.props.type || 'text';

            switch (type) {
                case 'boolean':
                    return _react2.default.createElement(
                        'select',
                        { autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, onChange: function onChange(e) {
                                return _this2.onChange(e.target.value);
                            } },
                        _react2.default.createElement(
                            'option',
                            { value: 0 },
                            'Non'
                        ),
                        _react2.default.createElement(
                            'option',
                            { value: 1 },
                            'Oui'
                        )
                    );

                case 'list':
                    if ((!value || value === '') && this.props.values) {
                        setTimeout(function () {
                            return _this2.props.onChange(_this2.props.values[0]);
                        });
                    }
                    return _react2.default.createElement(
                        'select',
                        { autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, onChange: function onChange(e) {
                                return _this2.onChange(e.target.value);
                            } },
                        this.props.values.map(function (item, key) {
                            return _react2.default.createElement(
                                'option',
                                { key: key, value: item },
                                item
                            );
                        })
                    );

                case 'listYears':
                    var currentYear = new Date().getFullYear();
                    var minYear = 1900;

                    var years = [];
                    for (var i = minYear; i <= currentYear; i++) {
                        years.unshift(i);
                    }if (!value || value === '') {
                        setTimeout(function () {
                            return _this2.props.onChange(currentYear);
                        });
                    }
                    return _react2.default.createElement(
                        'select',
                        { autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, onChange: function onChange(e) {
                                return _this2.onChange(e.target.value);
                            } },
                        years.map(function (item, key) {
                            return _react2.default.createElement(
                                'option',
                                { key: key, value: item },
                                item
                            );
                        })
                    );

                case 'date':

                    if (!value) {
                        value = (0, _moment2.default)();
                        // this.props.onChange(value.format('DD/MM/YYYY'))
                    } else {
                        value = (0, _moment2.default)(value, 'DD/MM/YYYY');
                    }

                    return _react2.default.createElement(_reactDatepicker2.default, {
                        dateFormat: 'DD/MM/YYYY',
                        locale: 'fr-fr',
                        isClearable: false,
                        selected: value,

                        dropdownMode: 'select',
                        onChange: function onChange(e) {
                            return _this2.onChange(e);
                        } });

                case 'email':
                    return _react2.default.createElement('input', { type: 'email', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, onChange: function onChange(e) {
                            return _this2.onChange(e.target.value);
                        }, placeholder: this.props.title });

                case 'telephone':
                    return _react2.default.createElement('input', { type: 'tel', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, onChange: function onChange(e) {
                            return _this2.onChangePhone(e.target.value);
                        }, placeholder: this.props.title });

                case 'textarea':
                    return _react2.default.createElement('textarea', { autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, onChange: function onChange(e) {
                            return _this2.onChange(e.target.value);
                        }, placeholder: this.props.title });

                case 'contract':
                    value = value || {};
                    return _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.company, onChange: function onChange(e) {
                                return _this2.onChangeMulti(e.target.value, "company");
                            }, placeholder: "Société" }),
                        _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.address, onChange: function onChange(e) {
                                return _this2.onChangeMulti(e.target.value, "address");
                            }, placeholder: "Adresse" }),
                        _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.email, onChange: function onChange(e) {
                                return _this2.onChangeMulti(e.target.value, "email");
                            }, placeholder: "Email" }),
                        _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.telephone, onChange: function onChange(e) {
                                return _this2.onChangeMulti(e.target.value, "telephone");
                            }, placeholder: "Téléphone" })
                    );

                case 'address':
                    value = value || {};
                    return _react2.default.createElement(
                        'div',
                        { className: 'adress' },
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 100 + '%' } },
                            _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.way, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "way");
                                }, placeholder: "Voie" })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 50 + '%', marginTop: 10 + 'px' } },
                            _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.code, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "code");
                                }, placeholder: "Code postal" })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 50 + '%', marginTop: 10 + 'px' } },
                            _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.city, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "city");
                                }, placeholder: "Ville" })
                        )
                    );

                case 'birthdate':
                    value = value || {};
                    return _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 33 + '%' } },
                            _react2.default.createElement('input', { type: 'number', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.day, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "day");
                                }, placeholder: "Jour" })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 33 + '%' } },
                            _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.month, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "month");
                                }, placeholder: "Mois" })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 33 + '%' } },
                            _react2.default.createElement('input', { type: 'number', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.year, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "year");
                                }, placeholder: "Année" })
                        )
                    );

                case 'interlocuteur':
                    value = value || {};
                    return _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 33 + '%' } },
                            _react2.default.createElement(
                                'select',
                                { autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.civility, onChange: function onChange(e) {
                                        return _this2.onChangeMulti(e.target.value, "civility");
                                    } },
                                _react2.default.createElement(
                                    'option',
                                    { key: 'Madame', value: 0 },
                                    'Madame'
                                ),
                                _react2.default.createElement(
                                    'option',
                                    { key: 'Monsieur', value: 1 },
                                    'Monsieur'
                                ),
                                _react2.default.createElement(
                                    'option',
                                    { key: 'Autre', value: 2 },
                                    'Autre'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 33 + '%' } },
                            _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.lastname, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "lastname");
                                }, placeholder: "Nom de famille" })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 33 + '%' } },
                            _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.firstname, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "firstname");
                                }, placeholder: "Prénom" })
                        )
                    );

                default:
                    return _react2.default.createElement('input', { type: type, autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, placeholder: this.props.title, onChange: function onChange(e) {
                            return _this2.onChange(e.target.value);
                        } });

            }
        }
    }]);

    return CustomInput;
}(_react.Component);

exports.default = CustomInput;

/***/ }),

/***/ "./src/constants/data/contact.json":
/***/ (function(module, exports) {

module.exports = [{"name":"Informations principales","group":[{"key":"medecin","name":"Médecin Traitant","doctype":"com.empreinte.Fcontacts","excerpt":"Il est la première personne à prévenir en cas de décès à domicile. Si la mort survient à l'hôpital, les services se chargeront de la démarche. Le médecin constate la mort et produit le certificat indispensable à l’établissement de l'acte de décès.","location":"/Empreinte/Funerals Contact","type":"medecin","letter":false,"delay":"IMMÉDIATEMENT","perso":0},{"key":"mairie","name":"Mairie","doctype":"com.empreinte.Fcontacts","excerpt":"Prévenir la mairie sera l'une des toutes premières démarches à effectuer, dans les 24 heures après le constat de décès. C'est l'administration qui établira l'acte de décès. Ses copies seront souvent demandées par la suite.","location":"/Empreinte/Funerals Contact","type":"mairie","letter":false,"delay":"DANS LES 24 HEURES","perso":0},{"key":"pole_emploi","name":"Pôle Emploi","doctype":"com.empreinte.Fcontacts","excerpt":"Pour interrompre le versement des allocations chômages, l'établissement administratif Pôle emploi doit être prévenu du décès de la personne par simple courrier. La démarche peut également donner lieu au versement d'une allocation décès pour le conjoint.","location":"/Empreinte/Funerals Contact","type":"pole_emploi","letter":true,"delay":"DANS LES 48 HEURES","perso":0},{"key":"employeur","name":"Employeur","doctype":"com.empreinte.Fcontacts","excerpt":"Informer l'employeur du décès du salarié pour obtenir le solde de tout compte, le certificat de travail, …","location":"/Empreinte/Funerals Contact","type":"employeur","letter":true,"delay":"DANS LES 48 HEURES","perso":0},{"key":"banque","name":"Banque","doctype":"com.empreinte.Fcontacts","excerpt":"L'une des premières démarches d'ordre administratif à effectuer est de transmettre un acte de décès à la banque du défunt. L'établissement est dans l'obligation de bloquer le compte à la date du décès, d'annuler les procurations, de récupérer les moyens de paiements. Les sommes d'argent seront rendues disponibles après le règlement de la succession.","location":"/Empreinte/Funerals Contact","type":"banque","letter":true,"delay":"DANS LA SEMAINE","perso":0},{"key":"credit","name":"Organisme de crédit","doctype":"com.empreinte.Fcontacts","excerpt":"En cas de crédit en cours de remboursement, l'organisme prêteur doit être prévenu du décès. L'assurance éventuellement souscrite pourra alors acquitter les sommes restantes dues. Sinon, ce sont les avoirs du défunt qui servent à solder les dettes en cours.","location":"/Empreinte/Funerals Contact","type":"credit","letter":true,"delay":"DANS LA SEMAINE","perso":0},{"key":"complementaire_maladie","name":"Mutuelle de santé complémentaire","doctype":"com.empreinte.Fcontacts","excerpt":"Il s’agit des complémentaires santé. Ces organismes peuvent verser un capital décès aux conjoint, enfants ou ascendants.","location":"/Empreinte/Funerals Contact","type":"complementaire_maladie","letter":true,"delay":"DANS LA SEMAINE","perso":0},{"key":"service_domicile","name":"Salarié ou association de service à domicile","doctype":"com.empreinte.Fcontacts","excerpt":"Si vous ou votre proche employait une aide à domicile selon un contrat CESU (Chèque emploi service universel), le décès entraîne la fin automatique du contrat de travail. Il sera toutefois nécessaire de lui adresser une lettre de licenciement.","location":"/Empreinte/Funerals Contact","type":"salarie_association","letter":true,"delay":"DANS LES 7 JOURS","perso":0},{"key":"cpam","name":"Régime Général de santé","doctype":"com.empreinte.Fcontacts","excerpt":"Comme tous les autres organismes, la Sécurité sociale doit être prévenu dans de courts délais après un décès. La démarche, assortie de la production de l’acte de décès, déclenchera une série d’ajustements administratifs et l’éventuel versement de droits.","location":"/Empreinte/Funerals Contact","type":"cpam","letter":true,"delay":"DANS LES 7 JOURS","perso":0},{"key":"assurance_material","name":"Assurance matériel","doctype":"com.empreinte.Fcontacts","excerpt":"Transférer ou résilier les assurances habitation, responsabilité civile et véhicule.","location":"/Empreinte/Funerals Contact","type":"assurance_material","letter":true,"delay":"DANS LE MOIS","perso":0},{"key":"assurance_person","name":"Assurance vie","doctype":"com.empreinte.Fcontacts","excerpt":"Prévenir l'assureur est l'une des actions prioritaires à effectuer. La mise à jour du dossier stoppe le versement des cotisations et peut donner droit à des allocations ou même faire bénéficier du tiers payant obsèques dans certains cas.","location":"/Empreinte/Funerals Contact","type":"assurance_person","letter":true,"delay":"DANS LE MOIS","perso":0},{"key":"notaire","name":"Notaire","doctype":"com.empreinte.Fcontacts","excerpt":"Il est un intervenant clé dans le règlement de la succession du défunt. Ici, la fiche contact du notaire à qui le testament a été confié ou celui qui connait la situation familiale et patrimoniale, sera d'une grande utilité pour la suite.","location":"/Empreinte/Funerals Contact","type":"notaire","letter":true,"delay":"DANS LE MOIS","perso":0},{"key":"retraite","name":"Caisse de retraite","doctype":"com.empreinte.Fcontacts","excerpt":"Le conjoint ou ex-conjoint peut bénéficier du versement d'une pension de réversion versée par la caisse de retraite. L'organisme, dont les coordonnées auront été renseignées dans l'Espace privé, pourra initier les règlements (souvent trimestriels) dans les délais d'autant plus raisonnables qu'il sera prévenu tôt.","location":"/Empreinte/Funerals Contact","type":"retraite","letter":true,"delay":"DANS LE MOIS","perso":0},{"key":"caf","name":"Caisse d'allocations familiales","doctype":"com.empreinte.Fcontacts","excerpt":"La CAF dispose de lettres types qui servent à prévenir l’organisme du décès d’un proche. Ici, vous pourrez renseigner l’adresse de la caisse dont vous dépendez et votre numéro d’allocataire. La démarche peut donner lieu à l’ouverture de droits. Un certificat de décès sera également nécessaire.","location":"/Empreinte/Funerals Contact","type":"administratif","letter":true,"delay":"DANS LE MOIS","perso":0},{"key":"bailleur","name":"Bailleur ou syndic si co-propriété","doctype":"com.empreinte.Fcontacts","excerpt":"Il est un intervenant clé dans le règlement de la succession du défunt. Ici, la fiche contact du notaire à qui le testament a été confié ou celui qui connait la situation familiale et patrimoniale, sera d'une grande utilité pour la suite.","location":"/Empreinte/Funerals Contact","type":"bailleur","letter":true,"delay":"DANS LE MOIS","perso":0},{"key":"conseil_general","name":"Conseil général","doctype":"com.empreinte.Fcontacts","excerpt":"Des prestations sociales comme l’allocation personnalisée d’autonomie seront interrompues.","location":"/Empreinte/Funerals Contact","type":"organism_payer","letter":true,"delay":"DANS LE MOIS","perso":0},{"key":"prefecture","name":"Préfecture","doctype":"com.empreinte.Fcontacts","excerpt":"Les coordonnées de la Préfecture dont vous dépendez seront utiles pour effectuer des démarches relatives à l'automobile notamment : changer de nom sur la carte grise suite à une succession par exemple.","location":"/Empreinte/Funerals Contact","type":"organism_payer","letter":true,"delay":"DANS LE MOIS","perso":0},{"key":"poste","name":"Poste","doctype":"com.empreinte.Fcontacts","excerpt":"Le service de distribution du courrier a lui-même une adresse postale. Le cas échéant, en cas de changement d'adresse, il faudra le prévenir de la nécessité de faire suivre le courrier.","location":"/Empreinte/Funerals Contact","type":"organism_payer","letter":true,"delay":"DANS LE MOIS","perso":0},{"key":"telecom","name":"Opérateur Télécom","doctype":"com.empreinte.Fcontacts","excerpt":"Il faut prévenir l'opérateur qui détient les contrats téléphonique, internet, télévision... afin de les résilier ou les transférer sur un nouveau titulaire.","location":"/Empreinte/Funerals Contact","type":"organism_payer","letter":true,"delay":"DANS LE MOIS","perso":0},{"key":"energy","name":"Fournisseur d'énergie","doctype":"com.empreinte.Fcontacts","excerpt":"Les contrats qui vous lient aux fournisseurs d'énergie doivent être résiliés ou mis à jour s'ils étaient établis au nom du défunt.","location":"/Empreinte/Funerals Contact","type":"organism_payer","letter":true,"delay":"DANS LE MOIS","perso":0},{"key":"water","name":"Régie de l'eau","doctype":"com.empreinte.Fcontacts","excerpt":"Comme tous les fournisseurs d'énergie à votre domicile, les services des eaux ont conclu un contrat avec le propriétaire. Si vous l'êtes, les proches devront signaler votre décès pour résilier l'acte ou le mettre à jour.","location":"/Empreinte/Funerals Contact","type":"organism_payer","letter":true,"delay":"DANS LE MOIS","perso":0},{"key":"impot","name":"Centre d'impot","doctype":"com.empreinte.Fcontacts","excerpt":"Quand la succession sera réglée, l'administration fiscale devra être prévenue pour prendre en compte les nouvelles situations financières. L’aide d’un notaire pour bien comprendre et suivre les événements s’avère souvent nécessaire.","location":"/Empreinte/Funerals Contact","type":"impot","letter":true,"delay":"DANS LES 6 MOIS","perso":0}]}]

/***/ }),

/***/ "./src/constants/data/contactTypes.json":
/***/ (function(module, exports) {

module.exports = ["Rénovation générale","Plomberie","Electricité","Couverture","Chauffage/Ventilation/Climatisation","Peinture","Banque","Assurance","Notaire","Agence Immobilière","Courtier","Opérateur téléphonie/internet","Gardien(ne)","Syndic","Autre"]

/***/ }),

/***/ "./src/constants/data/diagnosis.json":
/***/ (function(module, exports) {

module.exports = [{"name":"Informations principales","group":[{"name":"type","display":"Type","type":"list","values":["DPE","ERNMT","Plomb (CREP)","Amiante (DAPP)","Installation intérieur élétricité","Installation intérieur de gaz","autre"],"required":true,"question":"Quel est le type de diagnostic effectué ?"},{"name":"name","display":"Nom","question":"Quel est l'intitulé du diagnostic ?"},{"name":"date","display":"Date de réalisation","type":"date","required":true,"question":"A quelle date ?"},{"name":"expirationDate","display":"Date d'expiration","type":"date","question":"Quand expire t-il ?"},{"name":"DPEEnergyClass","display":"Étiquette énergétique DPE","depend":{"key":"type","value":"DPE"},"question":"Quelle est l'étiquette énergétique calculée durant le diagnostic ?","type":"list","values":["A","B","C","D","E","F"]},{"name":"realEnergyConsommation","display":"consommation conventionnelle kWh/m².an","type":"number","depend":{"key":"type","value":"DPE"},"question":"Quelle est la consommation conventionnelle calculée durant le diagnostic ?"},{"name":"carbonClass","display":"Étiquette carbon","depend":{"key":"type","value":"DPE"},"question":"Quelle est l'étiquette carbone calculée durant le diagnostic ?","type":"list","values":["A","B","C","D","E","F"]},{"name":"CO2emission","display":"estimation émission kg eq CO2 / m².an","type":"number","depend":{"key":"type","value":"DPE"},"question":"Quelle est l'estimation d'émission calculée durant le diagnostic ?"},{"name":"cep","display":"Coefficient Cep","type":"number","depend":{"key":"type","value":"DPE"},"question":"Quel est le coefficient CEP calculé durant le diagnostic ?"},{"name":"bbio","display":"Coefficient Bbio","type":"number","depend":{"key":"type","value":"DPE"},"question":"Quel est le coefficient BBio calculé durant le diagnostic ?"},{"name":"tic","display":"Valeur TIC","type":"number","depend":{"key":"type","value":"DPE"},"question":"Quelle est la valeur TIC calculée durant le diagnostic ? (degré celsius)"}]},{"name":"Donnée","group":[{"name":"thermalBridge","display":"Pont thermal"},{"name":"ventilation","display":"Ventilation"},{"name":"lighting","display":"Lumière"}]},{"name":"Données d'équipements","group":[{"name":"heat","display":"Chaleur"},{"name":"cold","display":"Froid"},{"name":"sanitary","display":"Sanitaire"}]}]

/***/ }),

/***/ "./src/constants/data/equipment.json":
/***/ (function(module, exports) {

module.exports = [{"name":"Informations principales","group":[{"name":"type","display":"Type","type":"list","values":["Ventilation naturelle","VMC","VMC Gaz","Autre système de ventilation","Eau chaude sanitaire électrique","Eau chaude sanitaire thermodynamique","Eau chaude solaire","Chaudière à gaz","Chaudière fuel","Poêle à bois","Cheminée, foyer, insert","Radiateurs électriques","Chauffage solaire","Pompe à chaleur","Climatiseur","Installation photovoltaïques","Réfrigérateur","Lave-linge","Cuisinière","Table de cuisson","Four","Lave-vaisselle","Cave à vin","Sèche-linge","Box de pilotage maison","Box internet/télévision","Autre"],"required":true,"question":"De quel type est votre équipement ?"},{"name":"name","display":"Nom","question":"Quelle est le nom de votre équipement ?"},{"name":"brand","display":"Marque","question":"Quelle est la marque de votre équipement ?"},{"name":"model","display":"Modèle","depend":"brand","question":"Quel est le modèle de votre équipement ?"},{"name":"buyDate","display":"Date d'achat","type":"date","question":"Quand avez-vous acheté cet équipement ?"},{"name":"installDate","display":"Date d'installation","type":"date","question":"Quand avez-vous installé cet équipement ?"},{"name":"guaranteeEndDate","display":"Date de fin de garantie","type":"date","question":"Quelle est la date de fin de garantie ?"},{"name":"lastMaintenanceDate","display":"Date de la dernière maintenance","type":"date","question":"Quelle est la date du dernier entretien ?"},{"name":"energyClass","display":"Classe énergetique","question":"Quelle est la classe énergétique de cet équipement ?"}]}]

/***/ }),

/***/ "./src/constants/data/funerals/contact.json":
/***/ (function(module, exports) {

module.exports = {"employeur":[{"name":" ","excerpt":"sartek la guepe","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de la personne"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"info","display":"Intitulé de l'emploi"}]]}],"pole_emploi":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de la personne"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"identifiant","display":"N°d'identifiant"}],[{"name":"contract_owner","display":"Nom de la personne ayant droit"}],[{"name":"lien","display":"Lien de parenté"}]]}],"banque":[{"name":" ","excerpt":"","import":true,"group":[[{"type":"info","data":"<p>À la suite du décès, 2 possibilités concernant le compte :<br />1. bloquer le compte<br />2. transformer le compte joint</p>"}],[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de la banque"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"account_to_delete","display":"Bloquer le compte n°"}],[{"name":"account_to_transform","display":"Demander à ransformer le compte joint n°"}],[{"name":"person_name","display":"Nom de la personne pour le compte"}],[{"name":"assurence_number","display":"Si prêt, demande du capital décès"}]]}],"credit":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de l'organisme"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"credit_number","display":"N° de crédit"}]]}],"complementaire_maladie":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de l'organisme"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"health_number","display":"N° d'assuré"}],[{"name":"keep_person","display":"Nom de la personne restant assurée"}]]}],"salarie_association":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de l'organisme"}],[{"name":"address","display":"Adresse du salarié","type":"address"}],[{"name":"address","hide":true}],[{"name":"name","hide":true}]]}],"cpam":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de l'organisme"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"ss_number","display":"N° d'immatriculation"}],[{"name":"person","display":"Nom de la personne ayant droit"}]]}],"assurance_material":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de l'organisme"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"societaire_number","display":"N° sociétaire"}],[{"name":"transfert_name","display":"Nom de la personne pour le transfert"}],[{"name":"contrat_type","display":"Types de contrats à résilier"}],[{"name":"new_address","display":"Nouvelle adresse de facturation"}],[{"name":"remboursement","display":"Remboursement pour la préiode suivante"}]]}],"assurance_person":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de l'organisme"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"societaire_number","display":"N° contrat"}],[{"name":"presta_adresse","display":"Coordonnée du prestataire funéraire à régler"}]]}],"notaire":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"notaire_name","display":"Nom et prénom du Notaire"}],[{"name":"address","display":"Adresse","type":"address"}]]}],"retraite":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de l'organisme"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"subscribe_number","display":"N° d'inscription"}],[{"name":"capital","display":"Nom de la personne pour le capital décès"}],[{"name":"pension","display":"Nom de la personne pour la pension de réversion"}]]}],"bailleur":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"bailleur_name","display":"Nom du bailleur"}],[{"name":"address","display":"Adresse du bailleur","type":"address"}],[{"name":"date","display":"Date d'établissement du bail"}],[{"name":"bail","display":"Nom de la personne pour le transfert du bail"}],[{"name":"address","hide":true}]]}],"locataire":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de la personne"}],[{"name":"address","display":"Adresse","type":"address"}]]}],"caf":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de l'organisme"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"allocation_number","display":"N° d'allocataire"}],[{"name":"contract_owner","display":"Nom de la personne ayant droit"}]]}],"organism_payer":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de l'organisme"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"contract_number","display":"N° du contrat"}],[{"name":"transfert","display":"Nom de la personne pour transfert du contrat"}],[{"name":"compte_number","display":"Prélèvement sur n°de compte"}],[{"name":"address","hide":true}]]}],"impot":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Nom de l'organisme"}],[{"name":"address","display":"Adresse","type":"address"}]]}],"default":[{"name":" ","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Organisme"}],[{"name":"interlocuteur","display":"Interlocuteur","type":"interlocuteur"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"telephone","type":"telephone","display":"Numéro de  téléphone"},{"name":"telecopie","display":"Numéro de  télécopie"},{"name":"email","display":"Email","type":"email"}]]}]}

/***/ }),

/***/ "./src/constants/data/funerals/last_will.json":
/***/ (function(module, exports) {

module.exports = [{"name":"Mes dernieres Volontés","excerpt":"Les dernières volontés peuvent être des souhaits précis sur la manière dont seront organisées les obsèques.\n Ou uniquement des grandes lignes (cérémonie et sépulture) pour laisser aux proches le soin de l'organisation des obsèques.","description":" ","group":[[{"name":"obsequeType","display":"Le type d'obsèques","type":"list","values":["Inhumation","Crémation"]}],[{"name":"cimetiere","display":"Le choix du cimetière","type":"textarea"}],[{"name":"localisation","display":"L'emplacement","type":"list","values":["Avec concession funéraire (pour un cercueil)","Avec concession cinéraire (pour une urne)","Sans concession","Caveau existant"]}],[{"name":"siCremation","display":"Si crélation, le choix du dépôt ou de la dispersion des cendres","type":"list","values":["Columbarium","Sépulture familiale","Dispersion dans le jardin des souvenirs","Dispersion en pleine nature","Dispersion en pleine mer"]}],[{"name":"ceremonial","display":"Le choix du type de cérémonie","type":"list","values":["Pas de cérémonie","Cérémonie civile","Cérémonie catholique","Cérémonie musulmane","Cérémonie protestante","Cérémonie juive","Cérémonie orthodoxe","Autre (à préciser dans le rubrique \"La personalisation de la cérémonie\""]}],[{"name":"personalisation","display":"La personnalisation de la cérémonie","type":"textarea"}]]}]

/***/ }),

/***/ "./src/constants/data/home.json":
/***/ (function(module, exports) {

module.exports = [{"name":"Fiche Info","excerpt":"Cette fiche contact permet d'identifier la personne détentrice de l'espace privé. ","group":[[{"name":"civilite","display":"Civilité","type":"list","values":["Madame","Monsieur","Autre"]},{"name":"name","display":"Nom"},{"name":"firstname","display":"Prénom"}],[{"name":"birthdate","type":"birthdate","display":"Date de naissance"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"telephone","type":"telephone","display":"Numéro de  téléphone"},{"name":"email","display":"EMAIL","type":"email"}]]}]

/***/ }),

/***/ "./src/constants/filetypes.json":
/***/ (function(module, exports) {

module.exports = [{"name":"Données contractuelles de propriétés","location":"/Documents de propriété","types":[{"key":"deed_of_superficies","name":"Acte de propriété"},{"key":"plans","name":"Plans"},{"key":"home_picture","name":"Photos du bien"},{"key":"5","name":"Justificatif sur l'état de l'installation ou du raccord au réseau d'assainissement","perso":true},{"key":"sales_agreement","name":"Compromis de vente","perso":true}]},{"name":"Equipements","location":"/Équipements","types":[{"key":"equipments_notice","name":"Notice d’utilisation des équipements"},{"key":"equipment_invoice","name":"Devis, facture d'équipement"}]},{"name":"Travaux","location":"/Travaux","types":[{"key":"works_invoice","name":"Devis, facture, éléments d’une opération de travaux"}]},{"name":"Entretien","location":"/Entretiens","types":[{"key":"maintenance_contract","name":"Contrat d'entretien"}]},{"name":"Données logements privées","location":"/Usages","perso":true,"types":[{"key":"supplies_contract","name":"Contrat de fourniture énergies"},{"key":"water_contract","name":"Contrat d'eau"},{"key":"telecom_contract","name":"Contrat télécom"},{"key":"house_insurance","name":"Assurance habitation"},{"key":"rent_receipt","name":"Quittance de loyer"},{"key":"TV_invoice","name":"Facture TV"},{"key":"box_invoice","name":"Facture box"},{"key":"internet_invoice","name":"Facture internet"},{"key":"phone_invoice","name":"Facture téléphone fixe"},{"key":"mobile_phone_invoice","name":"Facture téléphone portable"},{"key":"gas_invoice","name":"Facture gaz"},{"key":"electricity_invoice","name":"Facture électricité"},{"key":"water_invoice","name":"Facture eau"},{"key":"status_report","name":"Etat des lieux"},{"key":"home_insurance","name":"Contrat / attestation assurance habitation"},{"key":"car_insurance","name":"Contrat / attestation assurance voiture"},{"key":"identity_card","name":"Carte d’identité"},{"key":"bank_details","name":"RIB"},{"key":"estimate","name":"Devis"},{"key":"lease_agreement","name":"Contrat de bail"},{"key":"tax_notice","name":"Avis d’imposition"},{"key":"identity_document","name":"Document d’identité"},{"key":"pay_slip","name":"Bulletin de salaire"},{"key":"property_tax","name":"Taxe foncière"},{"key":"housing_tax","name":"Taxe d’habitation"},{"key":"family_record_book","name":"Livret de famille"},{"key":"marriage_certificate","name":"Acte de mariage ou de Pacs (Pacte civil de solidarité)"},{"key":"maintemance_invoice","name":"Factures entretien / réparation"},{"key":"accident_picture","name":"Photos sinistre"}]},{"name":"Diagnostics","location":"/Diagnostics","types":[{"key":"energetics_diagnosis","name":"Diagnostic de Performance Energétique"},{"key":"ernmt_diagnosis","name":"État des Risques Naturels, Miniers et Technologiques (ERNMT)"},{"key":"lead_diagnosis","name":"Plomb (CREP)"},{"key":"asbestos_diagnosis","name":"Amiante (DAPP)"},{"key":"electricity_diagnosis","name":"Diagnostic Electricité"},{"key":"gas_diagnosis","name":"Diagnostic Gaz"}]},{"name":"Copropriété","location":"/Documents de propriété","types":[{"key":"condominium_regulation","name":"Règlement de copropriété"},{"key":"1","name":"Procès-verbaux des 3 dernières AG"},{"key":"2","name":"Fiche synthétique de copropriété"},{"key":"3","name":"Carnet d’entretien de la copropriété"},{"key":"4","name":"Impayés de charges au sein du syndicat et dettes"}]}]

/***/ }),

/***/ "./src/constants/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var VERSION = exports.VERSION = '1.0.172';

var DOCTYPE_EQUIPMENTS = exports.DOCTYPE_EQUIPMENTS = 'com.empreinte.equipment';
var DOCTYPE_WORKS = exports.DOCTYPE_WORKS = 'com.empreinte.work';
var DOCTYPE_MAINTENANCES = exports.DOCTYPE_MAINTENANCES = 'com.empreinte.maintenance';
var DOCTYPE_DIAGNOSIS = exports.DOCTYPE_DIAGNOSIS = 'com.empreinte.diagnosis';
var DOCTYPE_HOMEDATA = exports.DOCTYPE_HOMEDATA = 'com.empreinte.homeData';
var DOCTYPE_F_LASTWILL = exports.DOCTYPE_F_LASTWILL = 'com.empreinte.FLastWill';
var DOCTYPE_F_CONTACTS = exports.DOCTYPE_F_CONTACTS = 'io.cozy.contacts';
var DOCTYPE_F_CUSTOMCONTACTS = exports.DOCTYPE_F_CUSTOMCONTACTS = 'com.empreinte.Fcustomcontacts';

var DOCTYPE_CONTACTS = exports.DOCTYPE_CONTACTS = 'com.empreinte.contacts';
var DOCTYPE_RECALLS = exports.DOCTYPE_RECALLS = 'com.empreinte.recalls';
var DOCTYPE_META = exports.DOCTYPE_META = 'com.empreinte.meta';
var DOCTYPE_NEWS = exports.DOCTYPE_NEWS = 'com.empreinte.news';
var DOCTYPE_DPE = exports.DOCTYPE_DPE = 'com.empreinte.dpe';

var COZY_ROOT_ID = exports.COZY_ROOT_ID = "io.cozy.files.root-dir";
var ROOT_PATH = exports.ROOT_PATH = "/Empreinte";
var ROOT_NAME = exports.ROOT_NAME = "/Documents";
var DATA_PATH = exports.DATA_PATH = "/data";

var DATA_LIST = exports.DATA_LIST = [{
    name: 'Mes Dernières Volontés',
    singleName: 'Volontés',
    addButton: 'Compléter',
    path: ROOT_PATH + '/Funerals',
    doctype: DOCTYPE_F_LASTWILL,
    slug: 'lastwill'
}, {
    name: 'Mes contacts administratifs',
    singleName: 'funeralsContact',
    addButton: 'Compléter',
    path: ROOT_PATH + '/Funerals',
    doctype: DOCTYPE_F_CONTACTS,
    slug: 'fcontacts'
}, {
    name: 'Mes contacts administratifs',
    singleName: 'funeralsCustomContact',
    addButton: 'Compléter',
    path: ROOT_PATH + '/Funerals',
    doctype: DOCTYPE_F_CUSTOMCONTACTS,
    slug: 'fcustomcontacts'
}, {
    name: 'Diagnostics',
    singleName: 'Diagnostic',
    addButton: 'Ajouter un diagnostic',
    path: ROOT_PATH + '/Diagnostics',
    doctype: DOCTYPE_DIAGNOSIS,
    slug: 'diagnosis'
}, {
    name: 'Données principales',
    singleName: 'Donnée principales',
    addButton: 'Compléter',
    path: ROOT_PATH + '/Documents principales',
    doctype: DOCTYPE_HOMEDATA,
    slug: 'homedata'
}, {
    name: 'Équipements',
    singleName: 'Équipement',
    addButton: 'Ajouter un Équipement',
    path: ROOT_PATH + '/Équipements',
    doctype: DOCTYPE_EQUIPMENTS,
    slug: 'equipments'
}, {
    name: 'Travaux',
    singleName: 'Travaux',
    addButton: 'Ajouter des travaux',
    path: ROOT_PATH + '/Travaux',
    doctype: DOCTYPE_WORKS,
    slug: 'works'
}, {
    name: 'Entretien',
    singleName: 'Entretien',
    addButton: 'Ajouter des entretiens',
    path: ROOT_PATH + '/Entretiens',
    doctype: DOCTYPE_MAINTENANCES,
    slug: 'maintenances'
}, {
    name: 'DPE',
    singleName: 'DPE',
    addButton: 'Calculer son DPE',
    path: ROOT_PATH + '/Diagnostics',
    doctype: DOCTYPE_DPE,
    slug: 'dpe'
}];

var FOLDER_LIST = exports.FOLDER_LIST = [ROOT_PATH + '/presta-funeraire', ROOT_PATH + '/don-corps'];

var STATUS_DONE = exports.STATUS_DONE = 'loaded';
var STATUS_LOAD = exports.STATUS_LOAD = 'pending';
var STATUS_ERROR = exports.STATUS_ERROR = 'failed';

var VIEW_LIST = exports.VIEW_LIST = "VIEW_LIST";
var VIEW_GRID = exports.VIEW_GRID = "VIEW_GRID";

var VIEW_FILE = exports.VIEW_FILE = "VIEW_FILE";
var VIEW_DIR = exports.VIEW_DIR = "VIEW_DIR";

var SORT_NAME = exports.SORT_NAME = "SORT_NAME";
var SORT_DATE = exports.SORT_DATE = "SORT_DATE";

var TYPE_FOLDER = exports.TYPE_FOLDER = "TYPE_FOLDER";
var TYPE_FILE = exports.TYPE_FILE = "TYPE_FILE";

var ALERT_LEVEL_INFO = exports.ALERT_LEVEL_INFO = 'alert_info';
var ALERT_LEVEL_ERROR = exports.ALERT_LEVEL_ERROR = 'alert_error';

var MAX_FILE_SIZE = exports.MAX_FILE_SIZE = 20 * 1024 * 1024; //20Mo

/***/ }),

/***/ "./src/constants/types.json":
/***/ (function(module, exports) {

module.exports = [{"type":"medecin","unique":false,"name":"Médecin Traitant"},{"type":"mairie","unique":false,"name":"Mairie"},{"type":"pole_emploi","unique":false,"name":"Pôle Emploi"},{"type":"employeur","unique":false,"name":"Employeur"},{"type":"banque","unique":false,"name":"Banque"},{"type":"credit","unique":false,"name":"Organisme de crédit"},{"type":"complementaire_maladie","unique":false,"name":"Mutuelle de santé complémentaire"},{"type":"service_domicile","unique":false,"name":"Salarié ou association de service à domicile"},{"type":"cpam","unique":false,"name":"Régime Général de santé"},{"type":"assurance_material","unique":false,"name":"Assurance matériel"},{"type":"assurance_person","unique":false,"name":"Assurance vie"},{"type":"notaire","unique":false,"name":"Notaire"},{"type":"retraite","unique":false,"name":"Caisse de retraite"},{"type":"bailleur","unique":false,"name":"Bailleur"},{"type":"locataire","unique":false,"delay":"DANS LE MOIS","name":"Locataire"},{"type":"caf","unique":false,"delay":"DANS LE MOIS","name":"Caisse d'allocations familiales"},{"type":"organism_payer","unique":false,"delay":"DANS LE MOIS","name":"Organismes payeurs"},{"type":"impot","unique":false,"delay":"DANS LES 6 MOIS","name":"Centre des impôts"},{"type":"default","unique":false,"delay":"DANS LES 6 MOIS","name":"Autre"}]

/***/ }),

/***/ "./src/containers/App.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _constants = __webpack_require__("./src/constants/index.js");

var _App = __webpack_require__("./src/App.jsx");

var _App2 = _interopRequireDefault(_App);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        initilizeGauge: function initilizeGauge() {
            dispatch((0, _actions.gaugeInitialize)());
        },
        initilizeDocs: function initilizeDocs() {
            dispatch((0, _actions.documentsInitialize)());
        },
        alert: function alert(msg, level) {
            dispatch((0, _actions.alertShow)(msg, level));
        },
        reloadDocs: function reloadDocs() {
            dispatch((0, _actions.loadFolder)(_constants.ROOT_PATH));
        }
    };
};

var ConnectedApp = (0, _reactRedux.connect)(null, mapDispatchToProps)(_App2.default);

exports.default = ConnectedApp;

/***/ }),

/***/ "./src/containers/Association.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Association = __webpack_require__("./src/components/letter/Association.jsx");

var _Association2 = _interopRequireDefault(_Association);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedAssociation = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Association2.default);

exports.default = ConnectedAssociation;

/***/ }),

/***/ "./src/containers/Assurance.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Assurance = __webpack_require__("./src/components/letter/Assurance.jsx");

var _Assurance2 = _interopRequireDefault(_Assurance);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedAssurance = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Assurance2.default);

exports.default = ConnectedAssurance;

/***/ }),

/***/ "./src/containers/Bailleur.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Bailleur = __webpack_require__("./src/components/letter/Bailleur.jsx");

var _Bailleur2 = _interopRequireDefault(_Bailleur);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedBailleur = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Bailleur2.default);

exports.default = ConnectedBailleur;

/***/ }),

/***/ "./src/containers/Banque.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Banque = __webpack_require__("./src/components/letter/Banque.jsx");

var _Banque2 = _interopRequireDefault(_Banque);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedBanque = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Banque2.default);

exports.default = ConnectedBanque;

/***/ }),

/***/ "./src/containers/CaisseAllocation.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _CaisseAllocation = __webpack_require__("./src/components/letter/CaisseAllocation.jsx");

var _CaisseAllocation2 = _interopRequireDefault(_CaisseAllocation);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedCaisseAllocation = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_CaisseAllocation2.default);

exports.default = ConnectedCaisseAllocation;

/***/ }),

/***/ "./src/containers/Complementaire.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Complementaire = __webpack_require__("./src/components/letter/Complementaire.jsx");

var _Complementaire2 = _interopRequireDefault(_Complementaire);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedComplementaire = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Complementaire2.default);

exports.default = ConnectedComplementaire;

/***/ }),

/***/ "./src/containers/Contacts.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Contacts = __webpack_require__("./src/components/elements/Contacts.js");

var _Contacts2 = _interopRequireDefault(_Contacts);

var _confirm = __webpack_require__("./src/scripts/confirm.js");

var _confirm2 = _interopRequireDefault(_confirm);

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _ConfirmModal = __webpack_require__("./src/components/modals/ConfirmModal.jsx");

var _ConfirmModal2 = _interopRequireDefault(_ConfirmModal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var modal = _react2.default.createElement(
    _ConfirmModal2.default,
    null,
    _react2.default.createElement(
        'p',
        null,
        'Voulez-vous supprimer ce contact ?'
    )
);

var mapStateToProps = function mapStateToProps(state) {
    return {
        elements: state.contacts.elements,
        count: state.contacts.elementCount,
        selectedCount: state.contacts.selectedCount,
        status: state.contacts.fetchStatus
    };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        onSelectContact: function onSelectContact(contact) {
            dispatch((0, _actions.contactsSelect)(contact));
        },
        onNewContact: function onNewContact(name, data) {
            dispatch((0, _actions.contactsNew)(name, data));
        },
        onRemoveContacts: function onRemoveContacts(contacts) {
            (0, _confirm2.default)(modal).then(function () {
                return dispatch((0, _actions.contactsRemove)(contacts));
            }).catch(function (err) {});
        },
        onSaveContact: function onSaveContact(id, data) {
            dispatch((0, _actions.contactsSave)(id, data));
        },
        onLoadContacts: function onLoadContacts() {
            dispatch((0, _actions.loadContacts)());
        }
    };
};

var ConnectedContacts = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Contacts2.default);

exports.default = ConnectedContacts;

/***/ }),

/***/ "./src/containers/Credit.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Credit = __webpack_require__("./src/components/letter/Credit.jsx");

var _Credit2 = _interopRequireDefault(_Credit);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedCredit = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Credit2.default);

exports.default = ConnectedCredit;

/***/ }),

/***/ "./src/containers/Data.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Data = __webpack_require__("./src/components/elements/Data.jsx");

var _Data2 = _interopRequireDefault(_Data);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
    return {
        current: state.data.current,
        status: state.data.fetchStatus
    };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        onLoadData: function onLoadData(doctype, id) {
            dispatch((0, _actions.dataLoad)(doctype, id));
        },
        dataSave: function dataSave(doctype, data) {
            return dispatch((0, _actions.dataSave)(doctype, data._id, data));
        },
        dataRemove: function dataRemove(doctype, data) {
            return dispatch((0, _actions.dataRemove)(doctype, data));
        },
        onImporterClick: function onImporterClick(path) {
            dispatch((0, _actions.importerClick)(path));
        },
        fileUpload: function fileUpload(path, dirId) {
            return dispatch((0, _actions.importerFilesUpload)(path, dirId));
        }
    };
};

var ConnectedData = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Data2.default);

exports.default = ConnectedData;

/***/ }),

/***/ "./src/containers/DataForm.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _DataForm = __webpack_require__("./src/components/elements/DataForm.jsx");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _data = __webpack_require__("./src/actions/data.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        onNewData: function onNewData(doctype, data) {
            return dispatch((0, _actions.dataNew)(doctype, data));
        },
        onSaveData: function onSaveData(doctype, id, data) {
            return dispatch((0, _data.dataSave)(doctype, id, data));
        }
    };
};

var ConnectedDataForm = (0, _reactRedux.connect)(null, mapDispatchToProps)(_DataForm2.default);

exports.default = ConnectedDataForm;

/***/ }),

/***/ "./src/containers/Devis.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Devis = __webpack_require__("./src/components/elements/Devis.jsx");

var _Devis2 = _interopRequireDefault(_Devis);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    },
    onUploadFile: function onUploadFile(files, DirId) {
      dispatch((0, _actions.importerFilesUpload)(files, DirId));
    },
    onLoadFolder: function onLoadFolder(path) {
      dispatch((0, _actions.loadFolder)(path));
    }

  };
};

var ConnectedDevis = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Devis2.default);

exports.default = ConnectedDevis;

/***/ }),

/***/ "./src/containers/Don.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Don = __webpack_require__("./src/components/elements/Don.jsx");

var _Don2 = _interopRequireDefault(_Don);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedDon = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Don2.default);

exports.default = ConnectedDon;

/***/ }),

/***/ "./src/containers/DonDevis.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _DonDevis = __webpack_require__("./src/components/elements/DonDevis.jsx");

var _DonDevis2 = _interopRequireDefault(_DonDevis);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    },
    onUploadFile: function onUploadFile(files, DirId) {
      dispatch((0, _actions.importerFilesUpload)(files, DirId));
    },
    onLoadFolder: function onLoadFolder(path) {
      dispatch((0, _actions.loadFolder)(path));
    }

  };
};

var ConnectedDonDevis = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_DonDevis2.default);

exports.default = ConnectedDonDevis;

/***/ }),

/***/ "./src/containers/Dossier.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Dossier = __webpack_require__("./src/components/elements/Dossier.jsx");

var _Dossier2 = _interopRequireDefault(_Dossier);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedDossier = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Dossier2.default);

exports.default = ConnectedDossier;

/***/ }),

/***/ "./src/containers/Employeur.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Employeur = __webpack_require__("./src/components/letter/Employeur.jsx");

var _Employeur2 = _interopRequireDefault(_Employeur);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedEmployeur = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Employeur2.default);

exports.default = ConnectedEmployeur;

/***/ }),

/***/ "./src/containers/FuneralList.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _FuneralList = __webpack_require__("./src/components/elements/FuneralList.jsx");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedFuneralList = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_FuneralList2.default);

exports.default = ConnectedFuneralList;

/***/ }),

/***/ "./src/containers/Home.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Home = __webpack_require__("./src/components/elements/Home.js");

var _Home2 = _interopRequireDefault(_Home);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedHome = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Home2.default);

exports.default = ConnectedHome;

/***/ }),

/***/ "./src/containers/Importer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _ImporterModal = __webpack_require__("./src/components/modals/ImporterModal.jsx");

var _ImporterModal2 = _interopRequireDefault(_ImporterModal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
    return {
        currentType: state.importer.currentType,
        currentPath: state.importer.currentPath,
        documentsTree: state.importer.documentsTree,
        view: state.importer.view
    };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        onDirectoryChange: function onDirectoryChange(path) {
            dispatch((0, _actions.importerDirectoryChange)(path));
        },
        onImport: function onImport(docs, dirId) {
            return dispatch((0, _actions.importerFilesUpload)(docs, dirId));
        },
        onTree: function onTree() {
            dispatch((0, _actions.importerTree)());
        },
        onChangeView: function onChangeView(view) {
            dispatch((0, _actions.importerViewChange)(view));
        }
    };
};

var ConnectedImporter = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_ImporterModal2.default);

exports.default = ConnectedImporter;

/***/ }),

/***/ "./src/containers/Impot.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Impot = __webpack_require__("./src/components/letter/Impot.jsx");

var _Impot2 = _interopRequireDefault(_Impot);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedImpot = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Impot2.default);

exports.default = ConnectedImpot;

/***/ }),

/***/ "./src/containers/Mairie.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Mairie = __webpack_require__("./src/components/letter/Mairie.jsx");

var _Mairie2 = _interopRequireDefault(_Mairie);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedMairie = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Mairie2.default);

exports.default = ConnectedMairie;

/***/ }),

/***/ "./src/containers/Medecin.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Medecin = __webpack_require__("./src/components/letter/Medecin.jsx");

var _Medecin2 = _interopRequireDefault(_Medecin);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedMedecin = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Medecin2.default);

exports.default = ConnectedMedecin;

/***/ }),

/***/ "./src/containers/Navigation.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _Navigation = __webpack_require__("./src/components/elements/Navigation.js");

var _Navigation2 = _interopRequireDefault(_Navigation);

var _reactRouterDom = __webpack_require__("./node_modules/react-router-dom/es/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onOpenFolder: function onOpenFolder() {
      console.log('onOpenFolder');
    },
    onOpenContacts: function onOpenContacts() {
      console.log('onOpenContacts');
    },
    onOpenRecalls: function onOpenRecalls() {
      console.log('onOpenRecalls');
    },
    onOpenTrash: function onOpenTrash() {
      console.log('onOpenTrash');
    }
  };
};

var ConnectedNavigation = (0, _reactRedux.connect)(null, mapDispatchToProps)(_Navigation2.default);

exports.default = (0, _reactRouterDom.withRouter)(ConnectedNavigation);

/***/ }),

/***/ "./src/containers/Notaire.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Notaire = __webpack_require__("./src/components/letter/Notaire.jsx");

var _Notaire2 = _interopRequireDefault(_Notaire);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedNotaire = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Notaire2.default);

exports.default = ConnectedNotaire;

/***/ }),

/***/ "./src/containers/Organisme.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Organisme = __webpack_require__("./src/components/letter/Organisme.jsx");

var _Organisme2 = _interopRequireDefault(_Organisme);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedOrganisme = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Organisme2.default);

exports.default = ConnectedOrganisme;

/***/ }),

/***/ "./src/containers/Preferences.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Preferences = __webpack_require__("./src/components/elements/Preferences.jsx");

var _Preferences2 = _interopRequireDefault(_Preferences);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        alert: function alert(msg, lvl) {
            dispatch((0, _actions.alertShow)(msg, lvl));
        }
    };
};

var ConnectedPreferences = (0, _reactRedux.connect)(null, mapDispatchToProps)(_Preferences2.default);

exports.default = ConnectedPreferences;

/***/ }),

/***/ "./src/containers/Retraite.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _Retraite = __webpack_require__("./src/components/letter/Retraite.jsx");

var _Retraite2 = _interopRequireDefault(_Retraite);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedRetraite = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Retraite2.default);

exports.default = ConnectedRetraite;

/***/ }),

/***/ "./src/containers/SecuriteSociale.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _SecuriteSociale = __webpack_require__("./src/components/letter/SecuriteSociale.jsx");

var _SecuriteSociale2 = _interopRequireDefault(_SecuriteSociale);

var _fileTypes = __webpack_require__("./src/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedSecuriteSociale = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_SecuriteSociale2.default);

exports.default = ConnectedSecuriteSociale;

/***/ }),

/***/ "./src/containers/Selector.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _SelectorModal = __webpack_require__("./src/components/modals/SelectorModal.jsx");

var _SelectorModal2 = _interopRequireDefault(_SelectorModal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
    return {
        currentPath: state.importer.currentPath,
        documentsTree: state.importer.documentsTree
    };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        onDirectoryChange: function onDirectoryChange(path) {
            dispatch((0, _actions.importerDirectoryChange)(path));
        }
    };
};

var ConnectedSelector = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_SelectorModal2.default);

exports.default = ConnectedSelector;

/***/ }),

/***/ "./src/fonts/Arvo-Regular.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Arvo-Regular-31c017.ttf";

/***/ }),

/***/ "./src/fonts/Roboto-Bold.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-Bold-ee7b96.ttf";

/***/ }),

/***/ "./src/fonts/Roboto-BoldItalic.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-BoldItalic-1eb7a8.ttf";

/***/ }),

/***/ "./src/fonts/Roboto-Italic.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-Italic-42bbe4.ttf";

/***/ }),

/***/ "./src/fonts/Roboto-Light.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-Light-fc84e9.ttf";

/***/ }),

/***/ "./src/fonts/Roboto-LightItalic.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-LightItalic-d1efcd.ttf";

/***/ }),

/***/ "./src/fonts/Roboto-Regular.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-Regular-3e1af3.ttf";

/***/ }),

/***/ "./src/fonts/Roboto-Thin.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-Thin-89e266.ttf";

/***/ }),

/***/ "./src/fonts/Roboto-ThinItalic.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-ThinItalic-0fc253.ttf";

/***/ }),

/***/ "./src/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__("./node_modules/babel-polyfill/lib/index.js");

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__("./node_modules/react-dom/index.js");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _App = __webpack_require__("./src/containers/App.jsx");

var _App2 = _interopRequireDefault(_App);

var _store = __webpack_require__("./src/store/index.js");

var _store2 = _interopRequireDefault(_store);

__webpack_require__("./node_modules/normalize-css/normalize.css");

__webpack_require__("./node_modules/bootstrap/dist/css/bootstrap.min.css");

__webpack_require__("./node_modules/font-awesome/css/font-awesome.css");

__webpack_require__("./node_modules/Ionicons/css/ionicons.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var root = document.querySelector('[role=application]');
var data = root.dataset;

console.log('Current Version:', '1.0.172');

document.addEventListener('DOMContentLoaded', function () {

  cozy.client.init({
    cozyURL: '//' + data.cozyDomain,
    token: data.cozyToken
  });

  window.cozy.bar.init({
    appName: data.cozyAppName,
    appEditor: data.cozyAppEditor,
    iconPath: data.cozyIconPath,
    lang: data.cozyLocale,
    replaceTitleOnMobile: true
  });

  var store = (0, _store2.default)();

  // Initialise cozybar
  window.cozy.bar.init({
    appName: "Empreinte"
  });

  // render the main component
  _reactDom2.default.render(_react2.default.createElement(
    _reactRedux.Provider,
    { store: store },
    _react2.default.createElement(_App2.default, null)
  ), app);
});

/***/ }),

/***/ "./src/public/actions/alerts.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.alertClear = exports.alertDismiss = exports.alertShow = exports.ALERT_CLEAR = exports.ALERT_DISMISS = exports.ALERT_SHOW = undefined;

var _constants = __webpack_require__("./src/public/constants/index.js");

var ALERT_SHOW = exports.ALERT_SHOW = 'ALERT_SHOW';
var ALERT_DISMISS = exports.ALERT_DISMISS = 'ALERT_DISMISS';
var ALERT_CLEAR = exports.ALERT_CLEAR = 'ALERT_CLEAR';

var alertShow = exports.alertShow = function alertShow(message) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.ALERT_LEVEL_INFO;
    return {
        type: ALERT_SHOW,
        alert: {
            id: Date.now(),
            message: message,
            level: level
        }
    };
};

var alertDismiss = exports.alertDismiss = function alertDismiss(id) {
    return { type: ALERT_DISMISS, id: id };
};

var alertClear = exports.alertClear = function alertClear() {
    return { type: ALERT_CLEAR };
};

/***/ }),

/***/ "./src/public/actions/contacts.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.contactsSave = exports.contactsNew = exports.contactsRestore = exports.contactsRemove = exports.contactsSelect = exports.CONTACTS_SELECT = exports.CONTACTS_RESTORE_FAILURE = exports.CONTACTS_RESTORE_SUCCESS = exports.CONTACTS_RESTORE = exports.CONTACTS_REMOVE_FAILURE = exports.CONTACTS_REMOVE_SUCCESS = exports.CONTACTS_REMOVE = exports.CONTACTS_SAVE_FAILURE = exports.CONTACTS_SAVE_SUCCESS = exports.CONTACTS_SAVE = exports.CONTACTS_NEW_FAILURE = exports.CONTACTS_NEW_SUCCESS = exports.CONTACTS_NEW = undefined;

var _constants = __webpack_require__("./src/public/constants/index.js");

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var CONTACTS_NEW = exports.CONTACTS_NEW = "CONTACTS_NEW";
var CONTACTS_NEW_SUCCESS = exports.CONTACTS_NEW_SUCCESS = "CONTACTS_NEW_SUCCESS";
var CONTACTS_NEW_FAILURE = exports.CONTACTS_NEW_FAILURE = "CONTACTS_NEW_FAILURE";
var CONTACTS_SAVE = exports.CONTACTS_SAVE = "CONTACTS_SAVE";
var CONTACTS_SAVE_SUCCESS = exports.CONTACTS_SAVE_SUCCESS = "CONTACTS_SAVE_SUCCESS";
var CONTACTS_SAVE_FAILURE = exports.CONTACTS_SAVE_FAILURE = "CONTACTS_SAVE_FAILURE";
var CONTACTS_REMOVE = exports.CONTACTS_REMOVE = "CONTACTS_REMOVE";
var CONTACTS_REMOVE_SUCCESS = exports.CONTACTS_REMOVE_SUCCESS = "CONTACTS_REMOVE_SUCCESS";
var CONTACTS_REMOVE_FAILURE = exports.CONTACTS_REMOVE_FAILURE = "CONTACTS_REMOVE_FAILURE";
var CONTACTS_RESTORE = exports.CONTACTS_RESTORE = "CONTACTS_RESTORE";
var CONTACTS_RESTORE_SUCCESS = exports.CONTACTS_RESTORE_SUCCESS = "CONTACTS_RESTORE_SUCCESS";
var CONTACTS_RESTORE_FAILURE = exports.CONTACTS_RESTORE_FAILURE = "CONTACTS_RESTORE_FAILURE";
var CONTACTS_SELECT = exports.CONTACTS_SELECT = "CONTACTS_SELECT";

var contactsSelect = exports.contactsSelect = function contactsSelect(contact) {
    return { type: CONTACTS_SELECT, contact: contact };
}; //or with id

var contactsRemove = exports.contactsRemove = function contactsRemove(contacts) {
    return function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {
            var removed, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, contact;

            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            dispatch({ type: CONTACTS_REMOVE, contacts: contacts });
                            _context.prev = 1;
                            removed = [];
                            _iteratorNormalCompletion = true;
                            _didIteratorError = false;
                            _iteratorError = undefined;
                            _context.prev = 6;
                            _iterator = contacts[Symbol.iterator]();

                        case 8:
                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                _context.next = 18;
                                break;
                            }

                            contact = _step.value;
                            _context.t0 = removed;
                            _context.next = 13;
                            return cozy.client.data.updateAttributes(_constants.DOCTYPE_CONTACTS, contact._id, { trash: true });

                        case 13:
                            _context.t1 = _context.sent;

                            _context.t0.push.call(_context.t0, _context.t1);

                        case 15:
                            _iteratorNormalCompletion = true;
                            _context.next = 8;
                            break;

                        case 18:
                            _context.next = 24;
                            break;

                        case 20:
                            _context.prev = 20;
                            _context.t2 = _context["catch"](6);
                            _didIteratorError = true;
                            _iteratorError = _context.t2;

                        case 24:
                            _context.prev = 24;
                            _context.prev = 25;

                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }

                        case 27:
                            _context.prev = 27;

                            if (!_didIteratorError) {
                                _context.next = 30;
                                break;
                            }

                            throw _iteratorError;

                        case 30:
                            return _context.finish(27);

                        case 31:
                            return _context.finish(24);

                        case 32:
                            return _context.abrupt("return", dispatch({ type: CONTACTS_REMOVE_SUCCESS, ids: removed.map(function (f) {
                                    return f._id;
                                }) }));

                        case 35:
                            _context.prev = 35;
                            _context.t3 = _context["catch"](1);
                            return _context.abrupt("return", dispatch({ type: CONTACTS_REMOVE_FAILURE, err: _context.t3 }));

                        case 38:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, undefined, [[1, 35], [6, 20, 24, 32], [25,, 27, 31]]);
        }));

        return function (_x, _x2) {
            return _ref.apply(this, arguments);
        };
    }();
};

var contactsRestore = exports.contactsRestore = function contactsRestore(contacts) {
    return function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dispatch, getState) {
            var restored, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, contact;

            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            dispatch({ type: CONTACTS_RESTORE, contacts: contacts });
                            _context2.prev = 1;
                            restored = [];
                            _iteratorNormalCompletion2 = true;
                            _didIteratorError2 = false;
                            _iteratorError2 = undefined;
                            _context2.prev = 6;
                            _iterator2 = contacts[Symbol.iterator]();

                        case 8:
                            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                _context2.next = 18;
                                break;
                            }

                            contact = _step2.value;
                            _context2.t0 = restored;
                            _context2.next = 13;
                            return cozy.client.data.updateAttributes(_constants.DOCTYPE_CONTACTS, contact._id, { trash: false });

                        case 13:
                            _context2.t1 = _context2.sent;

                            _context2.t0.push.call(_context2.t0, _context2.t1);

                        case 15:
                            _iteratorNormalCompletion2 = true;
                            _context2.next = 8;
                            break;

                        case 18:
                            _context2.next = 24;
                            break;

                        case 20:
                            _context2.prev = 20;
                            _context2.t2 = _context2["catch"](6);
                            _didIteratorError2 = true;
                            _iteratorError2 = _context2.t2;

                        case 24:
                            _context2.prev = 24;
                            _context2.prev = 25;

                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }

                        case 27:
                            _context2.prev = 27;

                            if (!_didIteratorError2) {
                                _context2.next = 30;
                                break;
                            }

                            throw _iteratorError2;

                        case 30:
                            return _context2.finish(27);

                        case 31:
                            return _context2.finish(24);

                        case 32:
                            return _context2.abrupt("return", dispatch({ type: CONTACTS_RESTORE_SUCCESS, ids: restored.map(function (f) {
                                    return f._id;
                                }) }));

                        case 35:
                            _context2.prev = 35;
                            _context2.t3 = _context2["catch"](1);
                            return _context2.abrupt("return", dispatch({ type: CONTACTS_RESTORE_FAILURE, err: _context2.t3 }));

                        case 38:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, _callee2, undefined, [[1, 35], [6, 20, 24, 32], [25,, 27, 31]]);
        }));

        return function (_x3, _x4) {
            return _ref2.apply(this, arguments);
        };
    }();
};

var contactsNew = exports.contactsNew = function contactsNew(name, data) {
    return function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(dispatch, getState) {
            var contact;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            dispatch({ type: CONTACTS_NEW, name: name });

                            _context3.prev = 1;
                            _context3.next = 4;
                            return cozy.client.data.create(_constants.DOCTYPE_CONTACTS, data);

                        case 4:
                            contact = _context3.sent;
                            return _context3.abrupt("return", dispatch({ type: CONTACTS_NEW_SUCCESS, contact: contact }));

                        case 8:
                            _context3.prev = 8;
                            _context3.t0 = _context3["catch"](1);
                            return _context3.abrupt("return", dispatch({ type: CONTACTS_NEW_FAILURE, err: _context3.t0 }));

                        case 11:
                        case "end":
                            return _context3.stop();
                    }
                }
            }, _callee3, undefined, [[1, 8]]);
        }));

        return function (_x5, _x6) {
            return _ref3.apply(this, arguments);
        };
    }();
};

var contactsSave = exports.contactsSave = function contactsSave(id, data) {
    return function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(dispatch, getState) {
            var contact;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            dispatch({ type: CONTACTS_SAVE, id: id });

                            _context4.prev = 1;
                            _context4.next = 4;
                            return cozy.client.data.updateAttributes(_constants.DOCTYPE_CONTACTS, id, data);

                        case 4:
                            contact = _context4.sent;
                            return _context4.abrupt("return", dispatch({ type: CONTACTS_SAVE_SUCCESS, contact: contact }));

                        case 8:
                            _context4.prev = 8;
                            _context4.t0 = _context4["catch"](1);
                            return _context4.abrupt("return", dispatch({ type: CONTACTS_SAVE_FAILURE, err: _context4.t0 }));

                        case 11:
                        case "end":
                            return _context4.stop();
                    }
                }
            }, _callee4, undefined, [[1, 8]]);
        }));

        return function (_x7, _x8) {
            return _ref4.apply(this, arguments);
        };
    }();
};

/***/ }),

/***/ "./src/public/actions/data.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var DATA_REMOVE = exports.DATA_REMOVE = "DATA_REMOVE";
var DATA_REMOVE_SUCCESS = exports.DATA_REMOVE_SUCCESS = "DATA_REMOVE_SUCCESS";
var DATA_REMOVE_FAILURE = exports.DATA_REMOVE_FAILURE = "DATA_REMOVE_FAILURE";
var DATA_NEW = exports.DATA_NEW = "DATA_NEW";
var DATA_NEW_SUCCESS = exports.DATA_NEW_SUCCESS = "DATA_NEW_SUCCESS";
var DATA_NEW_FAILURE = exports.DATA_NEW_FAILURE = "DATA_NEW_FAILURE";
var DATA_SAVE = exports.DATA_SAVE = "DATA_SAVE";
var DATA_SAVE_SUCCESS = exports.DATA_SAVE_SUCCESS = "DATA_SAVE_SUCCESS";
var DATA_SAVE_FAILURE = exports.DATA_SAVE_FAILURE = "DATA_SAVE_FAILURE";
var DATA_RESTORE = exports.DATA_RESTORE = "DATA_RESTORE";
var DATA_RESTORE_SUCCESS = exports.DATA_RESTORE_SUCCESS = "DATA_RESTORE_SUCCESS";
var DATA_RESTORE_FAILURE = exports.DATA_RESTORE_FAILURE = "DATA_RESTORE_FAILURE";
var DATA_SELECT = exports.DATA_SELECT = "DATA_SELECT";
var DATA_LOAD = exports.DATA_LOAD = "DATA_LOAD";
var DATA_LOAD_SUCCESS = exports.DATA_LOAD_SUCCESS = "DATA_LOAD_SUCCESS";
var DATA_LOAD_FAILURE = exports.DATA_LOAD_FAILURE = "DATA_LOAD_FAILURE";

var dataSelect = exports.dataSelect = function dataSelect(data) {
    return {
        type: DATA_SELECT, data: data
    };
};

var dataRemove = exports.dataRemove = function dataRemove(doctype, data) {
    return function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {
            var removed, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, d;

            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            dispatch({ type: DATA_REMOVE, data: data, doctype: doctype });

                            _context.prev = 1;
                            removed = [];
                            _iteratorNormalCompletion = true;
                            _didIteratorError = false;
                            _iteratorError = undefined;
                            _context.prev = 6;
                            _iterator = data[Symbol.iterator]();

                        case 8:
                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                _context.next = 18;
                                break;
                            }

                            d = _step.value;
                            _context.t0 = removed;
                            _context.next = 13;
                            return cozy.client.data.delete(doctype, d);

                        case 13:
                            _context.t1 = _context.sent;

                            _context.t0.push.call(_context.t0, _context.t1);

                        case 15:
                            _iteratorNormalCompletion = true;
                            _context.next = 8;
                            break;

                        case 18:
                            _context.next = 24;
                            break;

                        case 20:
                            _context.prev = 20;
                            _context.t2 = _context["catch"](6);
                            _didIteratorError = true;
                            _iteratorError = _context.t2;

                        case 24:
                            _context.prev = 24;
                            _context.prev = 25;

                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }

                        case 27:
                            _context.prev = 27;

                            if (!_didIteratorError) {
                                _context.next = 30;
                                break;
                            }

                            throw _iteratorError;

                        case 30:
                            return _context.finish(27);

                        case 31:
                            return _context.finish(24);

                        case 32:
                            return _context.abrupt("return", dispatch({ type: DATA_REMOVE_SUCCESS, ids: removed.map(function (f) {
                                    return f._id;
                                }), doctype: doctype }));

                        case 35:
                            _context.prev = 35;
                            _context.t3 = _context["catch"](1);
                            return _context.abrupt("return", dispatch({ type: DATA_REMOVE_FAILURE, err: _context.t3 }));

                        case 38:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, undefined, [[1, 35], [6, 20, 24, 32], [25,, 27, 31]]);
        }));

        return function (_x, _x2) {
            return _ref.apply(this, arguments);
        };
    }();
};

var dataRestore = exports.dataRestore = function dataRestore(data) {
    return function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dispatch, getState) {
            var restored, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, d;

            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            dispatch({ type: DATA_RESTORE, data: data });
                            _context2.prev = 1;
                            restored = [];
                            _iteratorNormalCompletion2 = true;
                            _didIteratorError2 = false;
                            _iteratorError2 = undefined;
                            _context2.prev = 6;
                            _iterator2 = data[Symbol.iterator]();

                        case 8:
                            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                _context2.next = 18;
                                break;
                            }

                            d = _step2.value;
                            _context2.t0 = restored;
                            _context2.next = 13;
                            return cozy.client.data.updateAttributes(d.doctype, d._id, { trash: false });

                        case 13:
                            _context2.t1 = _context2.sent;

                            _context2.t0.push.call(_context2.t0, _context2.t1);

                        case 15:
                            _iteratorNormalCompletion2 = true;
                            _context2.next = 8;
                            break;

                        case 18:
                            _context2.next = 24;
                            break;

                        case 20:
                            _context2.prev = 20;
                            _context2.t2 = _context2["catch"](6);
                            _didIteratorError2 = true;
                            _iteratorError2 = _context2.t2;

                        case 24:
                            _context2.prev = 24;
                            _context2.prev = 25;

                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }

                        case 27:
                            _context2.prev = 27;

                            if (!_didIteratorError2) {
                                _context2.next = 30;
                                break;
                            }

                            throw _iteratorError2;

                        case 30:
                            return _context2.finish(27);

                        case 31:
                            return _context2.finish(24);

                        case 32:
                            return _context2.abrupt("return", dispatch({ type: DATA_RESTORE_SUCCESS, ids: restored.map(function (f) {
                                    return f._id;
                                }), doctypes: restored.map(function (f) {
                                    return f._type;
                                }) }));

                        case 35:
                            _context2.prev = 35;
                            _context2.t3 = _context2["catch"](1);
                            return _context2.abrupt("return", dispatch({ type: DATA_RESTORE_FAILURE, err: _context2.t3 }));

                        case 38:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, _callee2, undefined, [[1, 35], [6, 20, 24, 32], [25,, 27, 31]]);
        }));

        return function (_x3, _x4) {
            return _ref2.apply(this, arguments);
        };
    }();
};

var dataNew = exports.dataNew = function dataNew(doctype, data) {
    return function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(dispatch, getState) {
            var newData;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            dispatch({ type: DATA_NEW, data: data, doctype: doctype });

                            _context3.prev = 1;
                            _context3.next = 4;
                            return cozy.client.data.create(doctype, data);

                        case 4:
                            newData = _context3.sent;

                            console.log(newData);
                            return _context3.abrupt("return", dispatch({ type: DATA_NEW_SUCCESS, data: newData, doctype: doctype }));

                        case 9:
                            _context3.prev = 9;
                            _context3.t0 = _context3["catch"](1);
                            return _context3.abrupt("return", dispatch({ type: DATA_NEW_FAILURE, err: _context3.t0 }));

                        case 12:
                        case "end":
                            return _context3.stop();
                    }
                }
            }, _callee3, undefined, [[1, 9]]);
        }));

        return function (_x5, _x6) {
            return _ref3.apply(this, arguments);
        };
    }();
};

var dataSave = exports.dataSave = function dataSave(doctype, id, data) {
    console.log("DATA SAVE");
    console.log(data);
    return function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(dispatch, getState) {
            var newData;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            dispatch({ type: DATA_SAVE, id: id, data: data, doctype: doctype });

                            _context4.prev = 1;
                            _context4.next = 4;
                            return cozy.client.data.updateAttributes(doctype, id, data);

                        case 4:
                            newData = _context4.sent;
                            return _context4.abrupt("return", dispatch({ type: DATA_SAVE_SUCCESS, data: newData, doctype: doctype }));

                        case 8:
                            _context4.prev = 8;
                            _context4.t0 = _context4["catch"](1);
                            return _context4.abrupt("return", dispatch({ type: DATA_SAVE_FAILURE, err: _context4.t0 }));

                        case 11:
                        case "end":
                            return _context4.stop();
                    }
                }
            }, _callee4, undefined, [[1, 8]]);
        }));

        return function (_x7, _x8) {
            return _ref4.apply(this, arguments);
        };
    }();
};

var dataLoad = exports.dataLoad = function dataLoad(doctype, id) {
    return function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(dispatch, getState) {
            var data;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            dispatch({ type: DATA_LOAD, id: id, doctype: doctype });

                            _context5.prev = 1;
                            _context5.next = 4;
                            return cozy.client.data.find(doctype, id);

                        case 4:
                            data = _context5.sent;
                            return _context5.abrupt("return", dispatch({ type: DATA_LOAD_SUCCESS, data: data, doctype: doctype }));

                        case 8:
                            _context5.prev = 8;
                            _context5.t0 = _context5["catch"](1);
                            return _context5.abrupt("return", dispatch({ type: DATA_LOAD_FAILURE, err: _context5.t0 }));

                        case 11:
                        case "end":
                            return _context5.stop();
                    }
                }
            }, _callee5, undefined, [[1, 8]]);
        }));

        return function (_x9, _x10) {
            return _ref5.apply(this, arguments);
        };
    }();
};

/***/ }),

/***/ "./src/public/actions/documents.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.documentsChangeType = exports.documentsMove = exports.documentsRename = exports.documentsRestore = exports.documentsRemove = exports.documentsInitialize = exports.documentsNewFolder = exports.documentsDownload = exports.documentsClick = exports.documentsChangeViewMode = exports.documentsChangeFilter = exports.documentsSelect = exports.HTTP_CODE_CONFLICT = exports.DOCUMENTS_CHANGE_TYPE_FAILURE = exports.DOCUMENTS_CHANGE_TYPE_SUCCESS = exports.DOCUMENTS_CHANGE_TYPE = exports.DOCUMENTS_MOVE_FAILURE = exports.DOCUMENTS_MOVE_SUCCESS = exports.DOCUMENTS_MOVE = exports.DOCUMENTS_RENAME_FAILURE = exports.DOCUMENTS_RENAME_SUCCESS = exports.DOCUMENTS_RENAME = exports.DOCUMENTS_CHANGE_FILTER = exports.DOCUMENTS_CLICK = exports.DOCUMENTS_NEW_FOLDER_FAILURE_DUPLICATE = exports.DOCUMENTS_NEW_FOLDER_FAILURE_GENERIC = exports.DOCUMENTS_NEW_FOLDER_SUCCESS = exports.DOCUMENTS_NEW_FOLDER = exports.DOCUMENTS_CHANGE_VIEW_MODE = exports.DOCUMENTS_DOWNLOAD_ALL = exports.DOCUMENTS_DOWNLOAD = exports.DOCUMENTS_INITIALIZE_FAILURE = exports.DOCUMENTS_INITIALIZE_SUCCESS = exports.DOCUMENTS_INITIALIZE = exports.DOCUMENTS_RESTORE_FAILURE = exports.DOCUMENTS_RESTORE_SUCCESS = exports.DOCUMENTS_RESTORE = exports.DOCUMENTS_REMOVE_FAILURE = exports.DOCUMENTS_REMOVE_SUCCESS = exports.DOCUMENTS_REMOVE = exports.DOCUMENTS_SELECT = undefined;

var _tools = __webpack_require__("./src/public/tools/index.js");

var _constants = __webpack_require__("./src/public/constants/index.js");

var _load = __webpack_require__("./src/public/actions/load.js");

var _gauge = __webpack_require__("./src/public/actions/gauge.js");

var _importer = __webpack_require__("./src/public/actions/importer.js");

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var DOCUMENTS_SELECT = exports.DOCUMENTS_SELECT = "DOCUMENTS_SELECT";
var DOCUMENTS_REMOVE = exports.DOCUMENTS_REMOVE = "DOCUMENTS_REMOVE";
var DOCUMENTS_REMOVE_SUCCESS = exports.DOCUMENTS_REMOVE_SUCCESS = "DOCUMENTS_REMOVE_SUCCESS";
var DOCUMENTS_REMOVE_FAILURE = exports.DOCUMENTS_REMOVE_FAILURE = "DOCUMENTS_REMOVE_FAILURE";
var DOCUMENTS_RESTORE = exports.DOCUMENTS_RESTORE = "DOCUMENTS_RESTORE";
var DOCUMENTS_RESTORE_SUCCESS = exports.DOCUMENTS_RESTORE_SUCCESS = "DOCUMENTS_RESTORE_SUCCESS";
var DOCUMENTS_RESTORE_FAILURE = exports.DOCUMENTS_RESTORE_FAILURE = "DOCUMENTS_RESTORE_FAILURE";
var DOCUMENTS_INITIALIZE = exports.DOCUMENTS_INITIALIZE = "DOCUMENTS_INITIALIZE";
var DOCUMENTS_INITIALIZE_SUCCESS = exports.DOCUMENTS_INITIALIZE_SUCCESS = "DOCUMENTS_INITIALIZE_SUCCESS";
var DOCUMENTS_INITIALIZE_FAILURE = exports.DOCUMENTS_INITIALIZE_FAILURE = "DOCUMENTS_INITIALIZE_FAILURE";
var DOCUMENTS_DOWNLOAD = exports.DOCUMENTS_DOWNLOAD = "DOCUMENTS_DOWNLOAD";
var DOCUMENTS_DOWNLOAD_ALL = exports.DOCUMENTS_DOWNLOAD_ALL = "DOCUMENTS_DOWNLOAD_ALL";
var DOCUMENTS_CHANGE_VIEW_MODE = exports.DOCUMENTS_CHANGE_VIEW_MODE = "DOCUMENTS_CHANGE_VIEW_MODE";
var DOCUMENTS_NEW_FOLDER = exports.DOCUMENTS_NEW_FOLDER = "DOCUMENTS_NEW_FOLDER";
var DOCUMENTS_NEW_FOLDER_SUCCESS = exports.DOCUMENTS_NEW_FOLDER_SUCCESS = "DOCUMENTS_NEW_FOLDER_SUCCESS";
var DOCUMENTS_NEW_FOLDER_FAILURE_GENERIC = exports.DOCUMENTS_NEW_FOLDER_FAILURE_GENERIC = "DOCUMENTS_NEW_FOLDER_FAILURE_GENERIC";
var DOCUMENTS_NEW_FOLDER_FAILURE_DUPLICATE = exports.DOCUMENTS_NEW_FOLDER_FAILURE_DUPLICATE = "DOCUMENTS_NEW_FOLDER_FAILURE_DUPLICATE";
var DOCUMENTS_CLICK = exports.DOCUMENTS_CLICK = "DOCUMENTS_CLICK";
var DOCUMENTS_CHANGE_FILTER = exports.DOCUMENTS_CHANGE_FILTER = "DOCUMENTS_CHANGE_FILTER";
var DOCUMENTS_RENAME = exports.DOCUMENTS_RENAME = "DOCUMENTS_RENAME";
var DOCUMENTS_RENAME_SUCCESS = exports.DOCUMENTS_RENAME_SUCCESS = "DOCUMENTS_RENAME_SUCCESS";
var DOCUMENTS_RENAME_FAILURE = exports.DOCUMENTS_RENAME_FAILURE = "DOCUMENTS_RENAME_FAILURE";
var DOCUMENTS_MOVE = exports.DOCUMENTS_MOVE = "DOCUMENTS_MOVE";
var DOCUMENTS_MOVE_SUCCESS = exports.DOCUMENTS_MOVE_SUCCESS = "DOCUMENTS_MOVE_SUCCESS";
var DOCUMENTS_MOVE_FAILURE = exports.DOCUMENTS_MOVE_FAILURE = "DOCUMENTS_MOVE_FAILURE";
var DOCUMENTS_CHANGE_TYPE = exports.DOCUMENTS_CHANGE_TYPE = "DOCUMENTS_CHANGE_TYPE";
var DOCUMENTS_CHANGE_TYPE_SUCCESS = exports.DOCUMENTS_CHANGE_TYPE_SUCCESS = "DOCUMENTS_CHANGE_TYPE_SUCCESS";
var DOCUMENTS_CHANGE_TYPE_FAILURE = exports.DOCUMENTS_CHANGE_TYPE_FAILURE = "DOCUMENTS_CHANGE_TYPE_FAILURE";

var HTTP_CODE_CONFLICT = exports.HTTP_CODE_CONFLICT = 409;

var documentsSelect = exports.documentsSelect = function documentsSelect(document) {
    return {
        type: DOCUMENTS_SELECT, document: document
    };
};
var documentsChangeFilter = exports.documentsChangeFilter = function documentsChangeFilter(filter) {
    return {
        type: DOCUMENTS_CHANGE_FILTER, filter: filter
    };
};
var documentsChangeViewMode = exports.documentsChangeViewMode = function documentsChangeViewMode() {
    return {
        type: DOCUMENTS_CHANGE_VIEW_MODE
    };
};
var documentsClick = exports.documentsClick = function documentsClick(document) {
    return {
        type: DOCUMENTS_CLICK,
        document: document
    };
};

var documentsDownload = exports.documentsDownload = function documentsDownload(selected) {
    console.log('Download', selected);
    return function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch) {
            var paths, href, fullpath;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            if (!(selected.length === 1 && !(0, _tools.isDirectory)(selected[0]))) {
                                _context.next = 2;
                                break;
                            }

                            return _context.abrupt('return', dispatch(downloadFile(selected[0])));

                        case 2:
                            paths = selected.map(function (f) {
                                return f.path;
                            });
                            _context.next = 5;
                            return cozy.client.files.getArchiveLinkByPaths(paths);

                        case 5:
                            href = _context.sent;
                            _context.next = 8;
                            return cozy.client.fullpath(href);

                        case 8:
                            fullpath = _context.sent;

                            (0, _tools.forceFileDownload)(fullpath, 'empreinte.zip');
                            return _context.abrupt('return', dispatch({
                                type: DOCUMENTS_DOWNLOAD,
                                selected: selected
                            }));

                        case 11:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined);
        }));

        return function (_x) {
            return _ref.apply(this, arguments);
        };
    }();
};

var downloadFile = function downloadFile(file) {
    return function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dispatch) {
            var response, blob, filename;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _context2.next = 2;
                            return cozy.client.files.downloadById(file.id).catch(function (error) {
                                throw error;
                            });

                        case 2:
                            response = _context2.sent;
                            _context2.next = 5;
                            return response.blob();

                        case 5:
                            blob = _context2.sent;
                            filename = file.name;


                            (0, _tools.forceFileDownload)(window.URL.createObjectURL(blob), filename);
                            return _context2.abrupt('return', dispatch({
                                type: DOCUMENTS_DOWNLOAD,
                                file: file
                            }));

                        case 9:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, undefined);
        }));

        return function (_x2) {
            return _ref2.apply(this, arguments);
        };
    }();
};

var documentsNewFolder = exports.documentsNewFolder = function documentsNewFolder(name) {
    if (!name) {
        return {
            type: DOCUMENTS_NEW_FOLDER_FAILURE_GENERIC,
            alert: {
                message: 'Veuillez donner un nom au nouveau dossier'
            }
        };
    }

    return function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(dispatch, getState) {
            var files, existingFolder, parent, folder;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            files = getState().documents.files;
                            existingFolder = files && files.find(function (f) {
                                return (0, _tools.isDirectory)(f) && f.name === name;
                            });

                            if (!existingFolder) {
                                _context3.next = 4;
                                break;
                            }

                            return _context3.abrupt('return', dispatch({
                                type: DOCUMENTS_NEW_FOLDER_FAILURE_DUPLICATE,
                                alert: {
                                    message: 'L\'\xE9l\xE9ment ' + name + ' existe d\xE9j\xE0, merci de choisir un nouveau nom.'
                                }
                            }));

                        case 4:

                            dispatch({
                                type: DOCUMENTS_NEW_FOLDER,
                                name: name
                            });

                            _context3.prev = 5;
                            parent = getState().documents.folder;
                            _context3.next = 9;
                            return cozy.client.files.createDirectory({
                                name: name,
                                dirID: parent.id
                            });

                        case 9:
                            folder = _context3.sent;

                            dispatch((0, _importer.importerTree)());
                            dispatch({
                                type: DOCUMENTS_NEW_FOLDER_SUCCESS,
                                folder: (0, _tools.extractFileAttributes)(folder),
                                parent: parent
                            });
                            _context3.next = 18;
                            break;

                        case 14:
                            _context3.prev = 14;
                            _context3.t0 = _context3['catch'](5);

                            if (_context3.t0.response && _context3.t0.response.status === HTTP_CODE_CONFLICT) {
                                dispatch({
                                    type: DOCUMENTS_NEW_FOLDER_FAILURE_DUPLICATE,
                                    alert: {
                                        message: 'L\'\xE9l\xE9ment ' + name + ' existe d\xE9j\xE0, merci de choisir un nouveau nom.',
                                        level: _constants.ALERT_LEVEL_ERROR
                                    }
                                });
                            } else {
                                dispatch({
                                    type: DOCUMENTS_NEW_FOLDER_FAILURE_GENERIC,
                                    err: _context3.t0,
                                    alert: {
                                        message: 'Impossible de créer le nouveau dossier ' + name,
                                        level: _constants.ALERT_LEVEL_ERROR
                                    }
                                });
                            }
                            throw _context3.t0;

                        case 18:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, undefined, [[5, 14]]);
        }));

        return function (_x3, _x4) {
            return _ref3.apply(this, arguments);
        };
    }();
};

var testFolder = function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(path, dirID) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
                switch (_context4.prev = _context4.next) {
                    case 0:
                        _context4.next = 2;
                        return cozy.client.files.statByPath(path).catch(function (err) {
                            //create root folder
                            var name = path.substring(path.lastIndexOf('/') + 1);
                            console.log('Create initial folder', name);
                            return cozy.client.files.createDirectory({ name: name, dirID: dirID }).then(function (folder) {
                                folder.new = true;
                                return folder;
                            });
                        });

                    case 2:
                        return _context4.abrupt('return', _context4.sent);

                    case 3:
                    case 'end':
                        return _context4.stop();
                }
            }
        }, _callee4, undefined);
    }));

    return function testFolder(_x5, _x6) {
        return _ref4.apply(this, arguments);
    };
}();

var documentsInitialize = exports.documentsInitialize = function documentsInitialize() {
    return function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(dispatch, getState) {
            var useful, root, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, path, folder;

            return regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            dispatch({
                                type: DOCUMENTS_INITIALIZE
                            });

                            useful = false;
                            _context5.prev = 2;
                            _context5.next = 5;
                            return testFolder(_constants.ROOT_PATH, _constants.COZY_ROOT_ID);

                        case 5:
                            root = _context5.sent;
                            _iteratorNormalCompletion = true;
                            _didIteratorError = false;
                            _iteratorError = undefined;
                            _context5.prev = 9;
                            _iterator = _constants.FOLDER_LIST[Symbol.iterator]();

                        case 11:
                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                _context5.next = 20;
                                break;
                            }

                            path = _step.value;
                            _context5.next = 15;
                            return testFolder(path, root._id);

                        case 15:
                            folder = _context5.sent;

                            if (folder.new) useful = true;

                        case 17:
                            _iteratorNormalCompletion = true;
                            _context5.next = 11;
                            break;

                        case 20:
                            _context5.next = 26;
                            break;

                        case 22:
                            _context5.prev = 22;
                            _context5.t0 = _context5['catch'](9);
                            _didIteratorError = true;
                            _iteratorError = _context5.t0;

                        case 26:
                            _context5.prev = 26;
                            _context5.prev = 27;

                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }

                        case 29:
                            _context5.prev = 29;

                            if (!_didIteratorError) {
                                _context5.next = 32;
                                break;
                            }

                            throw _iteratorError;

                        case 32:
                            return _context5.finish(29);

                        case 33:
                            return _context5.finish(26);

                        case 34:

                            if (useful) {
                                dispatch((0, _load.loadFolder)(_constants.ROOT_PATH));
                            }
                            dispatch((0, _gauge.gaugeInitialize)());
                            return _context5.abrupt('return', dispatch({
                                type: DOCUMENTS_INITIALIZE_SUCCESS,
                                useful: useful
                            }));

                        case 39:
                            _context5.prev = 39;
                            _context5.t1 = _context5['catch'](2);
                            return _context5.abrupt('return', dispatch({
                                type: DOCUMENTS_INITIALIZE_FAILURE,
                                err: _context5.t1,
                                alert: {
                                    message: 'Impossible d\'initialiser Homebook',
                                    level: _constants.ALERT_LEVEL_ERROR
                                }
                            }));

                        case 42:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, undefined, [[2, 39], [9, 22, 26, 34], [27,, 29, 33]]);
        }));

        return function (_x7, _x8) {
            return _ref5.apply(this, arguments);
        };
    }();
};

var protectedFolders = _constants.DATA_LIST.map(function (item) {
    return item.path;
});

var getTypeOf = function getTypeOf(file) {
    return file.attributes.tags && file.attributes.tags[0];
};

var documentsRemove = exports.documentsRemove = function documentsRemove(files) {
    return function () {
        var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(dispatch) {
            var trashed, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, file;

            return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            dispatch({
                                type: DOCUMENTS_REMOVE,
                                files: files
                            });
                            trashed = [];
                            _context6.prev = 2;
                            _iteratorNormalCompletion2 = true;
                            _didIteratorError2 = false;
                            _iteratorError2 = undefined;
                            _context6.prev = 6;
                            _iterator2 = files[Symbol.iterator]();

                        case 8:
                            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                _context6.next = 20;
                                break;
                            }

                            file = _step2.value;

                            if (!(file.path && protectedFolders.indexOf(file.path) !== -1)) {
                                _context6.next = 12;
                                break;
                            }

                            return _context6.abrupt('continue', 17);

                        case 12:
                            _context6.t0 = trashed;
                            _context6.next = 15;
                            return cozy.client.files.trashById(file.id);

                        case 15:
                            _context6.t1 = _context6.sent;

                            _context6.t0.push.call(_context6.t0, _context6.t1);

                        case 17:
                            _iteratorNormalCompletion2 = true;
                            _context6.next = 8;
                            break;

                        case 20:
                            _context6.next = 26;
                            break;

                        case 22:
                            _context6.prev = 22;
                            _context6.t2 = _context6['catch'](6);
                            _didIteratorError2 = true;
                            _iteratorError2 = _context6.t2;

                        case 26:
                            _context6.prev = 26;
                            _context6.prev = 27;

                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }

                        case 29:
                            _context6.prev = 29;

                            if (!_didIteratorError2) {
                                _context6.next = 32;
                                break;
                            }

                            throw _iteratorError2;

                        case 32:
                            return _context6.finish(29);

                        case 33:
                            return _context6.finish(26);

                        case 34:
                            return _context6.abrupt('return', dispatch({
                                type: DOCUMENTS_REMOVE_SUCCESS,
                                ids: trashed.map(function (f) {
                                    return f._id;
                                }),
                                types: trashed.map(function (f) {
                                    return getTypeOf(f);
                                }).filter(function (f) {
                                    return f !== undefined;
                                })
                            }));

                        case 37:
                            _context6.prev = 37;
                            _context6.t3 = _context6['catch'](2);
                            return _context6.abrupt('return', dispatch({
                                type: DOCUMENTS_REMOVE_FAILURE,
                                err: _context6.t3,
                                alert: {
                                    message: 'Impossible de deplacer ces éléments dans la corbeille',
                                    level: _constants.ALERT_LEVEL_ERROR
                                }
                            }));

                        case 40:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, _callee6, undefined, [[2, 37], [6, 22, 26, 34], [27,, 29, 33]]);
        }));

        return function (_x9) {
            return _ref6.apply(this, arguments);
        };
    }();
};

var documentsRestore = exports.documentsRestore = function documentsRestore(files) {
    return function () {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(dispatch) {
            var restored, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, file;

            return regeneratorRuntime.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            dispatch({
                                type: DOCUMENTS_RESTORE,
                                files: files
                            });
                            restored = [];
                            _context7.prev = 2;
                            _iteratorNormalCompletion3 = true;
                            _didIteratorError3 = false;
                            _iteratorError3 = undefined;
                            _context7.prev = 6;
                            _iterator3 = files[Symbol.iterator]();

                        case 8:
                            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                                _context7.next = 18;
                                break;
                            }

                            file = _step3.value;
                            _context7.t0 = restored;
                            _context7.next = 13;
                            return cozy.client.files.restoreById(file.id);

                        case 13:
                            _context7.t1 = _context7.sent;

                            _context7.t0.push.call(_context7.t0, _context7.t1);

                        case 15:
                            _iteratorNormalCompletion3 = true;
                            _context7.next = 8;
                            break;

                        case 18:
                            _context7.next = 24;
                            break;

                        case 20:
                            _context7.prev = 20;
                            _context7.t2 = _context7['catch'](6);
                            _didIteratorError3 = true;
                            _iteratorError3 = _context7.t2;

                        case 24:
                            _context7.prev = 24;
                            _context7.prev = 25;

                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }

                        case 27:
                            _context7.prev = 27;

                            if (!_didIteratorError3) {
                                _context7.next = 30;
                                break;
                            }

                            throw _iteratorError3;

                        case 30:
                            return _context7.finish(27);

                        case 31:
                            return _context7.finish(24);

                        case 32:
                            _context7.next = 37;
                            break;

                        case 34:
                            _context7.prev = 34;
                            _context7.t3 = _context7['catch'](2);
                            return _context7.abrupt('return', dispatch({
                                type: DOCUMENTS_RESTORE_FAILURE
                            }));

                        case 37:
                            return _context7.abrupt('return', dispatch({
                                type: DOCUMENTS_RESTORE_SUCCESS,
                                ids: files.map(function (f) {
                                    return f.id;
                                }),
                                types: restored.map(function (f) {
                                    return getTypeOf(f);
                                }).filter(function (f) {
                                    return f !== undefined;
                                })
                            }));

                        case 38:
                        case 'end':
                            return _context7.stop();
                    }
                }
            }, _callee7, undefined, [[2, 34], [6, 20, 24, 32], [25,, 27, 31]]);
        }));

        return function (_x10) {
            return _ref7.apply(this, arguments);
        };
    }();
};

var documentsRename = exports.documentsRename = function documentsRename(id, name) {
    return function () {
        var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(dispatch) {
            var file;
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            dispatch({
                                type: DOCUMENTS_RENAME,
                                id: id,
                                name: name
                            });
                            _context8.prev = 1;
                            _context8.next = 4;
                            return cozy.client.files.updateAttributesById(id, { name: name });

                        case 4:
                            file = _context8.sent;
                            return _context8.abrupt('return', dispatch({
                                type: DOCUMENTS_RENAME_SUCCESS,
                                file: (0, _tools.extractFileAttributes)(file)
                            }));

                        case 8:
                            _context8.prev = 8;
                            _context8.t0 = _context8['catch'](1);
                            return _context8.abrupt('return', dispatch({
                                type: DOCUMENTS_RENAME_FAILURE,
                                err: _context8.t0
                            }));

                        case 11:
                        case 'end':
                            return _context8.stop();
                    }
                }
            }, _callee8, undefined, [[1, 8]]);
        }));

        return function (_x11) {
            return _ref8.apply(this, arguments);
        };
    }();
};

var documentsMove = exports.documentsMove = function documentsMove(files, path) {
    return function () {
        var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(dispatch) {
            var moved, parent, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, file, data;

            return regeneratorRuntime.wrap(function _callee9$(_context9) {
                while (1) {
                    switch (_context9.prev = _context9.next) {
                        case 0:
                            dispatch({
                                type: DOCUMENTS_MOVE,
                                files: files,
                                path: path
                            });
                            moved = [];
                            _context9.prev = 2;
                            _context9.next = 5;
                            return cozy.client.files.statByPath(path);

                        case 5:
                            parent = _context9.sent;
                            _iteratorNormalCompletion4 = true;
                            _didIteratorError4 = false;
                            _iteratorError4 = undefined;
                            _context9.prev = 9;
                            _iterator4 = files[Symbol.iterator]();

                        case 11:
                            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                                _context9.next = 23;
                                break;
                            }

                            file = _step4.value;

                            if (!(file.path && protectedFolders.indexOf(file.path) !== -1)) {
                                _context9.next = 15;
                                break;
                            }

                            return _context9.abrupt('continue', 20);

                        case 15:
                            _context9.t0 = moved;
                            _context9.next = 18;
                            return cozy.client.files.updateAttributesById(file.id, { dir_id: parent._id });

                        case 18:
                            _context9.t1 = _context9.sent;

                            _context9.t0.push.call(_context9.t0, _context9.t1);

                        case 20:
                            _iteratorNormalCompletion4 = true;
                            _context9.next = 11;
                            break;

                        case 23:
                            _context9.next = 29;
                            break;

                        case 25:
                            _context9.prev = 25;
                            _context9.t2 = _context9['catch'](9);
                            _didIteratorError4 = true;
                            _iteratorError4 = _context9.t2;

                        case 29:
                            _context9.prev = 29;
                            _context9.prev = 30;

                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                _iterator4.return();
                            }

                        case 32:
                            _context9.prev = 32;

                            if (!_didIteratorError4) {
                                _context9.next = 35;
                                break;
                            }

                            throw _iteratorError4;

                        case 35:
                            return _context9.finish(32);

                        case 36:
                            return _context9.finish(29);

                        case 37:
                            dispatch((0, _importer.importerTree)());
                            return _context9.abrupt('return', dispatch({
                                type: DOCUMENTS_MOVE_SUCCESS,
                                ids: moved.map(function (f) {
                                    return f._id;
                                })
                            }));

                        case 41:
                            _context9.prev = 41;
                            _context9.t3 = _context9['catch'](2);
                            data = {
                                type: DOCUMENTS_MOVE_FAILURE,
                                err: _context9.t3
                            };

                            if (_context9.t3.status === 409) {
                                data.alert = {
                                    message: "Déplacement intérrompu car un élément du même nom existe déjà dans le dossier cible."
                                };
                            }
                            return _context9.abrupt('return', dispatch(data));

                        case 46:
                        case 'end':
                            return _context9.stop();
                    }
                }
            }, _callee9, undefined, [[2, 41], [9, 25, 29, 37], [30,, 32, 36]]);
        }));

        return function (_x12) {
            return _ref9.apply(this, arguments);
        };
    }();
};

var documentsChangeType = exports.documentsChangeType = function documentsChangeType(file, slug) {
    return function () {
        var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(dispatch) {
            var newFile;
            return regeneratorRuntime.wrap(function _callee10$(_context10) {
                while (1) {
                    switch (_context10.prev = _context10.next) {
                        case 0:
                            dispatch({ type: DOCUMENTS_CHANGE_TYPE, file: file, slug: slug });
                            _context10.prev = 1;
                            _context10.next = 4;
                            return cozy.client.files.updateAttributesById(file.id, { tags: [slug] });

                        case 4:
                            newFile = _context10.sent;
                            return _context10.abrupt('return', dispatch({
                                type: DOCUMENTS_CHANGE_TYPE_SUCCESS,
                                file: (0, _tools.extractFileAttributes)(newFile),
                                newTag: slug || undefined,
                                oldTag: file.tags && file.tags[0]
                            }));

                        case 8:
                            _context10.prev = 8;
                            _context10.t0 = _context10['catch'](1);
                            return _context10.abrupt('return', dispatch({ type: DOCUMENTS_CHANGE_TYPE_FAILURE, err: _context10.t0 }));

                        case 11:
                        case 'end':
                            return _context10.stop();
                    }
                }
            }, _callee10, undefined, [[1, 8]]);
        }));

        return function (_x13) {
            return _ref10.apply(this, arguments);
        };
    }();
};

/***/ }),

/***/ "./src/public/actions/gauge.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.gaugeInitialize = exports.GAUGE_INITIALIZE_FAILURE = exports.GAUGE_INITIALIZE_SUCCESS = exports.GAUGE_INITIALIZE = undefined;

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _constants = __webpack_require__("./src/public/constants/index.js");

var _tools = __webpack_require__("./src/public/tools/index.js");

var _fileTypes = __webpack_require__("./src/public/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var fileType = (0, _fileTypes.getFileTypes)().map(function (f) {
    return f.key;
});

var GAUGE_INITIALIZE = exports.GAUGE_INITIALIZE = "GAUGE_INITIALIZE";
var GAUGE_INITIALIZE_SUCCESS = exports.GAUGE_INITIALIZE_SUCCESS = "GAUGE_INITIALIZE_SUCCESS";
var GAUGE_INITIALIZE_FAILURE = exports.GAUGE_INITIALIZE_FAILURE = "GAUGE_INITIALIZE_FAILURE";

var gaugeInitialize = exports.gaugeInitialize = function gaugeInitialize() {
    return function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {
            var types, data;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            dispatch({ type: GAUGE_INITIALIZE });

                            _context.prev = 1;
                            _context.next = 4;
                            return detectUsedTypesV2();

                        case 4:
                            types = _context.sent;
                            data = [];
                            _context.next = 8;
                            return detectCreatedData(data);

                        case 8:
                            return _context.abrupt('return', dispatch({ type: GAUGE_INITIALIZE_SUCCESS, types: types, data: data }));

                        case 11:
                            _context.prev = 11;
                            _context.t0 = _context['catch'](1);
                            return _context.abrupt('return', dispatch({ type: GAUGE_INITIALIZE_FAILURE, err: _context.t0 }));

                        case 14:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined, [[1, 11]]);
        }));

        return function (_x, _x2) {
            return _ref.apply(this, arguments);
        };
    }();
};

// const detectUsedTypesOld = async(path, types) => {
//     const folder = await cozy.client.files.statByPath(path)
//     const content = folder.relations('contents')

//     for(let child of content) {
//         if(child.attributes && child.attributes.type && child.attributes.type === 'directory') {
//             await detectUsedTypes(child.attributes.path, types)
//         } else {
//             if(child.attributes.tags && child.attributes.tags.length > 0) {
//                 const type = extractType(child.attributes.tags[0])
//                 if(!type) continue

//                 let find = false
//                 for(let t of types) {
//                     if(t.type === type) {
//                         t.count = t.count + 1 || 1
//                         find = true
//                         break
//                     }
//                 }
//                 if(!find) {
//                     types.push({type, count:1})
//                 }
//             }
//         }
//     }
// }

var getAllResponse = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(indexRef, selector) {
        var next, res, skip, ret;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        next = true;
                        res = [];
                        skip = 0;

                    case 3:
                        if (!next) {
                            _context2.next = 12;
                            break;
                        }

                        _context2.next = 6;
                        return cozy.client.data.query(indexRef, {
                            "selector": selector,
                            "wholeResponse": true,
                            "skip": skip
                        });

                    case 6:
                        ret = _context2.sent;

                        next = ret.next;
                        skip += ret.limit;
                        res = res.concat(ret.docs);
                        _context2.next = 3;
                        break;

                    case 12:
                        return _context2.abrupt('return', res);

                    case 13:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, undefined);
    }));

    return function getAllResponse(_x3, _x4) {
        return _ref2.apply(this, arguments);
    };
}();

var detectUsedTypesV2 = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(types) {
        var indexRef, allFiles, sorted, counted, ret;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        _context3.next = 2;
                        return cozy.client.data.defineIndex('io.cozy.files', ['_id', 'type']);

                    case 2:
                        indexRef = _context3.sent;
                        _context3.next = 5;
                        return getAllResponse(indexRef, {
                            "_id": {
                                $gt: null
                            },
                            "type": 'file'
                        });

                    case 5:
                        allFiles = _context3.sent;
                        sorted = allFiles.map(function (f) {
                            return f.tags && f.tags.length > 0 && f.tags[0];
                        }).filter(function (f) {
                            return !!f;
                        });
                        counted = _lodash2.default.countBy(sorted);
                        ret = _lodash2.default.map(counted, function (count, type) {
                            return {
                                type: type,
                                count: count
                            };
                        });
                        return _context3.abrupt('return', ret);

                    case 10:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, undefined);
    }));

    return function detectUsedTypesV2(_x5) {
        return _ref3.apply(this, arguments);
    };
}();

var extractType = function extractType(type) {
    if (fileType.indexOf(type) !== 0) return type;
    return false;
};

var detectCreatedData = function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(data) {
        var doctypes, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, doctype, eles, noTrash;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
                switch (_context4.prev = _context4.next) {
                    case 0:
                        doctypes = [_constants.DOCTYPE_F_CONTACTS, _constants.DOCTYPE_F_LASTWILL, _constants.DOCTYPE_DIAGNOSIS, _constants.DOCTYPE_EQUIPMENTS, _constants.DOCTYPE_HOMEDATA, _constants.DOCTYPE_MAINTENANCES, _constants.DOCTYPE_WORKS];
                        _iteratorNormalCompletion = true;
                        _didIteratorError = false;
                        _iteratorError = undefined;
                        _context4.prev = 4;
                        _iterator = doctypes[Symbol.iterator]();

                    case 6:
                        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                            _context4.next = 16;
                            break;
                        }

                        doctype = _step.value;
                        _context4.next = 10;
                        return (0, _tools.getDataElements)(doctype);

                    case 10:
                        eles = _context4.sent;
                        noTrash = eles.filter(function (d) {
                            return !d.trash;
                        });

                        if (noTrash.length > 0) {
                            data.push({ doctype: doctype, count: noTrash.length });
                        }

                    case 13:
                        _iteratorNormalCompletion = true;
                        _context4.next = 6;
                        break;

                    case 16:
                        _context4.next = 22;
                        break;

                    case 18:
                        _context4.prev = 18;
                        _context4.t0 = _context4['catch'](4);
                        _didIteratorError = true;
                        _iteratorError = _context4.t0;

                    case 22:
                        _context4.prev = 22;
                        _context4.prev = 23;

                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }

                    case 25:
                        _context4.prev = 25;

                        if (!_didIteratorError) {
                            _context4.next = 28;
                            break;
                        }

                        throw _iteratorError;

                    case 28:
                        return _context4.finish(25);

                    case 29:
                        return _context4.finish(22);

                    case 30:
                    case 'end':
                        return _context4.stop();
                }
            }
        }, _callee4, undefined, [[4, 18, 22, 30], [23,, 25, 29]]);
    }));

    return function detectCreatedData(_x6) {
        return _ref4.apply(this, arguments);
    };
}();

/***/ }),

/***/ "./src/public/actions/importer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.importerFilesUpload = exports.importerTree = exports.importerViewChange = exports.importerDirectoryChange = exports.importerClick = exports.IMPORTER_TREE_FAILURE = exports.IMPORTER_TREE_SUCCESS = exports.IMPORTER_TREE = exports.IMPORTER_VIEW_CHANGE = exports.IMPORTER_DIRECTORY_CHANGE = exports.IMPORTER_FILE_UPLOAD_FAILURE = exports.IMPORTER_FILE_UPLOAD_SUCESS = exports.IMPORTER_FILE_UPLOAD = exports.IMPORTER_CLICK = undefined;

var _tools = __webpack_require__("./src/public/tools/index.js");

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _constants = __webpack_require__("./src/public/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var IMPORTER_CLICK = exports.IMPORTER_CLICK = "IMPORTER_CLICK";
var IMPORTER_FILE_UPLOAD = exports.IMPORTER_FILE_UPLOAD = "IMPORTER_FILE_UPLOAD";
var IMPORTER_FILE_UPLOAD_SUCESS = exports.IMPORTER_FILE_UPLOAD_SUCESS = "IMPORTER_FILE_UPLOAD_SUCESS";
var IMPORTER_FILE_UPLOAD_FAILURE = exports.IMPORTER_FILE_UPLOAD_FAILURE = "IMPORTER_FILE_UPLOAD_FAILURE";
var IMPORTER_DIRECTORY_CHANGE = exports.IMPORTER_DIRECTORY_CHANGE = "IMPORTER_DIRECTORY_CHANGE";
var IMPORTER_VIEW_CHANGE = exports.IMPORTER_VIEW_CHANGE = "IMPORTER_VIEW_CHANGE";
var IMPORTER_TREE = exports.IMPORTER_TREE = "IMPORTER_TREE";
var IMPORTER_TREE_SUCCESS = exports.IMPORTER_TREE_SUCCESS = "IMPORTER_TREE_SUCCESS";
var IMPORTER_TREE_FAILURE = exports.IMPORTER_TREE_FAILURE = "IMPORTER_TREE_FAILURE";

var importerClick = exports.importerClick = function importerClick() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var slug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

    if (path === "") path = _constants.ROOT_PATH;
    return function (dispatch, getState) {
        if (_lodash2.default.isEmpty(getState().importer.documentsTree)) dispatch(importerTree());
        return dispatch({ type: IMPORTER_CLICK, slug: slug, path: path });
    };
};
var importerDirectoryChange = exports.importerDirectoryChange = function importerDirectoryChange(path) {
    return { type: IMPORTER_DIRECTORY_CHANGE, path: path };
};
var importerViewChange = exports.importerViewChange = function importerViewChange(view) {
    return { type: IMPORTER_VIEW_CHANGE, view: view };
};

var findChildren = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(tree) {
        var result, next, childs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, child, newDir, newFile;

        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.next = 2;
                        return cozy.client.files.statByPath(tree.path);

                    case 2:
                        result = _context.sent;
                        next = [];
                        childs = result.relations('contents');
                        _iteratorNormalCompletion = true;
                        _didIteratorError = false;
                        _iteratorError = undefined;
                        _context.prev = 8;
                        _iterator = childs[Symbol.iterator]();

                    case 10:
                        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                            _context.next = 27;
                            break;
                        }

                        child = _step.value;

                        if (!(child.attributes.type === 'directory')) {
                            _context.next = 22;
                            break;
                        }

                        newDir = {
                            path: child.attributes.path,
                            name: child.attributes.name,
                            childs: [],
                            dir: true
                        };
                        _context.t0 = next;
                        _context.next = 17;
                        return findChildren(newDir);

                    case 17:
                        _context.t1 = _context.sent;

                        _context.t0.push.call(_context.t0, _context.t1);

                        tree.childs.push(newDir);
                        _context.next = 24;
                        break;

                    case 22:
                        newFile = {
                            path: result.attributes.path + '/' + child.attributes.name,
                            name: child.attributes.name
                        };

                        tree.childs.push(newFile);

                    case 24:
                        _iteratorNormalCompletion = true;
                        _context.next = 10;
                        break;

                    case 27:
                        _context.next = 33;
                        break;

                    case 29:
                        _context.prev = 29;
                        _context.t2 = _context['catch'](8);
                        _didIteratorError = true;
                        _iteratorError = _context.t2;

                    case 33:
                        _context.prev = 33;
                        _context.prev = 34;

                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }

                    case 36:
                        _context.prev = 36;

                        if (!_didIteratorError) {
                            _context.next = 39;
                            break;
                        }

                        throw _iteratorError;

                    case 39:
                        return _context.finish(36);

                    case 40:
                        return _context.finish(33);

                    case 41:
                        return _context.abrupt('return', next);

                    case 42:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined, [[8, 29, 33, 41], [34,, 36, 40]]);
    }));

    return function findChildren(_x3) {
        return _ref.apply(this, arguments);
    };
}();

var importerTree = exports.importerTree = function importerTree() {
    return function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dispatch, getState) {
            var tree;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            dispatch({ type: IMPORTER_TREE });

                            _context2.prev = 1;
                            tree = { path: _constants.ROOT_PATH, childs: [], name: _constants.ROOT_NAME.substring(1), dir: true };
                            _context2.next = 5;
                            return findChildren(tree);

                        case 5:
                            return _context2.abrupt('return', dispatch({ type: IMPORTER_TREE_SUCCESS, tree: tree }));

                        case 8:
                            _context2.prev = 8;
                            _context2.t0 = _context2['catch'](1);
                            return _context2.abrupt('return', dispatch({ type: IMPORTER_TREE_FAILURE, err: _context2.t0 }));

                        case 11:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, undefined, [[1, 8]]);
        }));

        return function (_x4, _x5) {
            return _ref2.apply(this, arguments);
        };
    }();
};

var importerFilesUpload = exports.importerFilesUpload = function importerFilesUpload(files, dirId) {
    console.log('Data', files);
    return function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(dispatch, getState) {
            var newFiles, conflits, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, data, file, newDir, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _file, fullName, lastIndex, name, extention, action, currentDir;

            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            dispatch({
                                type: IMPORTER_FILE_UPLOAD,
                                dirId: dirId
                            });
                            newFiles = [];
                            conflits = [];
                            _context3.prev = 3;
                            _iteratorNormalCompletion2 = true;
                            _didIteratorError2 = false;
                            _iteratorError2 = undefined;
                            _context3.prev = 7;
                            _iterator2 = files[Symbol.iterator]();

                        case 9:
                            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                _context3.next = 93;
                                break;
                            }

                            data = _step2.value;
                            file = void 0;

                            if (!data.isDirectory) {
                                _context3.next = 65;
                                break;
                            }

                            _context3.prev = 13;
                            _context3.next = 16;
                            return cozy.client.files.createDirectory({
                                name: data.name,
                                dirID: dirId
                            });

                        case 16:
                            newDir = _context3.sent;


                            //add content
                            _iteratorNormalCompletion3 = true;
                            _didIteratorError3 = false;
                            _iteratorError3 = undefined;
                            _context3.prev = 20;
                            _iterator3 = data.content[Symbol.iterator]();

                        case 22:
                            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                                _context3.next = 38;
                                break;
                            }

                            _file = _step3.value;

                            if (!(_file.size > _constants.MAX_FILE_SIZE)) {
                                _context3.next = 26;
                                break;
                            }

                            return _context3.abrupt('continue', 35);

                        case 26:
                            _context3.prev = 26;
                            _context3.next = 29;
                            return cozy.client.files.create(_file, {
                                name: _file.name,
                                dirID: newDir._id
                            });

                        case 29:
                            _file = _context3.sent;
                            _context3.next = 35;
                            break;

                        case 32:
                            _context3.prev = 32;
                            _context3.t0 = _context3['catch'](26);
                            throw _context3.t0;

                        case 35:
                            _iteratorNormalCompletion3 = true;
                            _context3.next = 22;
                            break;

                        case 38:
                            _context3.next = 44;
                            break;

                        case 40:
                            _context3.prev = 40;
                            _context3.t1 = _context3['catch'](20);
                            _didIteratorError3 = true;
                            _iteratorError3 = _context3.t1;

                        case 44:
                            _context3.prev = 44;
                            _context3.prev = 45;

                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }

                        case 47:
                            _context3.prev = 47;

                            if (!_didIteratorError3) {
                                _context3.next = 50;
                                break;
                            }

                            throw _iteratorError3;

                        case 50:
                            return _context3.finish(47);

                        case 51:
                            return _context3.finish(44);

                        case 52:

                            newFiles.push(newDir);
                            _context3.next = 63;
                            break;

                        case 55:
                            _context3.prev = 55;
                            _context3.t2 = _context3['catch'](13);

                            if (!(_context3.t2.status === 409)) {
                                _context3.next = 62;
                                break;
                            }

                            console.log('Confict with file', data.name);
                            conflits.push(data);
                            _context3.next = 63;
                            break;

                        case 62:
                            throw _context3.t2;

                        case 63:
                            _context3.next = 90;
                            break;

                        case 65:
                            if (!(data.size > _constants.MAX_FILE_SIZE)) {
                                _context3.next = 67;
                                break;
                            }

                            return _context3.abrupt('continue', 90);

                        case 67:
                            fullName = data.name;
                            lastIndex = fullName.lastIndexOf(".");
                            name = fullName.slice(0, lastIndex);
                            extention = fullName.slice(lastIndex);
                            _context3.prev = 71;
                            _context3.next = 74;
                            return cozy.client.files.create(data, {
                                name: name + '-' + Date.now() + extention,
                                dirID: dirId
                            });

                        case 74:
                            file = _context3.sent;

                            if (!data.typeFile) {
                                _context3.next = 79;
                                break;
                            }

                            _context3.next = 78;
                            return cozy.client.files.updateAttributesById(file._id, { tags: [data.typeFile] });

                        case 78:
                            file = _context3.sent;

                        case 79:
                            newFiles.push(file);

                            _context3.next = 90;
                            break;

                        case 82:
                            _context3.prev = 82;
                            _context3.t3 = _context3['catch'](71);

                            if (!(_context3.t3.status === 409)) {
                                _context3.next = 89;
                                break;
                            }

                            console.log('Confict with file', data.name);
                            conflits.push(data);
                            _context3.next = 90;
                            break;

                        case 89:
                            throw _context3.t3;

                        case 90:
                            _iteratorNormalCompletion2 = true;
                            _context3.next = 9;
                            break;

                        case 93:
                            _context3.next = 99;
                            break;

                        case 95:
                            _context3.prev = 95;
                            _context3.t4 = _context3['catch'](7);
                            _didIteratorError2 = true;
                            _iteratorError2 = _context3.t4;

                        case 99:
                            _context3.prev = 99;
                            _context3.prev = 100;

                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }

                        case 102:
                            _context3.prev = 102;

                            if (!_didIteratorError2) {
                                _context3.next = 105;
                                break;
                            }

                            throw _iteratorError2;

                        case 105:
                            return _context3.finish(102);

                        case 106:
                            return _context3.finish(99);

                        case 107:
                            action = {
                                type: IMPORTER_FILE_UPLOAD_SUCESS,
                                files: newFiles.map(function (f) {
                                    return (0, _tools.extractFileAttributes)(f);
                                }),
                                conflits: conflits
                            };
                            currentDir = getState().documents.folder;

                            if (currentDir) {
                                action.currentDir = currentDir.id === dirId;
                            }
                            if (conflits.length > 0) {
                                action.alert = {
                                    message: 'Plusieurs fichiers n\'ont pas \xE9tait ajout\xE9 car ils existaient deja dans ce dossier : \n' + conflits.map(function (f) {
                                        return f.name;
                                    }).join('\n')
                                };
                            }
                            return _context3.abrupt('return', dispatch(action));

                        case 114:
                            _context3.prev = 114;
                            _context3.t5 = _context3['catch'](3);
                            return _context3.abrupt('return', dispatch({
                                type: IMPORTER_FILE_UPLOAD_FAILURE,
                                err: _context3.t5,
                                alert: {
                                    message: 'Impossible d\'ajouter le(s) élément(s)',
                                    level: _constants.ALERT_LEVEL_ERROR
                                }
                            }));

                        case 117:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, undefined, [[3, 114], [7, 95, 99, 107], [13, 55], [20, 40, 44, 52], [26, 32], [45,, 47, 51], [71, 82], [100,, 102, 106]]);
        }));

        return function (_x6, _x7) {
            return _ref3.apply(this, arguments);
        };
    }();
};

/***/ }),

/***/ "./src/public/actions/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _contacts = __webpack_require__("./src/public/actions/contacts.js");

Object.keys(_contacts).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _contacts[key];
    }
  });
});

var _alerts = __webpack_require__("./src/public/actions/alerts.js");

Object.keys(_alerts).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _alerts[key];
    }
  });
});

var _data = __webpack_require__("./src/public/actions/data.js");

Object.keys(_data).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _data[key];
    }
  });
});

var _documents = __webpack_require__("./src/public/actions/documents.js");

Object.keys(_documents).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _documents[key];
    }
  });
});

var _load = __webpack_require__("./src/public/actions/load.js");

Object.keys(_load).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _load[key];
    }
  });
});

var _gauge = __webpack_require__("./src/public/actions/gauge.js");

Object.keys(_gauge).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _gauge[key];
    }
  });
});

var _importer = __webpack_require__("./src/public/actions/importer.js");

Object.keys(_importer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _importer[key];
    }
  });
});

/***/ }),

/***/ "./src/public/actions/load.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.loadTrash = exports.loadData = exports.loadNews = exports.loadContacts = exports.loadRecalls = exports.loadFolder = exports.LOAD_NEWS_FAILURE = exports.LOAD_NEWS_SUCCESS = exports.LOAD_NEWS = exports.LOAD_FILE_SUCCESS = exports.LOAD_TRASH_FAILURE = exports.LOAD_TRASH_SUCCESS = exports.LOAD_TRASH = exports.LOAD_DATA_FAILURE = exports.LOAD_DATA_SUCCESS = exports.LOAD_DATA = exports.LOAD_CONTACTS_FAILURE = exports.LOAD_CONTACTS_SUCCESS = exports.LOAD_CONTACTS = exports.LOAD_RECALLS_FAILURE = exports.LOAD_RECALLS_SUCCESS = exports.LOAD_RECALLS = exports.LOAD_DOCS_FAILURE = exports.LOAD_DOCS_SUCCESS = exports.LOAD_DOCS = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _moment = __webpack_require__("./node_modules/moment/moment.js");

var _moment2 = _interopRequireDefault(_moment);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _tools = __webpack_require__("./src/public/tools/index.js");

var _constants = __webpack_require__("./src/public/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var LOAD_DOCS = exports.LOAD_DOCS = "LOAD_DOCS";
var LOAD_DOCS_SUCCESS = exports.LOAD_DOCS_SUCCESS = "LOAD_DOCS_SUCCESS";
var LOAD_DOCS_FAILURE = exports.LOAD_DOCS_FAILURE = "LOAD_DOCS_FAILURE";
var LOAD_RECALLS = exports.LOAD_RECALLS = "LOAD_RECALLS";
var LOAD_RECALLS_SUCCESS = exports.LOAD_RECALLS_SUCCESS = "LOAD_RECALLS_SUCCESS";
var LOAD_RECALLS_FAILURE = exports.LOAD_RECALLS_FAILURE = "LOAD_RECALLS_FAILURE";
var LOAD_CONTACTS = exports.LOAD_CONTACTS = "LOAD_CONTACTS";
var LOAD_CONTACTS_SUCCESS = exports.LOAD_CONTACTS_SUCCESS = "LOAD_CONTACTS_SUCCESS";
var LOAD_CONTACTS_FAILURE = exports.LOAD_CONTACTS_FAILURE = "LOAD_CONTACTS_FAILURE";
var LOAD_DATA = exports.LOAD_DATA = "LOAD_DATA";
var LOAD_DATA_SUCCESS = exports.LOAD_DATA_SUCCESS = "LOAD_DATA_SUCCESS";
var LOAD_DATA_FAILURE = exports.LOAD_DATA_FAILURE = "LOAD_DATA_FAILURE";
var LOAD_TRASH = exports.LOAD_TRASH = "LOAD_TRASH";
var LOAD_TRASH_SUCCESS = exports.LOAD_TRASH_SUCCESS = "LOAD_TRASH_SUCCESS";
var LOAD_TRASH_FAILURE = exports.LOAD_TRASH_FAILURE = "LOAD_TRASH_FAILURE";
var LOAD_FILE_SUCCESS = exports.LOAD_FILE_SUCCESS = "LOAD_FILE_SUCCESS";
var LOAD_NEWS = exports.LOAD_NEWS = "LOAD_NEWS";
var LOAD_NEWS_SUCCESS = exports.LOAD_NEWS_SUCCESS = "LOAD_NEWS_SUCCESS";
var LOAD_NEWS_FAILURE = exports.LOAD_NEWS_FAILURE = "LOAD_NEWS_FAILURE";

var loadFolder = exports.loadFolder = function loadFolder() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.ROOT_PATH;

    return function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {
            var element, parentId, parent, contents, files, fileCount;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            dispatch({
                                type: LOAD_DOCS,
                                path: path
                            });
                            _context.prev = 1;
                            _context.next = 4;
                            return cozy.client.files.statByPath(path);

                        case 4:
                            element = _context.sent;
                            parentId = element.attributes.dir_id;
                            _context.t0 = !!parentId;

                            if (!_context.t0) {
                                _context.next = 11;
                                break;
                            }

                            _context.next = 10;
                            return cozy.client.files.statById(parentId).catch(function (ex) {
                                if (ex.status === 403) {
                                    console.warn('User don\'t have access to parent folder');
                                } else {
                                    throw ex;
                                }
                            });

                        case 10:
                            _context.t0 = _context.sent;

                        case 11:
                            parent = _context.t0;

                            if (!(element.attributes.type === 'directory')) {
                                _context.next = 24;
                                break;
                            }

                            contents = element.relationships.contents;
                            // folder.relations('contents') returns null when the trash is empty
                            // the filter call is a temporary fix due to a cozy-client-js bug

                            files = element.relations('contents').filter(function (f) {
                                return f !== undefined;
                            }) || [];
                            fileCount = contents.meta.count || 0;

                            if (!(fileCount > files.length)) {
                                _context.next = 21;
                                break;
                            }

                            //load more files
                            console.log('More files', element._id);
                            _context.next = 20;
                            return loadFileRec(element._id, files, fileCount);

                        case 20:
                            files = _context.sent;

                        case 21:
                            return _context.abrupt('return', dispatch({
                                type: LOAD_DOCS_SUCCESS,
                                folder: Object.assign((0, _tools.extractFileAttributes)(element), {
                                    parent: (0, _tools.extractFileAttributes)(parent)
                                }),
                                fileCount: fileCount,
                                files: files.map(function (c) {
                                    return (0, _tools.extractFileAttributes)(c);
                                }),
                                trackEvent: {
                                    action: LOAD_DOCS_SUCCESS,
                                    category: 'Documents',
                                    name: 'Loading Success',
                                    value: 1
                                }
                            }));

                        case 24:
                            return _context.abrupt('return', dispatch({
                                type: LOAD_FILE_SUCCESS,
                                file: Object.assign((0, _tools.extractFileAttributes)(element), {
                                    parent: (0, _tools.extractFileAttributes)(parent),
                                    path: parent.attributes.path + '/' + element.attributes.name
                                })
                            }));

                        case 25:
                            _context.next = 30;
                            break;

                        case 27:
                            _context.prev = 27;
                            _context.t1 = _context['catch'](1);
                            return _context.abrupt('return', dispatch({
                                type: LOAD_DOCS_FAILURE,
                                error: _context.t1
                            }));

                        case 30:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined, [[1, 27]]);
        }));

        return function (_x2, _x3) {
            return _ref.apply(this, arguments);
        };
    }();
};

var loadFileRec = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id, files, count) {
        var element, moreFiles;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.next = 2;
                        return cozy.client.files.statById(id, true, { skip: files.length });

                    case 2:
                        element = _context2.sent;
                        moreFiles = element.relations('contents').filter(function (f) {
                            return f !== undefined;
                        }) || [];

                        files = files.concat(moreFiles);

                        if (!(count > files.length)) {
                            _context2.next = 9;
                            break;
                        }

                        _context2.next = 8;
                        return loadFileRec(id, files, count);

                    case 8:
                        files = _context2.sent;

                    case 9:
                        return _context2.abrupt('return', files);

                    case 10:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, undefined);
    }));

    return function loadFileRec(_x4, _x5, _x6) {
        return _ref2.apply(this, arguments);
    };
}();

var loadRecalls = exports.loadRecalls = function loadRecalls() {
    return function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(dispatch, getState) {
            var recalls;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            dispatch({
                                type: LOAD_RECALLS
                            });
                            _context3.prev = 1;
                            _context3.next = 4;
                            return (0, _tools.getDataElements)(_constants.DOCTYPE_RECALLS);

                        case 4:
                            recalls = _context3.sent;

                            recalls.map(function (item) {
                                return _extends({}, item, {
                                    deadline: (0, _moment2.default)(item.deadline, 'DD/MM/YYYY'),
                                    alert: (0, _moment2.default)(item.alert, 'DD/MM/YYYY')
                                });
                            });

                            return _context3.abrupt('return', dispatch({
                                type: LOAD_RECALLS_SUCCESS,
                                recalls: recalls
                            }));

                        case 9:
                            _context3.prev = 9;
                            _context3.t0 = _context3['catch'](1);
                            return _context3.abrupt('return', dispatch({
                                type: LOAD_RECALLS_FAILURE,
                                error: _context3.t0
                            }));

                        case 12:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, undefined, [[1, 9]]);
        }));

        return function (_x7, _x8) {
            return _ref3.apply(this, arguments);
        };
    }();
};

var loadContacts = exports.loadContacts = function loadContacts() {
    return function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(dispatch, getState) {
            var result, noTrashContacts;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            dispatch({
                                type: LOAD_CONTACTS
                            });
                            _context4.prev = 1;
                            _context4.next = 4;
                            return (0, _tools.getDataElements)(_constants.DOCTYPE_CONTACTS);

                        case 4:
                            result = _context4.sent;
                            noTrashContacts = result.filter(function (c) {
                                return !c.trash;
                            });
                            return _context4.abrupt('return', dispatch({
                                type: LOAD_CONTACTS_SUCCESS,
                                contacts: noTrashContacts
                            }));

                        case 9:
                            _context4.prev = 9;
                            _context4.t0 = _context4['catch'](1);
                            return _context4.abrupt('return', dispatch({
                                type: LOAD_CONTACTS_FAILURE,
                                error: _context4.t0
                            }));

                        case 12:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, undefined, [[1, 9]]);
        }));

        return function (_x9, _x10) {
            return _ref4.apply(this, arguments);
        };
    }();
};

var loadNews = exports.loadNews = function loadNews() {
    return function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(dispatch, getState) {
            var result;
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            dispatch({
                                type: LOAD_NEWS
                            });
                            _context5.prev = 1;
                            _context5.next = 4;
                            return (0, _tools.getDataElements)(_constants.DOCTYPE_NEWS);

                        case 4:
                            result = _context5.sent;
                            return _context5.abrupt('return', dispatch({
                                type: LOAD_NEWS_SUCCESS,
                                news: result
                            }));

                        case 8:
                            _context5.prev = 8;
                            _context5.t0 = _context5['catch'](1);
                            return _context5.abrupt('return', dispatch({
                                type: LOAD_NEWS_FAILURE,
                                error: _context5.t0
                            }));

                        case 11:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, undefined, [[1, 8]]);
        }));

        return function (_x11, _x12) {
            return _ref5.apply(this, arguments);
        };
    }();
};

var loadData = exports.loadData = function loadData() {
    var doctype = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.DOCTYPE_DIAGNOSIS;

    return createLoader(LOAD_DATA, LOAD_DATA_SUCCESS, LOAD_DATA_FAILURE, doctype);
};

var createLoader = function createLoader(action, actionSuccess, actionFailure, doctype) {
    return function () {
        var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(dispatch, getState) {
            var data, noTrashData;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            dispatch({
                                type: action
                            });
                            _context6.prev = 1;
                            _context6.next = 4;
                            return (0, _tools.getDataElements)(doctype);

                        case 4:
                            data = _context6.sent;
                            noTrashData = data.filter(function (d) {
                                return !d.trash;
                            });
                            return _context6.abrupt('return', dispatch({
                                type: actionSuccess,
                                data: noTrashData.map(function (item) {
                                    item.doctype = doctype;
                                    return item;
                                }),
                                doctype: doctype
                            }));

                        case 9:
                            _context6.prev = 9;
                            _context6.t0 = _context6['catch'](1);
                            return _context6.abrupt('return', dispatch({
                                type: actionFailure,
                                error: _context6.t0
                            }));

                        case 12:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, _callee6, undefined, [[1, 9]]);
        }));

        return function (_x14, _x15) {
            return _ref6.apply(this, arguments);
        };
    }();
};

// export const loadEquipments = () => {
//     return createLoader(LOAD_EQUIPMENTS, LOAD_EQUIPMENTS_SUCCESS, LOAD_EQUIPMENTS_FAILURE, DOCTYPE_EQUIPMENTS)
// }

// export const loadWorks = () => {
//     return createLoader(LOAD_WORKS, LOAD_WORKS_SUCCESS, LOAD_WORKS_FAILURE, DOCTYPE_WORKS)
// }

// export const loadMaintenances = () => {
//     return createLoader(LOAD_MAINTENANCES, LOAD_MAINTENANCES_SUCCESS, LOAD_MAINTENANCES_FAILURE, DOCTYPE_MAINTENANCES)
// }

// export const loadHomedata = () => {
//     return createLoader(LOAD_HOME, LOAD_HOME_SUCCESS, LOAD_HOME_FAILURE, DOCTYPE_HOMEDATA)
// }

// export const loadDiagnosis = () => {
//      return createLoader(LOAD_DIAGNOSIS, LOAD_DIAGNOSIS_SUCCESS, LOAD_DIAGNOSIS_FAILURE, DOCTYPE_DIAGNOSIS)
// }

var loadTrash = exports.loadTrash = function loadTrash() {
    return function () {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(dispatch, getState) {
            var files, result, contacts, data, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

            return regeneratorRuntime.wrap(function _callee7$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            dispatch({
                                type: LOAD_TRASH
                            });
                            _context8.prev = 1;
                            _context8.next = 4;
                            return cozy.client.files.listTrash();

                        case 4:
                            files = _context8.sent;
                            _context8.next = 7;
                            return (0, _tools.getDataElements)(_constants.DOCTYPE_CONTACTS);

                        case 7:
                            result = _context8.sent;
                            contacts = result.filter(function (c) {
                                return c.trash;
                            });
                            data = [];
                            _iteratorNormalCompletion = true;
                            _didIteratorError = false;
                            _iteratorError = undefined;
                            _context8.prev = 13;
                            _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {
                                var infos, result, newData;
                                return regeneratorRuntime.wrap(function _loop$(_context7) {
                                    while (1) {
                                        switch (_context7.prev = _context7.next) {
                                            case 0:
                                                infos = _step.value;
                                                _context7.next = 3;
                                                return (0, _tools.getDataElements)(infos.doctype);

                                            case 3:
                                                result = _context7.sent;
                                                newData = result.filter(function (c) {
                                                    return c.trash;
                                                }).map(function (d) {
                                                    d.doctype = infos.doctype;return d;
                                                });

                                                data.push.apply(data, _toConsumableArray(newData));

                                            case 6:
                                            case 'end':
                                                return _context7.stop();
                                        }
                                    }
                                }, _loop, undefined);
                            });
                            _iterator = _constants.DATA_LIST[Symbol.iterator]();

                        case 16:
                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                _context8.next = 21;
                                break;
                            }

                            return _context8.delegateYield(_loop(), 't0', 18);

                        case 18:
                            _iteratorNormalCompletion = true;
                            _context8.next = 16;
                            break;

                        case 21:
                            _context8.next = 27;
                            break;

                        case 23:
                            _context8.prev = 23;
                            _context8.t1 = _context8['catch'](13);
                            _didIteratorError = true;
                            _iteratorError = _context8.t1;

                        case 27:
                            _context8.prev = 27;
                            _context8.prev = 28;

                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }

                        case 30:
                            _context8.prev = 30;

                            if (!_didIteratorError) {
                                _context8.next = 33;
                                break;
                            }

                            throw _iteratorError;

                        case 33:
                            return _context8.finish(30);

                        case 34:
                            return _context8.finish(27);

                        case 35:
                            return _context8.abrupt('return', dispatch({
                                type: LOAD_TRASH_SUCCESS,
                                files: files.map(function (c) {
                                    return (0, _tools.extractFileAttributes)(c);
                                }),
                                contacts: contacts,
                                data: data
                            }));

                        case 38:
                            _context8.prev = 38;
                            _context8.t2 = _context8['catch'](1);
                            return _context8.abrupt('return', dispatch({
                                type: LOAD_TRASH_FAILURE,
                                error: _context8.t2
                            }));

                        case 41:
                        case 'end':
                            return _context8.stop();
                    }
                }
            }, _callee7, undefined, [[1, 38], [13, 23, 27, 35], [28,, 30, 34]]);
        }));

        return function (_x16, _x17) {
            return _ref7.apply(this, arguments);
        };
    }();
};

/***/ }),

/***/ "./src/public/components/elements/DataForm.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _moment = __webpack_require__("./node_modules/moment/moment.js");

var _moment2 = _interopRequireDefault(_moment);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _Page = __webpack_require__("./src/public/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _buttons = __webpack_require__("./src/public/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _DataForm = __webpack_require__("./src/public/styles/DataForm.scss");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _CustomInput = __webpack_require__("./src/public/components/utils/CustomInput.jsx");

var _CustomInput2 = _interopRequireDefault(_CustomInput);

var _constants = __webpack_require__("./src/public/constants/index.js");

var _dataFields = __webpack_require__("./src/scripts/dataFields.js");

var _tools = __webpack_require__("./src/public/tools/index.js");

var _index = __webpack_require__("./src/public/tools/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DataForm = function (_Component) {
  _inherits(DataForm, _Component);

  function DataForm(props, context) {
    _classCallCheck(this, DataForm);

    var _this = _possibleConstructorReturn(this, (DataForm.__proto__ || Object.getPrototypeOf(DataForm)).call(this, props, context));

    _this.state = {
      values: [],
      hiddenType: props.hiddenType || '',
      formType: props.formType || '',
      step: props.step || 0,
      onboard: _this.props.onboard || false,
      import: false
    };
    return _this;
  }

  _createClass(DataForm, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      if (this.props.onboard) {
        var val = [];

        switch (this.props.step) {
          case 1:
            this.infos = (0, _dataFields.getInfosFromSlug)("homedata");
            this.fields = (0, _dataFields.getFields)(this.infos.doctype);

            (0, _index.getDataElements)(this.infos.doctype).then(function (res) {
              if (res.length > 0) {
                val = res[0];
                _this2.setState({ values: val, onboard: true, step: 1 });
              }
            });
            break;
          case 2 || 3:
            this.infos = (0, _dataFields.getInfosFromSlug)("fcontacts");
            this.fields = (0, _dataFields.getFields)(this.infos.doctype, this.state.formType);
            val['type'] = "city_hall";
            break;
          case 3:
            this.infos = (0, _dataFields.getInfosFromSlug)("fcontacts");
            this.fields = (0, _dataFields.getFields)(this.infos.doctype, this.state.formType);
            val['type'] = "";
            this.setState({ values: val, onboard: true, step: this.props.step });
            break;
        }
      } else {
        this.infos = (0, _dataFields.getInfosFromSlug)(this.props.slug);
        this.fields = (0, _dataFields.getFields)(this.infos.doctype, this.props.formType);
        console.log(this.fields);
        console.log(this.infos);
        console.log(this.props.formType);
      }
      if (this.fields[0].import) {
        this.setState({ import: true });
      }
    }
  }, {
    key: 'previousStep',
    value: function previousStep() {
      var step = this.state.step - 1;
      if (step < 0) return;
      this.setState({ step: step });
    }
  }, {
    key: 'nextStepSkip',
    value: function nextStepSkip() {
      var questions = this.fields[0].group;
      var q = questions[this.state.step];
      this.state.values[q.name] = '';
      this.nextStep();
    }
  }, {
    key: 'onimport',
    value: function onimport() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      this.setState({ import: value });
    }
  }, {
    key: 'nextStep',
    value: function nextStep() {
      var _this3 = this;

      var nb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;


      //Save the new data
      if (this.state.hiddenType != "") this.state.values["type"] = this.state.hiddenType;

      if (this.state.formType != "") this.state.values["formType"] = this.state.formType;

      var data = this.state.values;

      if (data._id) {

        this.props.onSaveData(this.infos.doctype, data._id, data).then(function (data) {
          if (_this3.state.onboard) {
            var val = [];
            switch (_this3.state.step) {
              case 1:
              case 2:
                _this3.infos = (0, _dataFields.getInfosFromSlug)("fcontacts");
                _this3.fields = (0, _dataFields.getFields)(_this3.infos.doctype);
                (0, _index.getDataElements)(_this3.infos.doctype).then(function (res) {
                  var exist = false;
                  var type = "";
                  if (res.length > 0) {
                    switch (_this3.state.step + 1) {
                      case 2:
                        exist = _lodash2.default.find(res, function (t) {
                          return t.type === "Mairie";
                        });
                        type = "Mairie";
                        break;
                      case 3:
                        exist = _lodash2.default.find(res, function (t) {
                          return t.type === "Médecin Traitant";
                        });
                        type = "Médecin Traitant";
                    }
                  }
                  if (exist) {
                    val = exist;
                  } else {
                    val['type'] = type;
                    val['telephone'] = "";
                    val['telecopie'] = "";
                    val['email'] = "";
                    val['address'] = {
                      city: '',
                      way: '',
                      code: ''
                    };
                  }
                  _this3.setState({ values: val, onboard: true, step: _this3.state.step + 1 });
                });
                break;
              case 3:
                _this3.props.close('/home');

            }
          } else {
            console.log(_this3.infos);
            _this3.props.closeModal('/letter/contact/' + _this3.infos.slug + '/' + data.data._id);
          }
        });
      } else {
        this.props.onNewData(this.infos.doctype, data).then(function (data) {
          if (_this3.state.onboard) {
            var val = [];
            switch (_this3.state.step) {
              case 1:
              case 2:
                if (_this3.state.step + 1 == 2) {
                  _this3.infos = (0, _dataFields.getInfosFromSlug)("fcontacts", "default");
                }
                if (_this3.state.step + 1 == 3) {
                  _this3.infos = (0, _dataFields.getInfosFromSlug)("fcontacts", "default");
                }
                _this3.fields = (0, _dataFields.getFields)(_this3.infos.doctype);
                (0, _index.getDataElements)(_this3.infos.doctype).then(function (res) {
                  var exist = false;
                  var type = "";
                  if (res.length > 0) {
                    switch (_this3.state.step + 1) {
                      case 2:
                        exist = _lodash2.default.find(res, function (t) {
                          return t.type === "Mairie";
                        });
                        type = "Mairie";
                        break;
                      case 3:
                        exist = _lodash2.default.find(res, function (t) {
                          return t.type === "Médecin Traitant";
                        });
                        type = "Médecin Traitant";
                    }
                  }
                  if (exist) {
                    val = exist;
                  } else {
                    val['type'] = type;
                    val['telephone'] = "";
                    val['telecopie'] = "";
                    val['email'] = "";
                    val['address'] = {
                      city: '',
                      way: '',
                      code: ''
                    };
                  }
                  _this3.setState({ values: val, onboard: true, step: _this3.state.step + 1 });
                });
                break;
              case 3:
                _this3.props.close('/home');
            }
          } else {
            console.log(_this3.infos);
            console.log(data);
            _this3.props.closeModal('/letter/contact/' + data.data.formType + '/' + data.data._id);
          }
        });
      }
    }
  }, {
    key: 'change',
    value: function change(value, name) {
      var values = _extends({}, this.state.values, _defineProperty({}, name, value));
      this.setState({ values: values });
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      this.props.history.goBack();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var questions = this.fields[0].group;
      var header = [];
      var headercontent = [];

      {
        if (this.state.onboard) {
          switch (this.state.step) {

            case 1:
              headercontent["step"] = "Etape 1";
              headercontent["title "] = "Compléter votre fiche info";
              headercontent["subtitle "] = "Il s'agit ici de rappeler vos informations d'identité basique. Même si vos proches connaissent les détails, il est toujours utile de les avoir sur l'outil.";

              break;
            case 2:
              headercontent["step"] = "Etape 2";
              headercontent["title "] = "Créer ou Importer votre contact pour la Mairie";
              headercontent["subtitle "] = "La mairie est un organisme essentiel dans les démarches d'organisation d'obsèques\n" + "pour vos proches, c'est elle qui va éditer l'acte de décès.";
              break;

            case 3:
              headercontent["step"] = "Etape 3";
              headercontent["title "] = "Créer votre contact pour votre Médecin";
              headercontent["subtitle "] = "Les coordonnées du médecin sont elles aussi essentielles.\n" + "C’est le médecin qui constate le décès.";

          }
          header.push(_react2.default.createElement(
            'div',
            { key: 'header', className: 'col-md-12' },
            _react2.default.createElement(
              'h3',
              null,
              headercontent["step"]
            ),
            _react2.default.createElement('br', null),
            _react2.default.createElement(
              'h4',
              null,
              headercontent["title "]
            ),
            _react2.default.createElement(
              'h5',
              null,
              headercontent["subtitle "]
            )
          ));
        } else {
          header.push(_react2.default.createElement(
            'div',
            { key: 'header', className: 'col-md-12' },
            _react2.default.createElement(
              'h3',
              null,
              this.fields[0].name
            ),
            _react2.default.createElement('br', null),
            _react2.default.createElement(
              'h4',
              null,
              this.fields[0].description || this.props.hiddenType
            )
          ));
        }
      }

      return _react2.default.createElement(
        'div',
        { className: _DataForm2.default.main, onClick: function onClick(e) {
            return e.stopPropagation();
          } },
        _react2.default.createElement(
          'div',
          { className: 'content' },
          _react2.default.createElement(
            'div',
            { className: _DataForm2.default.header },
            header
          ),
          this.state.import == false && questions.map(function (item, key) {
            var size = 12;
            var hide = item[0].hide || false;
            if (12 % item.length == 0 && !hide) {
              size = 12 / item.length;
            }
            var row = [];
            item.map(function (subitem, subkey) {
              var Class = "col-sm-12 col-md-" + size;

              if (hide) {
                subitem.values == _this4.props.hiddenType;
                Class = _DataForm2.default.hidden;
              }
              row.push(_react2.default.createElement(
                'div',
                { className: Class },
                _react2.default.createElement(
                  'label',
                  null,
                  subitem.question || subitem.display
                ),
                _react2.default.createElement(_CustomInput2.default, { className: _DataForm2.default.input, value: _this4.state.values[subitem.name], type: subitem.type, values: subitem.values, placeholder: subitem.display, onChange: function onChange(e) {
                    return _this4.change(e, subitem.name);
                  } })
              ));
            });
            return row;
          }),
          this.state.import == true && _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'div',
              { className: (0, _classnames2.default)("col-md-6", _DataForm2.default.importCard), onClick: function onClick() {
                  return _this4.onimport();
                } },
              _react2.default.createElement('i', { className: "ion-ios-person" }),
              ' ',
              _react2.default.createElement('br', null),
              'Cr\xE9er votre contact ',
              _react2.default.createElement('br', null),
              _react2.default.createElement('span', null)
            ),
            _react2.default.createElement(
              'div',
              { className: (0, _classnames2.default)("col-md-6", _DataForm2.default.importCard, _DataForm2.default.disable) },
              _react2.default.createElement('div', { className: _DataForm2.default.overlay }),
              _react2.default.createElement('i', { className: (0, _classnames2.default)("ion-ios-people") }),
              ' ',
              _react2.default.createElement('br', null),
              'Importer votre contact ',
              _react2.default.createElement('br', null),
              _react2.default.createElement('span', null)
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _DataForm2.default.footer },
          _react2.default.createElement(
            'button',
            { onClick: function onClick() {
                return _this4.props.close();
              }, className: (0, _classnames2.default)(_DataForm2.default.button, _buttons2.default.button, _buttons2.default.defaultLight), title: 'Fermer' },
            'FERMER'
          ),
          this.state.import == false && _react2.default.createElement(
            'button',
            { onClick: function onClick() {
                return _this4.nextStep();
              }, className: (0, _classnames2.default)(_DataForm2.default.button, _buttons2.default.button, _buttons2.default.default), title: 'Suivant' },
            'VALIDER'
          )
        )
      );
    }
  }]);

  return DataForm;
}(_react.Component);

exports.default = DataForm;

/***/ }),

/***/ "./src/public/components/elements/DirectoryPicker.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _DirectoryPicker = __webpack_require__("./src/public/styles/DirectoryPicker.scss");

var _DirectoryPicker2 = _interopRequireDefault(_DirectoryPicker);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DirectoryPicker = function (_React$Component) {
    _inherits(DirectoryPicker, _React$Component);

    function DirectoryPicker(props, context) {
        _classCallCheck(this, DirectoryPicker);

        var _this = _possibleConstructorReturn(this, (DirectoryPicker.__proto__ || Object.getPrototypeOf(DirectoryPicker)).call(this, props, context));

        if (!_this.props.root) return _possibleConstructorReturn(_this);

        _this.default = _this.props.default;

        _this.state = {
            current: _this.props.default || _this.props.root
        };
        return _this;
    }

    _createClass(DirectoryPicker, [{
        key: '_onItemClick',
        value: function _onItemClick(path) {
            var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (this.props.files && dir) return;
            if (!this.props.files && !dir) return;

            if (!path) return;
            this.setState({
                current: path
            });

            if (_lodash2.default.isFunction(this.props.onPathChange)) this.props.onPathChange(path);
        }
    }, {
        key: '_toggleDir',
        value: function _toggleDir(path) {

            var ok = this.toggleDirRec(path, this.props.dirs.childs);

            if (ok) {
                this.setState({});
            }
        }
    }, {
        key: 'toggleDirRec',
        value: function toggleDirRec(path, array) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = array[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var d = _step.value;

                    if (d.path === path) {
                        d.open = !d.open;
                        return true;
                    } else {
                        if (d.childs && d.childs.length > 0) {
                            var ok = this.toggleDirRec(path, d.childs);
                            if (ok) return true;
                        }
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return false;
        }
    }, {
        key: '_renderDirs',
        value: function _renderDirs() {
            var _this2 = this;

            if (this.props.dirs) {
                var list = this.createDirList(this.props.dirs.childs);
                var displayName = this.props.dirs.name;
                return _react2.default.createElement(
                    'div',
                    { className: _DirectoryPicker2.default.container },
                    _react2.default.createElement(
                        'span',
                        { className: (0, _classnames2.default)(_DirectoryPicker2.default.name, _defineProperty({}, _DirectoryPicker2.default.selected, this.props.dirs.path === this.state.current)), onClick: function onClick() {
                                return _this2._onItemClick(_this2.props.dirs.path, true);
                            } },
                        _react2.default.createElement('i', { className: (0, _classnames2.default)(_DirectoryPicker2.default.icon, "ion-ios-arrow-down") }),
                        _react2.default.createElement('i', { className: (0, _classnames2.default)(_DirectoryPicker2.default.icon, "ion-ios-folder-outline") }),
                        displayName
                    ),
                    list
                );
            }
            return null;
        }
    }, {
        key: 'createDirList',
        value: function createDirList() {
            var _this3 = this;

            var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            if (list.length === 0) return null;
            var ret = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var l = _step2.value;

                    if (this.props.hideFiles && !l.dir) continue;

                    var displayName = l.name.substring(l.name.lastIndexOf('/') + 1);
                    ret.push(_react2.default.createElement(
                        'li',
                        { key: l.name },
                        _react2.default.createElement(
                            'span',
                            { className: (0, _classnames2.default)(_DirectoryPicker2.default.name, _defineProperty({}, _DirectoryPicker2.default.selected, l.path === this.state.current)),
                                'data-path': l.path,
                                'data-dir': l.dir,
                                onDoubleClick: function onDoubleClick(e) {
                                    return _this3._toggleDir(e.target.dataset.path);
                                },
                                onClick: function onClick(e) {
                                    return _this3._onItemClick(e.target.dataset.path, e.target.dataset.dir);
                                }
                            },
                            l.dir && _react2.default.createElement('i', { onClick: function onClick(e) {
                                    return _this3._toggleDir(e.target.dataset.path);
                                },
                                'data-path': l.path,
                                className: (0, _classnames2.default)(_DirectoryPicker2.default.icon, { 'ion-ios-arrow-right': l.childs.length > 0 && !l.open, 'ion-ios-arrow-down': l.childs.length > 0 && l.open }) }),
                            _react2.default.createElement('i', { className: (0, _classnames2.default)(_DirectoryPicker2.default.icon, _defineProperty({ "ion-ios-folder-outline": l.dir, "ion-ios-paper-outline": !l.dir }, _DirectoryPicker2.default.file, !l.dir)) }),
                            displayName
                        ),
                        l.open && l.childs.length > 0 ? this.createDirList(l.childs) : null
                    ));
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return _react2.default.createElement(
                'ul',
                { className: _DirectoryPicker2.default.content },
                ret
            );
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                { className: _DirectoryPicker2.default.main },
                this._renderDirs.bind(this)()
            );
        }
    }]);

    return DirectoryPicker;
}(_react2.default.Component);

exports.default = DirectoryPicker;

/***/ }),

/***/ "./src/public/components/elements/Home.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactPortal = __webpack_require__("./node_modules/react-portal/build/portal.js");

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _Modal = __webpack_require__("./src/public/components/modals/Modal.jsx");

var _Modal2 = _interopRequireDefault(_Modal);

var _Importer = __webpack_require__("./src/public/containers/Importer.js");

var _Importer2 = _interopRequireDefault(_Importer);

var _Page = __webpack_require__("./src/public/components/elements/Page.js");

var _Page2 = _interopRequireDefault(_Page);

var _fileTypes = __webpack_require__("./src/public/scripts/fileTypes.js");

var _buttons = __webpack_require__("./src/public/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _FuneralList = __webpack_require__("./src/public/styles/FuneralList.scss");

var _FuneralList2 = _interopRequireDefault(_FuneralList);

var _Navigation = __webpack_require__("./src/public/styles/Navigation.scss");

var _Navigation2 = _interopRequireDefault(_Navigation);

var _constants = __webpack_require__("./src/public/constants/index.js");

var _tools = __webpack_require__("./src/public/tools/index.js");

var _index = __webpack_require__("./src/public/constants/index.js");

var _dataFields = __webpack_require__("./src/public/scripts/dataFields.js");

var _DataForm = __webpack_require__("./src/public/containers/DataForm.js");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _onboarding = __webpack_require__("./src/public/scripts/onboarding.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Doctypes = [{
  doctype: _index.DOCTYPE_F_LASTWILL,
  display: 'Mes dernieres volontés',
  excerpt: 'Expliquez à vos proches vos attentes pour vos obsèques',
  path: '/funerals/lastwill',
  slug: 'lastwill',
  internpath: false,
  unique: true
}, {
  doctype: _index.DOCTYPE_CONTACTS,
  display: 'Don du corps à la science',
  excerpt: "Toutes les informations pour donner son corps à la science ou pour stipuler son refus de don d’organe.",
  path: '/don',
  internpath: '/don',
  unique: true
}, {
  doctype: _index.DOCTYPE_CONTACTS,
  display: 'Refus du don d\'organe ',
  excerpt: "Toutes les informations pour donner son corps à la science ou pour stipuler son refus de don d’organe.",
  path: '/don',
  internpath: '/don',
  unique: true
}, {
  doctype: _index.DOCTYPE_CONTACTS,
  display: 'Mes Proches Référents',
  excerpt: "Il s'agit des personnes qui auront accès à vos informations après votre décès.",
  path: '/funerals/works',
  internpath: '/relation',
  unique: true
}, {
  doctype: _index.DOCTYPE_CONTACTS,
  display: 'L\'employeur ou Pôle Emploi ',
  excerpt: "Lorem ipsum dolor sit amet",
  path: '/funerals/works',
  internpath: '/relation',
  unique: true
}];

var Row = function Row(props) {

  var button = props.unique ? props.check ? "Modifier" : "Compléter" : props.check ? "Ajouter un nouveau" : "Compléter";

  return _react2.default.createElement(
    'div',
    { onClick: function onClick(e) {
        return props.onAdd && props.onAdd(e);
      } },
    _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)(_FuneralList2.default.row) },
      _react2.default.createElement(
        'div',
        { className: _FuneralList2.default.name },
        _react2.default.createElement(
          'div',
          null,
          props.title,
          ' ',
          _react2.default.createElement('img', { className: _Navigation2.default.chevron, src: 'public/media/chevronpurple.svg' })
        ),
        _react2.default.createElement(
          'div',
          { className: _FuneralList2.default.excerpt },
          props.excerpt
        )
      )
    ),
    _react2.default.createElement('div', { className: _FuneralList2.default.separator })
  );
};
// FuneralList page component

var Home = function (_React$Component) {
  _inherits(Home, _React$Component);

  function Home(props) {
    _classCallCheck(this, Home);

    var _this = _possibleConstructorReturn(this, (Home.__proto__ || Object.getPrototypeOf(Home)).call(this, props));

    _this.fileTypes = (0, _fileTypes.getFileTypes)();
    _this.typeGroup = (0, _fileTypes.getTypesByGroup)();

    _this.state = {
      open: false,
      openOnboarding: false,
      openFirstOnboarding: false,
      current: '',
      InfoOpen: false,
      infoHeader: "",
      infoText: "",
      hiddenType: '',
      search: ''
    };
    return _this;
  }

  _createClass(Home, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      this.computeWidth(this.props);
      this.steps = 1;

      (0, _onboarding.isAlreadyShown)().then(function (res) {
        if (res) {
          return _this2.closeFirstOnboarding(true);
        }

        return (0, _onboarding.markAsShown)(true).then(function () {
          _this2.openFirstOnboarding();
        });
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      this.computeWidth(newProps);
    }
  }, {
    key: 'computeWidth',
    value: function computeWidth(props) {
      this.width = 0;
      var notPersoFileTypes = this.fileTypes.filter(function (f) {
        return !f.perso;
      });
      var notPersoUsed = props.usedType.filter(function (elem) {
        return _lodash2.default.find(notPersoFileTypes, function (f) {
          return f.key === elem.type;
        }) === undefined;
      });
      var totalUsed = notPersoUsed.length + props.dataCreated.length;
      var totalTypes = notPersoFileTypes.length + Doctypes.length;
      this.width = totalUsed / totalTypes * 100;
    }
  }, {
    key: 'clickDocument',
    value: function clickDocument(key, location) {
      this.props.onFileClick(location, key);
      this.setState({ open: true });
    }
  }, {
    key: 'clickOnWill',
    value: function clickOnWill(data) {
      var item = (0, _dataFields.getInfosFromDoctype)(data.doctype);
      this.setState({ current: item.slug, open: true });
    }
  }, {
    key: 'closeOnboarding',
    value: function closeOnboarding() {
      this.setState({ openOnboarding: false });
      this.forceUpdate();
    }
  }, {
    key: 'openOnboarding',
    value: function openOnboarding() {
      this.setState({ openOnboarding: true });
    }
  }, {
    key: 'openFirstOnboarding',
    value: function openFirstOnboarding() {
      this.setState({ openFirstOnboarding: true });
    }
  }, {
    key: 'closeFirstOnboarding',
    value: function closeFirstOnboarding() {
      var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (init) {
        this.setState({ openFirstOnboarding: false });
      } else {
        this.setState({ openFirstOnboarding: false, openOnboarding: true });
      }
    }
  }, {
    key: 'clickOnContacts',
    value: function clickOnContacts() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      var item = (0, _dataFields.getInfosFromDoctype)(_constants.DOCTYPE_HOMEDATA);
      this.setState({ current: item.slug, open: true, hiddenType: data.name });
    }
  }, {
    key: 'clickOninfo',
    value: function clickOninfo(e) {
      var header = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var text = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

      e.preventDefault();
      e.stopPropagation();
      this.setState({ InfoOpen: true, infoText: text, infoHeader: header });
    }
    // render

  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var add = _react2.default.createElement(
        'button',
        { onClick: function onClick() {
            return _this3.openOnboarding();
          }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default) },
        _react2.default.createElement('img', { className: _FuneralList2.default.add, src: 'public/media/add.svg' }),
        'RENSEIGNER LES INFORMATIONS'
      );
      return _react2.default.createElement(
        _Page2.default,
        { title: 'Votre espace priv\xE9 d\xE9c\xE8s', actions: [add],
          subtitle: 'Bienvenue dans votre espace priv\xE9. Quel que soit son \xE2ge, on a tous dans l\'id\xE9e de laisser nos \xAB\xA0affaires en ordre\xA0\xBB, au cas o\xF9... Ici, vous avez la possibilit\xE9 de le faire en toute qui\xE9tude, \xE0 votre rythme.  Commencez, interrompez-vous, reprenez plus tard. L\'outil est souple, intuitif, regorge d\u2019informations. Visitez-le \xE0 votre guise. A mesure que vous avancerez, votre r\xE9flexion sur vos derni\xE8res volont\xE9s pourra s\'affiner. Et en plus, cet espace est enti\xE8rement priv\xE9 et s\xE9curis\xE9. Il vous est r\xE9serv\xE9.' },
        _react2.default.createElement(
          'div',
          { className: _FuneralList2.default.main },
          _react2.default.createElement(
            'div',
            { className: _FuneralList2.default.entries },
            _react2.default.createElement(
              'h3',
              { className: _FuneralList2.default.titleHome },
              'Les informations restant \xE0 compl\xE9ter'
            ),
            _react2.default.createElement(
              'p',
              { className: _FuneralList2.default.introHome },
              ' L\'Espace priv\xE9 est instructif, riche d\'enseignements, pour prendre activement conscience des implications de votre d\xE9c\xE8s pour vos proches. La plateforme s\'appr\xE9hende comme un outil pratique, pour transmettre un relais dans des conditions de clart\xE9 et de s\xE9r\xE9nit\xE9. Il vous permet de r\xE9fl\xE9chir, de rep\xE9rer les \xE9ventuels oublis et de simplifier la t\xE2che de ceux qui organiseront vos obs\xE8ques selon vos d\xE9cisions.'
            ),
            _react2.default.createElement(
              'ul',
              { className: _FuneralList2.default.list },
              Doctypes.map(function (item, key) {
                var checked = _lodash2.default.find(_this3.props.dataCreated, function (t) {
                  return t.doctype === item.doctype;
                });
                if (checked) {
                  return null;
                }
                return _react2.default.createElement(
                  'li',
                  { key: key },
                  _react2.default.createElement(Row, { title: item.display, excerpt: item.excerpt, check: checked, unique: item.unique,
                    onAdd: function onAdd(e) {
                      if (item.unique && checked) {
                        (0, _tools.getDataElements)(item.doctype).then(function (res) {
                          if (res.length > 0) {
                            _this3.props.history.push('/data/' + item.slug + '/' + res[0]._id);
                          }
                        });
                      } else if (item.internpath) {
                        _this3.props.history.push(item.internpath);
                      } else if (typeof item.internModal != "undefined" && item.internModal.text != "") {
                        _this3.clickOninfo(e, item.display, item.internModal.text);
                      } else {
                        _this3.clickOnWill(item);
                      }
                    } })
                );
              })
            ),
            _react2.default.createElement(
              'div',
              { className: _FuneralList2.default.rowAd },
              _react2.default.createElement('div', { className: _FuneralList2.default.firstTitle }),
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.secondTitle },
                'Portail d\'information Espace priv\xE9 D\xE9c\xE8s'
              ),
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.Adtext },
                'Visitez notre site d\'information pour anticiper au mieux vos obs\xE8ques'
              ),
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.Adlink },
                _react2.default.createElement(
                  'a',
                  { href: 'http://maif.mymachinery.fr', target: '_blank' },
                  'EN SAVOIR +'
                )
              )
            ),
            _react2.default.createElement('div', { className: _FuneralList2.default.separator })
          )
        ),
        _react2.default.createElement(
          _reactPortal2.default,
          { closeOnOutsideClick: false, isOpened: this.state.open, closeOnEsc: true, onClose: function onClose() {
              return _this3.setState({ open: false });
            } },
          _react2.default.createElement(
            _Modal2.default,
            null,
            _react2.default.createElement(_DataForm2.default, {
              closeModal: this.props.history.replace,
              slug: this.state.current,
              hiddenType: this.state.hiddenType,
              onboard: false,
              close: function close() {
                _this3.setState({ open: false });
              }
            })
          )
        ),
        _react2.default.createElement(
          _reactPortal2.default,
          { closeOnOutsideClick: false, isOpened: this.state.openOnboarding, closeOnEsc: true, onClose: function onClose() {
              return _this3.setState({ openOnboarding: false });
            } },
          _react2.default.createElement(
            _Modal2.default,
            null,
            _react2.default.createElement(_DataForm2.default, {
              closeModal: this.props.history.replace,
              step: this.steps,
              slug: this.state.current,
              onboard: true,
              hiddenType: this.state.hiddenType,
              close: function close() {
                _this3.setState({ openOnboarding: false });
              }
            })
          )
        ),
        _react2.default.createElement(
          _reactPortal2.default,
          { closeOnOutsideClick: false, isOpened: this.state.openFirstOnboarding, closeOnEsc: true, onClose: function onClose() {
              return _this3.setState({ openFirstOnboarding: false });
            } },
          _react2.default.createElement(
            _Modal2.default,
            null,
            _react2.default.createElement(
              'div',
              { className: _FuneralList2.default.modal, onClick: function onClick(e) {
                  return e.stopPropagation();
                } },
              _react2.default.createElement('img', { style: { width: 100 + '%' }, src: 'public/media/onboardinginfo.jpg', alt: '' }),
              _react2.default.createElement(
                'button',
                { onClick: function onClick() {
                    return _this3.closeFirstOnboarding();
                  }, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.default) },
                _react2.default.createElement('i', { className: 'ion-ios-plus-empty' }),
                'SUIVANT'
              )
            )
          )
        ),
        _react2.default.createElement(
          _reactPortal2.default,
          { closeOnOutsideClick: false, isOpened: this.state.InfoOpen, closeOnEsc: true, onClose: function onClose() {
              return _this3.setState({ TypeOpen: false });
            } },
          _react2.default.createElement(
            _Modal2.default,
            null,
            _react2.default.createElement(
              'div',
              { className: _FuneralList2.default.ModalMain },
              _react2.default.createElement(
                'div',
                { className: _FuneralList2.default.edition, onClick: function onClick(e) {
                    return e.stopPropagation();
                  } },
                _react2.default.createElement(
                  'div',
                  { className: _FuneralList2.default.header },
                  _react2.default.createElement(
                    'div',
                    null,
                    _react2.default.createElement(
                      'h1',
                      null,
                      this.state.infoHeader
                    )
                  )
                ),
                _react2.default.createElement(
                  'form',
                  { className: _FuneralList2.default.content },
                  _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.row },
                    this.state.infoText
                  )
                ),
                _react2.default.createElement(
                  'div',
                  { className: _FuneralList2.default.footer },
                  _react2.default.createElement(
                    'div',
                    { className: _FuneralList2.default.footerRight },
                    _react2.default.createElement(
                      'button',
                      {
                        onClick: function onClick(e) {
                          return _this3.setState({ InfoOpen: false, infoText: '' });
                        },
                        className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.defaultLight)
                      },
                      'FERMER'
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
  }]);

  return Home;
}(_react2.default.Component);

exports.default = Home;

/***/ }),

/***/ "./src/public/components/elements/Page.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Page = undefined;

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _Page = __webpack_require__("./src/public/styles/Page.scss");

var _Page2 = _interopRequireDefault(_Page);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _buttons = __webpack_require__("./src/public/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Page = exports.Page = function Page(_ref) {
    var children = _ref.children,
        actions = _ref.actions,
        options = _ref.options,
        title = _ref.title,
        subtitle = _ref.subtitle,
        onBackPress = _ref.onBackPress,
        flex = _ref.flex,
        firstP = _ref.firstP;

    return _react2.default.createElement(
        'section',
        { className: (0, _classnames2.default)(_Page2.default.main, _defineProperty({}, _Page2.default.flex, flex)) },
        _react2.default.createElement(
            'div',
            { className: _Page2.default.header },
            _react2.default.createElement(
                'div',
                { className: _Page2.default.row1 },
                _react2.default.createElement(
                    'h1',
                    { className: _Page2.default.title },
                    title
                ),
                onBackPress && _react2.default.createElement(
                    'button',
                    { onClick: onBackPress, className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable, _Page2.default.back) },
                    _react2.default.createElement('i', { className: 'ion-ios-arrow-thin-left' })
                )
            ),
            _react2.default.createElement(
                'div',
                { className: _Page2.default.row2 },
                _react2.default.createElement(
                    'h2',
                    { className: _Page2.default.subtitle },
                    subtitle || ' '
                )
            ),
            _react2.default.createElement(
                'div',
                { className: _Page2.default.row2 },
                _react2.default.createElement(
                    'h3',
                    { className: _Page2.default.titlePage },
                    firstP || ' '
                ),
                _react2.default.createElement(
                    'ul',
                    { className: _Page2.default.actions },
                    actions && actions.map(function (item, key) {
                        return _react2.default.createElement(
                            'li',
                            { key: key },
                            item
                        );
                    })
                ),
                options && _react2.default.createElement(
                    'ul',
                    { className: _Page2.default.options },
                    options.map(function (item, key) {
                        return _react2.default.createElement(
                            'li',
                            { key: key },
                            item
                        );
                    })
                )
            )
        ),
        _react2.default.createElement(
            'div',
            { className: (0, _classnames2.default)(_Page2.default.content, _defineProperty({}, _Page2.default.flex, flex)) },
            children
        )
    );
};

exports.default = Page;

/***/ }),

/***/ "./src/public/components/modals/ImporterModal.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _lodash = __webpack_require__("./node_modules/lodash/lodash.js");

var _lodash2 = _interopRequireDefault(_lodash);

var _ImporterModal = __webpack_require__("./src/public/styles/ImporterModal.scss");

var _ImporterModal2 = _interopRequireDefault(_ImporterModal);

var _buttons = __webpack_require__("./src/public/styles/buttons.scss");

var _buttons2 = _interopRequireDefault(_buttons);

var _classnames = __webpack_require__("./node_modules/classnames/index.js");

var _classnames2 = _interopRequireDefault(_classnames);

var _DirectoryPicker = __webpack_require__("./src/public/components/elements/DirectoryPicker.jsx");

var _DirectoryPicker2 = _interopRequireDefault(_DirectoryPicker);

var _reactDropzone = __webpack_require__("./node_modules/react-dropzone/dist/index.js");

var _reactDropzone2 = _interopRequireDefault(_reactDropzone);

var _fileTypes = __webpack_require__("./src/public/scripts/fileTypes.js");

var _constants = __webpack_require__("./src/public/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImportDocument = function ImportDocument(_ref) {
    var item = _ref.item,
        currentType = _ref.currentType,
        onDocChange = _ref.onDocChange,
        toobig = _ref.toobig;


    var typesByGroup = (0, _fileTypes.getTypesByGroup)();
    var isDirectory = item.isDirectory || false;

    if (!item.typeFile) {
        if (currentType != '') {
            item.typeFile = currentType;
        } else {
            item.typeFile = '';
        }
    }
    var preview = '/images/file.png';

    if (/^image\//.test(item.type)) {
        preview = item.preview;
    }

    if (isDirectory) preview = '/images/folder.png';

    return _react2.default.createElement(
        'div',
        { style: toobig ? { borderColor: '#ff3f3a' } : {}, className: _ImporterModal2.default.doc, onClick: function onClick(e) {
                return e.stopPropagation();
            } },
        _react2.default.createElement(
            'div',
            { className: _ImporterModal2.default.image },
            _react2.default.createElement('object', { data: preview, type: 'application/pdf' })
        ),
        _react2.default.createElement(
            'span',
            { className: _ImporterModal2.default.docName },
            item.name
        ),
        toobig && _react2.default.createElement(
            'span',
            { style: { color: '#ff3f3a', fontSize: '12px' } },
            'Trop lourd (> 20Mo)'
        )
    );
};

var ImporterModal = function (_Component) {
    _inherits(ImporterModal, _Component);

    function ImporterModal(props, context) {
        _classCallCheck(this, ImporterModal);

        var _this = _possibleConstructorReturn(this, (ImporterModal.__proto__ || Object.getPrototypeOf(ImporterModal)).call(this, props, context));

        _this.state = {
            documents: [],
            dropzoneActive: false
        };
        return _this;
    }

    _createClass(ImporterModal, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(props, context) {

            // Réinitialise la modal
            this.setState({
                dropzoneActive: false
            });
        }
    }, {
        key: 'cancel',
        value: function cancel(e) {
            e.stopPropagation();
            this.props.closePortal();
        }
    }, {
        key: 'next',
        value: function next() {
            this.props.onChangeView(_constants.VIEW_DIR);
        }
    }, {
        key: 'prev',
        value: function prev() {
            this.props.onChangeView(_constants.VIEW_FILE);
        }
    }, {
        key: 'import',
        value: function _import(e) {
            var _this2 = this;

            if (this.state.documents.length > 0) {
                cozy.client.files.statByPath(_constants.ROOT_PATH + '/Mes Obsèques').then(function (stat) {
                    return _this2.props.onImport(_this2.state.documents, stat._id);
                    location.reload();
                }).then(function (data) {
                    if (data.files) {
                        var toImport = data.files.filter(function (f) {
                            return f.size <= _constants.MAX_FILE_SIZE;
                        });
                        if (toImport.length > 0) {
                            _this2.props.onImportDone(toImport);
                            location.reload();
                        }
                    }
                });
            }
            this.cancel(e);
        }
    }, {
        key: '_dropFiles',
        value: function _dropFiles(f, e) {
            var _this3 = this;

            e.preventDefault();
            e.stopPropagation();

            if (e.dataTransfer) {

                if (e.dataTransfer.items) {
                    var items = e.dataTransfer.items;

                    var filesPromise = [];

                    var _loop = function _loop(i, item) {
                        // Skip this one if we didn't get a file.
                        if (item.kind != 'file') {
                            return 'continue';
                        }
                        var entry = item.webkitGetAsEntry();
                        if (entry.isDirectory) {

                            var readEntries = function readEntries(dirReader, entries) {
                                return new Promise(function (resolve, reject) {
                                    dirReader.readEntries(function (results) {
                                        if (!results.length) {
                                            return resolve(entries);
                                        } else {
                                            return Promise.all(results.map(function (r) {
                                                return new Promise(function (resolve, reject) {
                                                    if (r.isDirectory) return resolve();
                                                    r.file(resolve, reject);
                                                });
                                            })).then(function (files) {
                                                entries = entries.concat(files.slice().filter(function (f) {
                                                    return !!f;
                                                }));
                                                return readEntries(dirReader, entries).then(function (e) {
                                                    return resolve(e);
                                                });
                                            });
                                        }
                                    }, reject);
                                });
                            };

                            var dirReader = entry.createReader();
                            filesPromise.push(); //Read folder content

                            var p = readEntries(dirReader, []).then(function (content) {
                                return {
                                    name: entry.name,
                                    isDirectory: true,
                                    content: content
                                };
                            });

                            filesPromise.push(p);
                        } else if (entry.isFile) {
                            var _p = new Promise(function (resolve, reject) {
                                entry.file(resolve, reject);
                            }).then(function (e) {
                                return [e];
                            });

                            filesPromise.push(_p);
                        }
                    };

                    for (var i = 0, item; item = items[i]; ++i) {
                        var _ret = _loop(i, item);

                        if (_ret === 'continue') continue;
                    }

                    Promise.all(filesPromise).then(function (files) {
                        return _lodash2.default.flatten(files);
                    }).then(function (files) {
                        return _this3.addFiles(files);
                    });
                } else if (e.dataTransfer.files) {
                    var files = Array.prototype.slice.call(e.dataTransfer.files);
                    this.addFiles(files);
                } else {
                    console.error('Error can\'t read files');
                }
            } else if (e.target.files) {
                this.addFiles(e.target.files);
            }
        }
    }, {
        key: 'addFiles',
        value: function addFiles(files) {

            var oldDocs = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.state.documents[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var oldD = _step.value;

                    var ok = true;
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;

                    try {
                        for (var _iterator3 = files[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var newD = _step3.value;

                            if (newD.name === oldD.name) {
                                ok = false;
                                break;
                            }
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3;
                            }
                        }
                    }

                    if (ok) oldDocs.push(oldD);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (this.props.currentType) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = files[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var d = _step2.value;

                        d.typeFile = this.props.currentType;
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }

            this.setState({
                dropzoneActive: false,
                documents: [].concat(oldDocs, _toConsumableArray(files))
            });
        }
    }, {
        key: '_dragEnter',
        value: function _dragEnter(e) {
            if (e.dataTransfer.types[0] === "Files") {
                this.setState({
                    dropzoneActive: true
                });
            }
        }
    }, {
        key: '_dragLeave',
        value: function _dragLeave(e) {
            this.setState({
                dropzoneActive: false
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            return _react2.default.createElement(
                'div',
                { onClick: function onClick(e) {
                        return e.stopPropagation();
                    }, className: _ImporterModal2.default.main },
                _react2.default.createElement(
                    'div',
                    { className: _ImporterModal2.default.file },
                    _react2.default.createElement(
                        'div',
                        { className: _ImporterModal2.default.header },
                        _react2.default.createElement(
                            'span',
                            null,
                            'AJOUTER DES FICHIERS'
                        ),
                        _react2.default.createElement(
                            'button',
                            { className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable, _buttons2.default.clear), onClick: function onClick(e) {
                                    return _this4.cancel(e);
                                } },
                            _react2.default.createElement('i', { className: 'ion-ios-close-empty' })
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _ImporterModal2.default.content },
                        _react2.default.createElement(
                            _reactDropzone2.default,
                            {
                                ref: 'dropzone',
                                disableClick: false,
                                disablePreview: false,
                                className: (0, _classnames2.default)(_ImporterModal2.default.dropzone, _defineProperty({}, _ImporterModal2.default.active, this.state.dropzoneActive)),
                                onDrop: function onDrop(files, non, e) {
                                    return _this4._dropFiles(files, e);
                                },
                                onDragEnter: function onDragEnter(e) {
                                    return _this4._dragEnter(e);
                                },
                                onDragLeave: function onDragLeave(e) {
                                    return _this4._dragLeave(e);
                                },
                                inputProps: { capture: true }
                            },
                            this.state.documents.map(function (doc, key) {
                                return _react2.default.createElement(ImportDocument, { toobig: doc.size > _constants.MAX_FILE_SIZE, key: key, item: doc, onDocChange: function onDocChange() {
                                        return _this4.setState({});
                                    }, currentType: _this4.props.currentType });
                            }),
                            this.state.documents.length == 0 ? _react2.default.createElement(
                                'span',
                                { className: _ImporterModal2.default.message },
                                'd\xE9posez vos fichiers ici'
                            ) : null
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _ImporterModal2.default.footer },
                        _react2.default.createElement(
                            'button',
                            { type: 'button', className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable), onClick: function onClick(e) {
                                    return _this4.cancel(e);
                                } },
                            _react2.default.createElement('i', { className: 'ion-ios-close-empty' }),
                            'ANNULER'
                        ),
                        _react2.default.createElement(
                            'button',
                            { type: 'button', className: (0, _classnames2.default)(_buttons2.default.button, _buttons2.default.stable), onClick: function onClick(e) {
                                    return _this4.import(e);
                                } },
                            _react2.default.createElement('i', { className: 'ion-ios-cloud-upload-outline' }),
                            'OK'
                        )
                    )
                )
            );
        }
    }]);

    return ImporterModal;
}(_react.Component);

exports.default = ImporterModal;

/***/ }),

/***/ "./src/public/components/modals/Modal.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Modal = undefined;

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _Modal = __webpack_require__("./src/public/styles/Modal.scss");

var _Modal2 = _interopRequireDefault(_Modal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Modal = exports.Modal = function Modal(_ref) {
    var closePortal = _ref.closePortal,
        children = _ref.children,
        onClickOutside = _ref.onClickOutside;


    if (typeof children.type === 'function') {
        children = _react2.default.cloneElement(children, { closePortal: closePortal });
    }

    var handleClickOutside = onClickOutside || closePortal;

    return _react2.default.createElement(
        'div',
        { className: _Modal2.default.modal, onClick: handleClickOutside },
        children
    );
};

exports.default = Modal;

/***/ }),

/***/ "./src/public/components/utils/CustomInput.jsx":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _reactDatepicker = __webpack_require__("./node_modules/react-datepicker/es/index.js");

var _reactDatepicker2 = _interopRequireDefault(_reactDatepicker);

var _moment = __webpack_require__("./node_modules/moment/moment.js");

var _moment2 = _interopRequireDefault(_moment);

__webpack_require__("./src/public/styles/react-datepicker.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CustomInput = function (_Component) {
    _inherits(CustomInput, _Component);

    function CustomInput(props, context) {
        _classCallCheck(this, CustomInput);

        var _this = _possibleConstructorReturn(this, (CustomInput.__proto__ || Object.getPrototypeOf(CustomInput)).call(this, props, context));

        _this.state = {
            value: ''
        };
        return _this;
    }

    _createClass(CustomInput, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.state.value = this.props.value;
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
            this.state.value = newProps.value;
        }
    }, {
        key: 'onChangePhone',
        value: function onChangePhone(value) {
            // check if is a phone number
            var checkPhone = /0\d?([. -]?\d\d){0,4}\d?/;

            this.onChange(value);
        }
    }, {
        key: 'onChange',
        value: function onChange(value) {
            if (this.props.type === "date") {
                if (value && value.isValid()) {
                    value = value.format('DD/MM/YYYY');
                } else {
                    value = (0, _moment2.default)().format('DD/MM/YYYY');
                }
            }

            this.setState({ value: value });
            this.props.onChange(value);
        }
    }, {
        key: 'onChangeMulti',
        value: function onChangeMulti(v, index) {
            var value = this.state.value;
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') value = {};

            value[index] = v;

            this.setState({ value: value });
            this.props.onChange(value);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var value = this.state.value;
            var type = this.props.type || 'text';

            switch (type) {
                case 'boolean':
                    return _react2.default.createElement(
                        'select',
                        { autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, onChange: function onChange(e) {
                                return _this2.onChange(e.target.value);
                            } },
                        _react2.default.createElement(
                            'option',
                            { value: 0 },
                            'Non'
                        ),
                        _react2.default.createElement(
                            'option',
                            { value: 1 },
                            'Oui'
                        )
                    );

                case 'list':
                    if ((!value || value === '') && this.props.values) {
                        setTimeout(function () {
                            return _this2.props.onChange(_this2.props.values[0]);
                        });
                    }
                    return _react2.default.createElement(
                        'select',
                        { autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, onChange: function onChange(e) {
                                return _this2.onChange(e.target.value);
                            } },
                        this.props.values.map(function (item, key) {
                            return _react2.default.createElement(
                                'option',
                                { key: key, value: item },
                                item
                            );
                        })
                    );

                case 'listYears':
                    var currentYear = new Date().getFullYear();
                    var minYear = 1900;

                    var years = [];
                    for (var i = minYear; i <= currentYear; i++) {
                        years.unshift(i);
                    }if (!value || value === '') {
                        setTimeout(function () {
                            return _this2.props.onChange(currentYear);
                        });
                    }
                    return _react2.default.createElement(
                        'select',
                        { autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, onChange: function onChange(e) {
                                return _this2.onChange(e.target.value);
                            } },
                        years.map(function (item, key) {
                            return _react2.default.createElement(
                                'option',
                                { key: key, value: item },
                                item
                            );
                        })
                    );

                case 'date':

                    if (!value) {
                        value = (0, _moment2.default)();
                        // this.props.onChange(value.format('DD/MM/YYYY'))
                    } else {
                        value = (0, _moment2.default)(value, 'DD/MM/YYYY');
                    }

                    return _react2.default.createElement(_reactDatepicker2.default, {
                        dateFormat: 'DD/MM/YYYY',
                        locale: 'fr-fr',
                        isClearable: false,
                        selected: value,

                        dropdownMode: 'select',
                        onChange: function onChange(e) {
                            return _this2.onChange(e);
                        } });

                case 'email':
                    return _react2.default.createElement('input', { type: 'email', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, onChange: function onChange(e) {
                            return _this2.onChange(e.target.value);
                        }, placeholder: this.props.title });

                case 'telephone':
                    return _react2.default.createElement('input', { type: 'tel', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, onChange: function onChange(e) {
                            return _this2.onChangePhone(e.target.value);
                        }, placeholder: this.props.title });

                case 'textarea':
                    return _react2.default.createElement('textarea', { autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, onChange: function onChange(e) {
                            return _this2.onChange(e.target.value);
                        }, placeholder: this.props.title });

                case 'contract':
                    value = value || {};
                    return _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.company, onChange: function onChange(e) {
                                return _this2.onChangeMulti(e.target.value, "company");
                            }, placeholder: "Société" }),
                        _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.address, onChange: function onChange(e) {
                                return _this2.onChangeMulti(e.target.value, "address");
                            }, placeholder: "Adresse" }),
                        _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.email, onChange: function onChange(e) {
                                return _this2.onChangeMulti(e.target.value, "email");
                            }, placeholder: "Email" }),
                        _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.telephone, onChange: function onChange(e) {
                                return _this2.onChangeMulti(e.target.value, "telephone");
                            }, placeholder: "Téléphone" })
                    );

                case 'address':
                    value = value || {};
                    return _react2.default.createElement(
                        'div',
                        { className: 'adress' },
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 100 + '%' } },
                            _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.way, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "way");
                                }, placeholder: "Voie" })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 50 + '%', marginTop: 10 + 'px' } },
                            _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.code, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "code");
                                }, placeholder: "Code postal" })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 50 + '%', marginTop: 10 + 'px' } },
                            _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.city, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "city");
                                }, placeholder: "Ville" })
                        )
                    );

                case 'birthdate':
                    value = value || {};
                    return _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 33 + '%' } },
                            _react2.default.createElement('input', { type: 'number', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.day, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "day");
                                }, placeholder: "Jour" })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 33 + '%' } },
                            _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.month, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "month");
                                }, placeholder: "Mois" })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 33 + '%' } },
                            _react2.default.createElement('input', { type: 'number', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.year, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "year");
                                }, placeholder: "Année" })
                        )
                    );

                case 'interlocuteur':
                    value = value || {};
                    return _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 33 + '%' } },
                            _react2.default.createElement(
                                'select',
                                { autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.civility, onChange: function onChange(e) {
                                        return _this2.onChangeMulti(e.target.value, "civility");
                                    } },
                                _react2.default.createElement(
                                    'option',
                                    { key: 'Madame', value: 0 },
                                    'Madame'
                                ),
                                _react2.default.createElement(
                                    'option',
                                    { key: 'Monsieur', value: 1 },
                                    'Monsieur'
                                ),
                                _react2.default.createElement(
                                    'option',
                                    { key: 'Autre', value: 2 },
                                    'Autre'
                                )
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 33 + '%' } },
                            _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.lastname, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "lastname");
                                }, placeholder: "Nom de famille" })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: { paddingRight: 1 + "%", boxSizing: "border-box", display: "inline-block", width: 33 + '%' } },
                            _react2.default.createElement('input', { type: 'text', autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value.firstname, onChange: function onChange(e) {
                                    return _this2.onChangeMulti(e.target.value, "firstname");
                                }, placeholder: "Prénom" })
                        )
                    );

                default:
                    return _react2.default.createElement('input', { type: type, autoFocus: this.props.autoFocus, className: this.props.className, style: this.props.style, value: value, placeholder: this.props.title, onChange: function onChange(e) {
                            return _this2.onChange(e.target.value);
                        } });

            }
        }
    }]);

    return CustomInput;
}(_react.Component);

exports.default = CustomInput;

/***/ }),

/***/ "./src/public/constants/data/contact.json":
/***/ (function(module, exports) {

module.exports = [{"name":"Informations principales","group":[{"key":"city_hall","name":"Mairie","doctype":"com.empreinte.Fcontacts","excerpt":"C'est l'administration du lieu du décès qui établit l'acte de décès. Par précaution, le titulaire peut remplir le formulaire avec les coordonnées de sa commune de résidence","location":"/Empreinte/Funerals Contact","type":"city_hall","perso":0},{"key":"home_help","name":"Salarié ou associations","doctype":"com.empreinte.Fcontacts","excerpt":"Le décès de l'employeur met fin au contrat de travail qui liait celui-ci à son salarié. ","location":"/Empreinte/Funerals Contact","type":"home_help","perso":0},{"key":"work_help","name":"Pôle Emploi","doctype":"com.empreinte.Fcontacts","excerpt":"","location":"/Empreinte/Funerals Contact","type":"work_help","perso":0},{"key":"notaire","name":"Notaire","doctype":"com.empreinte.Fcontacts","excerpt":"Le recours au notaire est indispensable si le défunt possédait des biens immobiliers.","location":"/Empreinte/Funerals Contact","type":"notaire","perso":0},{"key":"bailleur","name":"Bailleur","doctype":"com.empreinte.Fcontacts","excerpt":"Prévenir le bailleur ou l'agence pour une location ou en cas de copropriété, prévenir le syndic.","location":"/Empreinte/Funerals Contact","type":"bailleur","perso":0},{"key":"prefecture","name":"Préfecture","doctype":"com.empreinte.Fcontacts","excerpt":"Pour modifier la carte grise d'un véhicule ","location":"/Empreinte/Funerals Contact","type":"prefecture","perso":0},{"key":"poste","name":"Poste","doctype":"com.empreinte.Fcontacts","excerpt":"Pour le réacheminement du courrier.","location":"/Empreinte/Funerals Contact","type":"poste","perso":0},{"key":"telecom","name":"Opérateur Télécom","doctype":"com.empreinte.Fcontacts","excerpt":"Pour résilier le contrat ou désigner un nouveau titulaire.","location":"/Empreinte/Funerals Contact","type":"administratif","perso":0},{"key":"bank","name":"Banque","doctype":"com.empreinte.Fcontacts","excerpt":"La banque fournit l'inventaire des biens du défunt ou bloquera les comptes en attendant la liquidation de la succession.","location":"/Empreinte/Funerals Contact","type":"administratif","perso":0},{"key":"credit","name":"Organisme de crédit","doctype":"com.empreinte.Fcontacts","excerpt":"L'organisme de crédit peut reporter ou bloquer les prélèvements jusqu'au règlement de la succession. ","location":"/Empreinte/Funerals Contact","type":"administratif","perso":0},{"key":"assurance","name":"Assurance","doctype":"com.empreinte.Fcontacts","excerpt":"Transférer ou résilier les assurances habitation, responsabilité civile et véhicule.","location":"/Empreinte/Funerals Contact","type":"administratif","perso":0},{"key":"impot","name":"Centre d'impot","doctype":"com.empreinte.Fcontacts","excerpt":"Le centre des impôts régularise la situation concernant l'impôt sur le revenu, la taxe foncière, la taxe d'habitation.","location":"/Empreinte/Funerals Contact","type":"administratif","perso":0},{"key":"energy","name":"Fournisseur d'énergie","doctype":"com.empreinte.Fcontacts","excerpt":"Pour résilier le contrat ou désigner un nouveau titulaire.","location":"/Empreinte/Funerals Contact","type":"administratif","perso":0},{"key":"water","name":"Réseau de l'eau","doctype":"com.empreinte.Fcontacts","excerpt":"Pour résilier le contrat ou désigner un nouveau titulaire.","location":"/Empreinte/Funerals Contact","type":"administratif","perso":0},{"key":"work","name":"Employeur","doctype":"com.empreinte.Fcontacts","excerpt":"Informer l'employeur du décès du salarié pour obtenir le solde de tout compte, le certificat de travail, …","location":"/Empreinte/Funerals Contact","type":"work","perso":0},{"key":"retraite","name":"Caisse de retraite","doctype":"com.empreinte.Fcontacts","excerpt":"Pour les informer du décès et interrompre les versements.","location":"/Empreinte/Funerals Contact","type":"administratif","perso":0},{"key":"caf","name":"Caisse d'allocations familiales","doctype":"com.empreinte.Fcontacts","excerpt":"Informer la caisse d'allocation familiales pour arrêter le versement des prestations sociales éventuelles.","location":"/Empreinte/Funerals Contact","type":"administratif","perso":0},{"key":"health_organism","name":"Régime Général de santé","doctype":"com.empreinte.Fcontacts","excerpt":"En prévenant l'assurance complémentaire maladie, celle-ci verse les sommes dues au jour du décès.","location":"/Empreinte/Funerals Contact","type":"administratif","perso":0},{"key":"social_security","name":"Sécurité Sociale","doctype":"com.empreinte.Fcontacts","excerpt":"C'est auprès de Sécurité Sociale que les droits à pension de veuf ou de veuve sont demandés.","location":"/Empreinte/Funerals Contact","type":"administratif","perso":0},{"key":"principal_doctor","name":"Médecin Traitant","doctype":"com.empreinte.Fcontacts","excerpt":"Quel que soit le lieu du décès, celui-ci doit être officiellement constaté par un médecin.","location":"/Empreinte/Funerals Contact","type":"administratif","perso":0}]}]

/***/ }),

/***/ "./src/public/constants/data/diagnosis.json":
/***/ (function(module, exports) {

module.exports = [{"name":"Informations principales","group":[{"name":"type","display":"Type","type":"list","values":["DPE","ERNMT","Plomb (CREP)","Amiante (DAPP)","Installation intérieur élétricité","Installation intérieur de gaz","autre"],"required":true,"question":"Quel est le type de diagnostic effectué ?"},{"name":"name","display":"Nom","question":"Quel est l'intitulé du diagnostic ?"},{"name":"date","display":"Date de réalisation","type":"date","required":true,"question":"A quelle date ?"},{"name":"expirationDate","display":"Date d'expiration","type":"date","question":"Quand expire t-il ?"},{"name":"DPEEnergyClass","display":"Étiquette énergétique DPE","depend":{"key":"type","value":"DPE"},"question":"Quelle est l'étiquette énergétique calculée durant le diagnostic ?","type":"list","values":["A","B","C","D","E","F"]},{"name":"realEnergyConsommation","display":"consommation conventionnelle kWh/m².an","type":"number","depend":{"key":"type","value":"DPE"},"question":"Quelle est la consommation conventionnelle calculée durant le diagnostic ?"},{"name":"carbonClass","display":"Étiquette carbon","depend":{"key":"type","value":"DPE"},"question":"Quelle est l'étiquette carbone calculée durant le diagnostic ?","type":"list","values":["A","B","C","D","E","F"]},{"name":"CO2emission","display":"estimation émission kg eq CO2 / m².an","type":"number","depend":{"key":"type","value":"DPE"},"question":"Quelle est l'estimation d'émission calculée durant le diagnostic ?"},{"name":"cep","display":"Coefficient Cep","type":"number","depend":{"key":"type","value":"DPE"},"question":"Quel est le coefficient CEP calculé durant le diagnostic ?"},{"name":"bbio","display":"Coefficient Bbio","type":"number","depend":{"key":"type","value":"DPE"},"question":"Quel est le coefficient BBio calculé durant le diagnostic ?"},{"name":"tic","display":"Valeur TIC","type":"number","depend":{"key":"type","value":"DPE"},"question":"Quelle est la valeur TIC calculée durant le diagnostic ? (degré celsius)"}]},{"name":"Donnée","group":[{"name":"thermalBridge","display":"Pont thermal"},{"name":"ventilation","display":"Ventilation"},{"name":"lighting","display":"Lumière"}]},{"name":"Données d'équipements","group":[{"name":"heat","display":"Chaleur"},{"name":"cold","display":"Froid"},{"name":"sanitary","display":"Sanitaire"}]}]

/***/ }),

/***/ "./src/public/constants/data/equipment.json":
/***/ (function(module, exports) {

module.exports = [{"name":"Informations principales","group":[{"name":"type","display":"Type","type":"list","values":["Ventilation naturelle","VMC","VMC Gaz","Autre système de ventilation","Eau chaude sanitaire électrique","Eau chaude sanitaire thermodynamique","Eau chaude solaire","Chaudière à gaz","Chaudière fuel","Poêle à bois","Cheminée, foyer, insert","Radiateurs électriques","Chauffage solaire","Pompe à chaleur","Climatiseur","Installation photovoltaïques","Réfrigérateur","Lave-linge","Cuisinière","Table de cuisson","Four","Lave-vaisselle","Cave à vin","Sèche-linge","Box de pilotage maison","Box internet/télévision","Autre"],"required":true,"question":"De quel type est votre équipement ?"},{"name":"name","display":"Nom","question":"Quelle est le nom de votre équipement ?"},{"name":"brand","display":"Marque","question":"Quelle est la marque de votre équipement ?"},{"name":"model","display":"Modèle","depend":"brand","question":"Quel est le modèle de votre équipement ?"},{"name":"buyDate","display":"Date d'achat","type":"date","question":"Quand avez-vous acheté cet équipement ?"},{"name":"installDate","display":"Date d'installation","type":"date","question":"Quand avez-vous installé cet équipement ?"},{"name":"guaranteeEndDate","display":"Date de fin de garantie","type":"date","question":"Quelle est la date de fin de garantie ?"},{"name":"lastMaintenanceDate","display":"Date de la dernière maintenance","type":"date","question":"Quelle est la date du dernier entretien ?"},{"name":"energyClass","display":"Classe énergetique","question":"Quelle est la classe énergétique de cet équipement ?"}]}]

/***/ }),

/***/ "./src/public/constants/data/funerals/contact.json":
/***/ (function(module, exports) {

module.exports = {"work":[{"name":"Mes contacts administratifs","excerpt":"sartek la guepe","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"job","display":"Intitulé de l'emploi","type":"info"}]]}],"work_help":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"identifiant","display":"N°d'identifiant"}],[{"name":"contract_owner","display":"Nom de la personne ayant droit"}]]}],"bank":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"account_to_delete","display":"Bloquer le compte n°"}]]}],"credit":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"credit_number","display":"N° de contrat"}]]}],"health_organism":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"health_number","display":"N° d'assuré"}]]}],"home_help":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"worker_address","display":"Adresse du salarié","type":"address"}]]}],"cpam":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"worker_address","display":"Adresse","type":"address"}],[{"name":"ss_number","display":"N° d'immatriculation"}]]}],"assurance_material":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"worker_address","display":"Adresse","type":"address"}],[{"name":"societaire_number","display":"N° sociétaire"}]]}],"assurance_person":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"worker_address","display":"Adresse","type":"address"}],[{"name":"societaire_number","display":"N° contrat"}],[{"name":"notaire_name","display":"Nom du notaire"}],[{"name":"notaire_address","display":"Adresse du notaire","type":"address"}]]}],"notaire":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"notaire_name","display":"Nom et prénom du Notaire"}],[{"name":"notaire_address","display":"Adresse","type":"address"}]]}],"retraite":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"worker_address","display":"Adresse","type":"address"}],[{"name":"subscribe_number","display":"N° d'inscription"}]]}],"bailleur":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"bailleur_name","display":"Nom du bailleur"}],[{"name":"worker_address","display":"Adresse du bailleur","type":"address"}]]}],"locataire":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"name","display":"Nom du bailleur"}],[{"name":"location_name","display":"Nom du locataire"}],[{"name":"location_address","display":"Adresse du locataire","type":"address"}],[{"name":"notaire_name","display":"Nom du notaire"}],[{"name":"notaire_address","display":"Adresse du notaire","type":"address"}]]}],"caf":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"worker_address","display":"Adresse","type":"address"}],[{"name":"allocation_number","display":"N° d'allocataire"}]]}],"organism_payer":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"contract_number","display":"N° du contrat"}]]}],"impot":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"address","display":"Adresse","type":"address"}]]}],"default":[{"name":"Mes contacts administratifs","excerpt":"","import":true,"group":[[{"name":"type","hide":true,"display":"Type"}],[{"name":"organism","display":"Organisme"}],[{"name":"interlocuteur","display":"Interlocuteur","type":"interlocuteur"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"telephone","type":"telephone","display":"Numéro de  téléphone"},{"name":"telecopie","display":"Numéro de  télécopie"},{"name":"email","display":"EMAIL","type":"email"}]]}]}

/***/ }),

/***/ "./src/public/constants/data/funerals/last_will.json":
/***/ (function(module, exports) {

module.exports = [{"name":"Mes dernieres Volontés","excerpt":"Les dernières volontés peuvent être des souhaits précis sur la manière dont seront organisées les obsèques.\n Ou uniquement des grandes lignes (cérémonie et sépulture) pour laisser aux proches le soin de l'organisation des obsèques.","description":" ","group":[[{"name":"conservation","display":"Les Soins de Conservation","type":"textarea"}],[{"name":"cercueil","display":"Les choix du cerceuil et de ses accessoires","type":"textarea"}],[{"name":"presentation","display":"La présentation du corps","type":"textarea"}],[{"name":"organisation","display":"L’Organisation des funérailles","type":"textarea"}],[{"name":"ceremonial","display":"Cérémonial","type":"textarea"}],[{"name":"incineration","display":"Crémation ou Inhumation","type":"textarea"},{"name":"ifIncineration","display":"Quel devenir pour les cendres ?","type":"textarea"}],[{"name":"wish","display":"Souhaits Particuliers","type":"textarea"}]]}]

/***/ }),

/***/ "./src/public/constants/data/home.json":
/***/ (function(module, exports) {

module.exports = [{"name":"Fiche Info","excerpt":"Cette fiche contact permet d'identifier la personne détentrice de l'espace privé. ","group":[[{"name":"civilite","display":"Civilité","type":"list","values":["Madame","Monsieur","Autre"]},{"name":"name","display":"Nom"},{"name":"firstname","display":"Prénom"}],[{"name":"birthdate","type":"birthdate","display":"Date de naissance"}],[{"name":"address","display":"Adresse","type":"address"}],[{"name":"telephone","type":"telephone","display":"Numéro de  téléphone"},{"name":"email","display":"EMAIL","type":"email"}]]}]

/***/ }),

/***/ "./src/public/constants/data/shareHome.json":
/***/ (function(module, exports) {

module.exports = {"principal_doctor":{"slug":"principal_doctor","chrono":"IMMÉDIATEMENT","title":"Médecin traitant","content":"Il est la première personne à prévenir en cas de décès à domicile. Si la mort survient à l'hôpital, les services se chargeront de la démarche. Le médecin constate la mort et produit le certificat indispensable à l’établissement de l'acte de décès.","id":"Médecin Traitant"},"city_hall":{"slug":"city_hall","chrono":"DANS LES 24 HEURES","title":"Mairie","content":"Prévenir la mairie sera l'une des toutes premières démarches à effectuer, dans les 24 heures après le constat de décès. C'est l'administration qui établira l'acte de décès. Ses copies seront souvent demandées par la suite.","id":"Mairie"},"work_help":{"slug":"work_help","chrono":"DANS LES 48 HEURES","title":"Pôle Emploi","content":"Pour interrompre le versement des allocations chômages, l'établissement administratif Pôle emploi doit être prévenu du décès de la personne par simple courrier. La démarche peut également donner lieu au versement d'une allocation décès pour le conjoint.","id":"Pôle Emploi"},"work":{"slug":"work","chrono":"DANS LES 48 HEURES","title":"Employeur","content":"Déjà, il semble humainement élémentaire de devoir prévenir l'employeur de la personne qui décède. Il sera ensuite tenu de verser les sommes dues pour les heures travaillées, l'épargne salariale... Dans certains cas, un organisme de prévoyance rattaché à la société ouvrira des droits aux ayants droits du défunt.","id":"Employeur"},"banque":{"slug":"banque","chrono":"DANS LA SEMAINE","title":"Banque","content":"L'une des premières démarches d'ordre administratif à effectuer est de transmettre un acte de décès à la banque du défunt. L'établissement est dans l'obligation de bloquer le compte à la date du décès, d'annuler les procurations, de récupérer les moyens de paiements. Les sommes d'argent seront rendues disponibles après le règlement de la succession.","id":"Banque"},"credit":{"slug":"credit","chrono":"DANS LA SEMAINE","title":"Organisme de crédit","content":"En cas de crédit en cours de remboursement, l'organisme prêteur doit être prévenu du décès. L'assurance éventuellement souscrite pourra alors acquitter les sommes restantes dues. Sinon, ce sont les avoirs du défunt qui servent à solder les dettes en cours.","id":"Organisme de crédit et assurance-vie"},"health_organism":{"slug":"health_organism","chrono":"DANS LA SEMAINE","title":"Mutuelle de santé complémentaire","content":"Il s’agit des complémentaires santé. Ces organismes peuvent verser un capital décès aux conjoint, enfants ou ascendants.","id":"Organisme de santé complémentaire"},"home_help":{"slug":"home_help","chrono":"DANS LES 7 JOURS","title":"Salarié ou association de service à domicile","content":"Si vous ou votre proche employait une aide à domicile selon un contrat CESU (Chèque emploi service universel), le décès entraîne la fin automatique du contrat de travail. Il sera toutefois nécessaire de lui adresser une lettre de licenciement.","id":"Salarié ou association de service à domicile"},"cpam":{"slug":"cpam","chrono":"immédiatement","title":"Régime Général de santé","content":"Comme tous les autres organismes, la Sécurité sociale doit être prévenu dans de courts délais après un décès. La démarche, assortie de la production de l’acte de décès, déclenchera une série d’ajustements administratifs et l’éventuel versement de droits.","id":"Organisme de santé général"},"assurance":{"slug":"assurance","chrono":"DANS LE MOIS","title":"Assurances","content":"Prévenir la mutuelle d'assurance est l'une des actions prioritaires à effectuer. La mise à jour du dossier stoppe le versement des cotisations et peut donner droit à des allocations ou même faire bénéficier du tiers payant obsèques dans certains cas.","id":"Assurance"},"notaire":{"slug":"notaire","chrono":"DANS LE MOIS","title":"Notaire","content":"Il est un intervenant clé dans le règlement de la succession du défunt. Ici, la fiche contact du notaire à qui le testament a été confié ou celui qui connait la situation familiale et patrimoniale, sera d'une grande utilité pour la suite.","id":"Notaire"},"retraite":{"slug":"retraite","chrono":"DANS LE MOIS","title":"Caisse de retraite","content":"Le conjoint ou ex-conjoint peut bénéficier du versement d'une pension de réversion versée par la caisse de retraite. L'organisme, dont les coordonnées auront été renseignées dans l'Espace privé, pourra initier les règlements (souvent trimestriels) dans les délais d'autant plus raisonnables qu'il sera prévenu tôt.","id":"Caisse de retraite"},"bailleur":{"slug":"bailleur","chrono":"DANS LE MOIS","title":"Bailleur ou syndic si co-propriété","content":"Il est un intervenant clé dans le règlement de la succession du défunt. Ici, la fiche contact du notaire à qui le testament a été confié ou celui qui connait la situation familiale et patrimoniale, sera d'une grande utilité pour la suite.","id":"Bailleur ou syndic si co-propriété"},"caf":{"slug":"caf","chrono":"DANS LE MOIS","title":"Caisse d’allocations familiales","content":"La CAF dispose de lettres types qui servent à prévenir l’organisme du décès d’un proche. Ici, vous pourrez renseigner l’adresse de la caisse dont vous dépendez et votre numéro d’allocataire. La démarche peut donner lieu à l’ouverture de droits. Un certificat de décès sera également nécessaire.","id":"Caisse d’allocations familiales"},"prefecture":{"slug":"prefecture","chrono":"DANS LE MOIS","title":"Préfecture ou sous-préfecture","content":"Les coordonnées de la Préfecture dont vous dépendez seront utiles pour effectuer des démarches relatives à l'automobile notamment : changer de nom sur la carte grise suite à une succession par exemple.","id":"Préfecture"},"social_security":{"slug":"social_security","chrono":"DANS LE MOIS","title":"Conseil général","content":"Des prestations sociales comme l’allocation personnalisée d’autonomie seront interrompues.","id":"Conseil général"},"poste":{"slug":"poste","chrono":"DANS LE MOIS","title":"Poste","content":"Le service de distribution du courrier a lui-même une adresse postale. Le cas échéant, en cas de changement d'adresse, il faudra le prévenir de la nécessité de faire suivre le courrier.","id":"id"},"energy":{"slug":"energy","chrono":"DANS LE MOIS","title":"Fournisseur d’énergie","content":"Les contrats qui vous lient aux fournisseurs d'énergie doivent être résiliés ou mis à jour s'ils étaient établis au nom du défunt.","id":"id"},"water":{"slug":"water","chrono":"DANS LE MOIS","title":"Régie de l’eau","content":"Comme tous les fournisseurs d'énergie à votre domicile, les services des eaux ont conclu un contrat avec le propriétaire. Si vous l'êtes, les proches devront signaler votre décès pour résilier l'acte ou le mettre à jour.","id":"id"},"telecom":{"slug":"telecom","chrono":"DANS LE MOIS","title":"Opérateur Télécom","content":"Il faut prévenir l'opérateur qui détient les contrats téléphonique, internet, télévision... afin de les résilier ou les transférer sur un nouveau titulaire.","id":"id"},"impot":{"slug":"impot","chrono":"DANS LES 6 MOIS","title":"Centre d’Impôts","content":"Quand la succession sera réglée, l'administration fiscale devra être prévenue pour prendre en compte les nouvelles situations financières. L’aide d’un notaire pour bien comprendre et suivre les événements s’avère souvent nécessaire.","id":"Centre d'impot"}}

/***/ }),

/***/ "./src/public/constants/filetypes.json":
/***/ (function(module, exports) {

module.exports = [{"name":"Données contractuelles de propriétés","location":"/Documents de propriété","types":[{"key":"deed_of_superficies","name":"Acte de propriété"},{"key":"plans","name":"Plans"},{"key":"home_picture","name":"Photos du bien"},{"key":"5","name":"Justificatif sur l'état de l'installation ou du raccord au réseau d'assainissement","perso":true},{"key":"sales_agreement","name":"Compromis de vente","perso":true}]},{"name":"Equipements","location":"/Équipements","types":[{"key":"equipments_notice","name":"Notice d’utilisation des équipements"},{"key":"equipment_invoice","name":"Devis, facture d'équipement"}]},{"name":"Travaux","location":"/Travaux","types":[{"key":"works_invoice","name":"Devis, facture, éléments d’une opération de travaux"}]},{"name":"Entretien","location":"/Entretiens","types":[{"key":"maintenance_contract","name":"Contrat d'entretien"}]},{"name":"Données logements privées","location":"/Usages","perso":true,"types":[{"key":"supplies_contract","name":"Contrat de fourniture énergies"},{"key":"water_contract","name":"Contrat d'eau"},{"key":"telecom_contract","name":"Contrat télécom"},{"key":"house_insurance","name":"Assurance habitation"},{"key":"rent_receipt","name":"Quittance de loyer"},{"key":"TV_invoice","name":"Facture TV"},{"key":"box_invoice","name":"Facture box"},{"key":"internet_invoice","name":"Facture internet"},{"key":"phone_invoice","name":"Facture téléphone fixe"},{"key":"mobile_phone_invoice","name":"Facture téléphone portable"},{"key":"gas_invoice","name":"Facture gaz"},{"key":"electricity_invoice","name":"Facture électricité"},{"key":"water_invoice","name":"Facture eau"},{"key":"status_report","name":"Etat des lieux"},{"key":"home_insurance","name":"Contrat / attestation assurance habitation"},{"key":"car_insurance","name":"Contrat / attestation assurance voiture"},{"key":"identity_card","name":"Carte d’identité"},{"key":"bank_details","name":"RIB"},{"key":"estimate","name":"Devis"},{"key":"lease_agreement","name":"Contrat de bail"},{"key":"tax_notice","name":"Avis d’imposition"},{"key":"identity_document","name":"Document d’identité"},{"key":"pay_slip","name":"Bulletin de salaire"},{"key":"property_tax","name":"Taxe foncière"},{"key":"housing_tax","name":"Taxe d’habitation"},{"key":"family_record_book","name":"Livret de famille"},{"key":"marriage_certificate","name":"Acte de mariage ou de Pacs (Pacte civil de solidarité)"},{"key":"maintemance_invoice","name":"Factures entretien / réparation"},{"key":"accident_picture","name":"Photos sinistre"}]},{"name":"Diagnostics","location":"/Diagnostics","types":[{"key":"energetics_diagnosis","name":"Diagnostic de Performance Energétique"},{"key":"ernmt_diagnosis","name":"État des Risques Naturels, Miniers et Technologiques (ERNMT)"},{"key":"lead_diagnosis","name":"Plomb (CREP)"},{"key":"asbestos_diagnosis","name":"Amiante (DAPP)"},{"key":"electricity_diagnosis","name":"Diagnostic Electricité"},{"key":"gas_diagnosis","name":"Diagnostic Gaz"}]},{"name":"Copropriété","location":"/Documents de propriété","types":[{"key":"condominium_regulation","name":"Règlement de copropriété"},{"key":"1","name":"Procès-verbaux des 3 dernières AG"},{"key":"2","name":"Fiche synthétique de copropriété"},{"key":"3","name":"Carnet d’entretien de la copropriété"},{"key":"4","name":"Impayés de charges au sein du syndicat et dettes"}]}]

/***/ }),

/***/ "./src/public/constants/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var VERSION = exports.VERSION = '1.0.172';

var DOCTYPE_EQUIPMENTS = exports.DOCTYPE_EQUIPMENTS = 'com.empreinte.equipment';
var DOCTYPE_WORKS = exports.DOCTYPE_WORKS = 'com.empreinte.work';
var DOCTYPE_MAINTENANCES = exports.DOCTYPE_MAINTENANCES = 'com.empreinte.maintenance';
var DOCTYPE_DIAGNOSIS = exports.DOCTYPE_DIAGNOSIS = 'com.empreinte.diagnosis';
var DOCTYPE_HOMEDATA = exports.DOCTYPE_HOMEDATA = 'com.empreinte.homeData';
var DOCTYPE_F_LASTWILL = exports.DOCTYPE_F_LASTWILL = 'com.empreinte.FLastWill';
var DOCTYPE_F_CONTACTS = exports.DOCTYPE_F_CONTACTS = 'io.cozy.contacts';
var DOCTYPE_F_CUSTOMCONTACTS = exports.DOCTYPE_F_CUSTOMCONTACTS = 'com.empreinte.Fcustomcontacts';

var DOCTYPE_CONTACTS = exports.DOCTYPE_CONTACTS = 'com.empreinte.contacts';
var DOCTYPE_RECALLS = exports.DOCTYPE_RECALLS = 'com.empreinte.recalls';
var DOCTYPE_META = exports.DOCTYPE_META = 'com.empreinte.meta';
var DOCTYPE_NEWS = exports.DOCTYPE_NEWS = 'com.empreinte.news';
var DOCTYPE_DPE = exports.DOCTYPE_DPE = 'com.empreinte.dpe';

var COZY_ROOT_ID = exports.COZY_ROOT_ID = "io.cozy.files.root-dir";
var ROOT_PATH = exports.ROOT_PATH = "/Empreinte";
var ROOT_NAME = exports.ROOT_NAME = "/Documents";
var DATA_PATH = exports.DATA_PATH = "/data";

var DATA_LIST = exports.DATA_LIST = [{
    name: 'Mes Dernières Volontés',
    singleName: 'Volontés',
    addButton: 'Compléter',
    path: ROOT_PATH + '/Funerals',
    doctype: DOCTYPE_F_LASTWILL,
    slug: 'lastwill'
}, {
    name: 'Mes contacts administratifs',
    singleName: 'funeralsContact',
    addButton: 'Compléter',
    path: ROOT_PATH + '/Funerals',
    doctype: DOCTYPE_F_CONTACTS,
    slug: 'fcontacts'
}, {
    name: 'Mes contacts administratifs',
    singleName: 'funeralsCustomContact',
    addButton: 'Compléter',
    path: ROOT_PATH + '/Funerals',
    doctype: DOCTYPE_F_CUSTOMCONTACTS,
    slug: 'fcustomcontacts'
}, {
    name: 'Diagnostics',
    singleName: 'Diagnostic',
    addButton: 'Ajouter un diagnostic',
    path: ROOT_PATH + '/Diagnostics',
    doctype: DOCTYPE_DIAGNOSIS,
    slug: 'diagnosis'
}, {
    name: 'Données principales',
    singleName: 'Donnée principales',
    addButton: 'Compléter',
    path: ROOT_PATH + '/Documents principales',
    doctype: DOCTYPE_HOMEDATA,
    slug: 'homedata'
}, {
    name: 'Équipements',
    singleName: 'Équipement',
    addButton: 'Ajouter un Équipement',
    path: ROOT_PATH + '/Équipements',
    doctype: DOCTYPE_EQUIPMENTS,
    slug: 'equipments'
}, {
    name: 'Travaux',
    singleName: 'Travaux',
    addButton: 'Ajouter des travaux',
    path: ROOT_PATH + '/Travaux',
    doctype: DOCTYPE_WORKS,
    slug: 'works'
}, {
    name: 'Entretien',
    singleName: 'Entretien',
    addButton: 'Ajouter des entretiens',
    path: ROOT_PATH + '/Entretiens',
    doctype: DOCTYPE_MAINTENANCES,
    slug: 'maintenances'
}, {
    name: 'DPE',
    singleName: 'DPE',
    addButton: 'Calculer son DPE',
    path: ROOT_PATH + '/Diagnostics',
    doctype: DOCTYPE_DPE,
    slug: 'dpe'
}];

var FOLDER_LIST = exports.FOLDER_LIST = [ROOT_PATH + '/Mes Obsèques'];

var STATUS_DONE = exports.STATUS_DONE = 'loaded';
var STATUS_LOAD = exports.STATUS_LOAD = 'pending';
var STATUS_ERROR = exports.STATUS_ERROR = 'failed';

var VIEW_LIST = exports.VIEW_LIST = "VIEW_LIST";
var VIEW_GRID = exports.VIEW_GRID = "VIEW_GRID";

var VIEW_FILE = exports.VIEW_FILE = "VIEW_FILE";
var VIEW_DIR = exports.VIEW_DIR = "VIEW_DIR";

var SORT_NAME = exports.SORT_NAME = "SORT_NAME";
var SORT_DATE = exports.SORT_DATE = "SORT_DATE";

var TYPE_FOLDER = exports.TYPE_FOLDER = "TYPE_FOLDER";
var TYPE_FILE = exports.TYPE_FILE = "TYPE_FILE";

var ALERT_LEVEL_INFO = exports.ALERT_LEVEL_INFO = 'alert_info';
var ALERT_LEVEL_ERROR = exports.ALERT_LEVEL_ERROR = 'alert_error';

var MAX_FILE_SIZE = exports.MAX_FILE_SIZE = 20 * 1024 * 1024; //20Mo

/***/ }),

/***/ "./src/public/containers/DataForm.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/public/actions/index.js");

var _DataForm = __webpack_require__("./src/public/components/elements/DataForm.jsx");

var _DataForm2 = _interopRequireDefault(_DataForm);

var _data = __webpack_require__("./src/public/actions/data.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        onNewData: function onNewData(doctype, data) {
            return dispatch((0, _actions.dataNew)(doctype, data));
        },
        onSaveData: function onSaveData(doctype, id, data) {
            return dispatch((0, _data.dataSave)(doctype, id, data));
        }
    };
};

var ConnectedDataForm = (0, _reactRedux.connect)(null, mapDispatchToProps)(_DataForm2.default);

exports.default = ConnectedDataForm;

/***/ }),

/***/ "./src/public/containers/Home.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/public/actions/index.js");

var _Home = __webpack_require__("./src/public/components/elements/Home.js");

var _Home2 = _interopRequireDefault(_Home);

var _fileTypes = __webpack_require__("./src/public/scripts/fileTypes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
  return {
    usedType: state.gauge.usedTypes,
    dataCreated: state.gauge.dataCreated,
    status: state.gauge.status
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onFileClick: function onFileClick(path, type) {
      dispatch((0, _actions.importerClick)(path, type));
    }
  };
};

var ConnectedHome = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_Home2.default);

exports.default = ConnectedHome;

/***/ }),

/***/ "./src/public/containers/Importer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactRedux = __webpack_require__("./node_modules/react-redux/es/index.js");

var _actions = __webpack_require__("./src/public/actions/index.js");

var _ImporterModal = __webpack_require__("./src/public/components/modals/ImporterModal.jsx");

var _ImporterModal2 = _interopRequireDefault(_ImporterModal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapStateToProps = function mapStateToProps(state) {
    return {
        currentType: state.importer.currentType,
        currentPath: state.importer.currentPath,
        documentsTree: state.importer.documentsTree,
        view: state.importer.view
    };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        onDirectoryChange: function onDirectoryChange(path) {
            dispatch((0, _actions.importerDirectoryChange)(path));
        },
        onImport: function onImport(docs, dirId) {
            return dispatch((0, _actions.importerFilesUpload)(docs, dirId));
        },
        onTree: function onTree() {
            dispatch((0, _actions.importerTree)());
        },
        onChangeView: function onChangeView(view) {
            dispatch((0, _actions.importerViewChange)(view));
        }
    };
};

var ConnectedImporter = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_ImporterModal2.default);

exports.default = ConnectedImporter;

/***/ }),

/***/ "./src/public/fonts/Arvo-Regular.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Arvo-Regular-31c017.ttf";

/***/ }),

/***/ "./src/public/fonts/Roboto-Bold.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-Bold-ee7b96.ttf";

/***/ }),

/***/ "./src/public/fonts/Roboto-BoldItalic.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-BoldItalic-1eb7a8.ttf";

/***/ }),

/***/ "./src/public/fonts/Roboto-Italic.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-Italic-42bbe4.ttf";

/***/ }),

/***/ "./src/public/fonts/Roboto-Light.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-Light-fc84e9.ttf";

/***/ }),

/***/ "./src/public/fonts/Roboto-LightItalic.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-LightItalic-d1efcd.ttf";

/***/ }),

/***/ "./src/public/fonts/Roboto-Regular.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-Regular-3e1af3.ttf";

/***/ }),

/***/ "./src/public/fonts/Roboto-Thin.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-Thin-89e266.ttf";

/***/ }),

/***/ "./src/public/fonts/Roboto-ThinItalic.ttf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/Roboto-ThinItalic-0fc253.ttf";

/***/ }),

/***/ "./src/public/scripts/dataFields.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInfosFromDoctype = exports.getInfosFromSlug = exports.getInfosFromPath = exports.getFields = exports.getEquipmentFields = exports.getHomeFields = exports.getDiagnosisFields = exports.getContactFields = undefined;

var _contact = __webpack_require__("./src/public/constants/data/contact.json");

var _contact2 = _interopRequireDefault(_contact);

var _diagnosis = __webpack_require__("./src/public/constants/data/diagnosis.json");

var _diagnosis2 = _interopRequireDefault(_diagnosis);

var _home = __webpack_require__("./src/public/constants/data/home.json");

var _home2 = _interopRequireDefault(_home);

var _equipment = __webpack_require__("./src/public/constants/data/equipment.json");

var _equipment2 = _interopRequireDefault(_equipment);

var _contact3 = __webpack_require__("./src/public/constants/data/funerals/contact.json");

var _contact4 = _interopRequireDefault(_contact3);

var _constants = __webpack_require__("./src/public/constants/index.js");

var _index = __webpack_require__("./src/public/constants/index.js");

var _last_will = __webpack_require__("./src/public/constants/data/funerals/last_will.json");

var _last_will2 = _interopRequireDefault(_last_will);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getContactFields = exports.getContactFields = function getContactFields() {
  return _contact2.default;
};

var getDiagnosisFields = exports.getDiagnosisFields = function getDiagnosisFields() {
  return _diagnosis2.default;
};

var getHomeFields = exports.getHomeFields = function getHomeFields() {
  return _home2.default;
};

var getEquipmentFields = exports.getEquipmentFields = function getEquipmentFields() {
  return _equipment2.default;
};

var getFields = exports.getFields = function getFields(doctype) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "default";

  switch (doctype) {
    case _constants.DOCTYPE_DIAGNOSIS:
      return _diagnosis2.default;
    case _constants.DOCTYPE_EQUIPMENTS:
      return _equipment2.default;
    case _constants.DOCTYPE_HOMEDATA:
      return _home2.default;
    case _index.DOCTYPE_F_LASTWILL:
      return _last_will2.default;
    case _index.DOCTYPE_F_CONTACTS:
    case _constants.DOCTYPE_F_CUSTOMCONTACTS:
      switch (type) {
        case "work":
          return _contact4.default.work;
        case "work_help":
          return _contact4.default.work_help;
        case "bank":
          return _contact4.default.bank;
        case "credit":
          return _contact4.default.credit;
        case "health_organism":
          return _contact4.default.health_organism;
        case "home_help":
          return _contact4.default.home_help;
        case "cpam":
          return _contact4.default.cpam;
        case "assurance_material":
          return _contact4.default.assurance_material;
        case "assurance_person":
          return _contact4.default.assurance_person;
        case "notaire":
          return _contact4.default.notaire;
        case "retraite":
          return _contact4.default.retraite;
        case "bailleur":
          return _contact4.default.bailleur;
        case "locataire":
          return _contact4.default.locataire;
        case "caf":
          return _contact4.default.caf;
        case "organism_payer":
          return _contact4.default.organism_payer;
        case "impot":
          return _contact4.default.impot;
        default:
          return _contact4.default.default;
      }
  }
};

var getInfosFromPath = exports.getInfosFromPath = function getInfosFromPath(path) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _constants.DATA_LIST[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var data = _step.value;

      if (data.path === path) return data;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

var getInfosFromSlug = exports.getInfosFromSlug = function getInfosFromSlug(slug) {
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _constants.DATA_LIST[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var data = _step2.value;

      if (data.slug === slug) return data;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
};

var getInfosFromDoctype = exports.getInfosFromDoctype = function getInfosFromDoctype(doctype) {
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = _constants.DATA_LIST[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var data = _step3.value;

      if (data.doctype === doctype) return data;
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
};

/***/ }),

/***/ "./src/public/scripts/fileTypes.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getDisplayName = exports.getTypesByGroup = exports.getFileTypes = undefined;

var _filetypes = __webpack_require__("./src/public/constants/filetypes.json");

var _filetypes2 = _interopRequireDefault(_filetypes);

var _constants = __webpack_require__("./src/public/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getFileTypes = exports.getFileTypes = function getFileTypes() {

    var ret = [];

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = _filetypes2.default[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var elem = _step.value;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = elem.types[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var type = _step2.value;

                    type.location = _constants.ROOT_PATH + elem.location;
                    type.perso = type.perso || elem.perso | false;
                    ret.push(type);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    var types = ret;
    return types;
};

var getTypesByGroup = exports.getTypesByGroup = function getTypesByGroup() {

    return _filetypes2.default;
};

var getDisplayName = exports.getDisplayName = function getDisplayName(slug) {
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {

        for (var _iterator3 = _filetypes2.default[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var elem = _step3.value;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = elem.types[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var type = _step4.value;

                    if (type.key === slug) {
                        return type.name;
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }
};

/***/ }),

/***/ "./src/public/scripts/onboarding.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.markAsShown = exports.isAlreadyShown = exports.getCustomContactMeta = exports.getContactMeta = exports.getMeta = undefined;

var _constants = __webpack_require__("./src/public/constants/index.js");

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var typeContact = {
  "name": "Mes contacts administratifs",
  "location": "/Contacts Administratifs",
  "types": [{
    "key": "city_hall",
    "name": "Mairie",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "C'est l'administration du lieu du décès qui établit l'acte de décès. Par précaution, le titulaire peut remplir le formulaire avec les coordonnées de sa commune de résidence ",
    "location": "/Empreinte/Funerals Contact",
    "type": "administratif",
    "perso": 0
  }, {
    "key": "home_help",
    "name": "Salarié ou association de service à domicile",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Si vous ou votre proche employait une aide à domicile selon un contrat CESU), le décès entraîne la fin automatique du contrat de travail. Il sera toutefois nécessaire de lui adresser une lettre de licenciement.",
    "location": "/Empreinte/Funerals Contact",
    "type": "administratif",
    "perso": 0
  }, {
    "key": "work_help",
    "name": "Pôle Emploi",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Prévenir l’établissement public, pour interrompre le versement des allocations chômages et déclencher le versement d'éventuelles allocations décès pour le conjoint.",
    "location": "/Empreinte/Funerals Contact",
    "type": "work_help",
    "perso": 0
  }, {
    "key": "notaire",
    "name": "Notaire",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Il est un intervenant clé dans le règlement de la succession. Ici, la fiche contact du notaire à qui le testament a été confié ou celui qui connait la situation familiale et patrimoniale, sera d'une grande utilité pour la suite.",
    "location": "/Empreinte/Funerals Contact",
    "type": "notaire",
    "perso": 0
  }, {
    "key": "bailleur",
    "name": "Bailleur ou syndic si co-propriété",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Vous êtes locataire de votre logement ou alors vous avez-vous mêmes des locataires, ou encore membre d'un syndic de copropriété ? Le décès les concerne pleinement, des démarches seront à effectuer auprès d’eux.",
    "location": "/Empreinte/Funerals Contact",
    "type": "bailleur",
    "perso": 0
  }, {
    "key": "prefecture",
    "name": "Préfecture ou Sous-Préfecture",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Les coordonnées de la Préfecture dont vous dépendez seront utiles pour effectuer des démarches relatives à l'automobile notamment : changer de nom sur la carte grise suite à une succession par exemple.",
    "location": "/Empreinte/Funerals Contact",
    "type": "administratif",
    "perso": 0
  }, {
    "key": "poste",
    "name": "Poste",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Le service de distribution du courrier a lui-même une adresse postale. Le cas échéant, en cas de changement d'adresse, il faudra le prévenir de la nécessité de faire suivre le courrier.",
    "location": "/Empreinte/Funerals Contact",
    "type": "administratif",
    "perso": 0
  }, {
    "key": "telecom",
    "name": "Opérateur Télécom",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Il faut prévenir l'opérateur qui détient les contrats téléphonique, internet, télévision... afin de les résilier ou les transférer sur un nouveau titulaire. ",
    "location": "/Empreinte/Funerals Contact",
    "type": "administratif",
    "perso": 0
  }, {
    "key": "bank",
    "name": "Banque",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "L'établissement est dans l'obligation de bloquer le compte à la date du décès, d'annuler les procurations, de récupérer les moyens de paiements. Les sommes d'argent seront rendues disponibles après le règlement de la succession.",
    "location": "/Empreinte/Funerals Contact",
    "type": "bank",
    "perso": 0
  }, {
    "key": "credit",
    "name": "Organisme de crédit et assurance-vie",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "En cas de crédit en cours, l'organisme prêteur doit être prévenu du décès. L'assurance pourra acquitter les sommes restantes dues. Sinon, ce sont vos avoirs qui serviront à solder les dettes. ",
    "location": "/Empreinte/Funerals Contact",
    "type": "credit",
    "perso": 0
  }, {
    "key": "cpam",
    "name": "Organisme de santé général",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Salarié, chômeur ou retraité, la Caisse Primaire d’Assurance Maladie, pourra verser un capital décès à votre conjoint, vos enfants ou ascendants.",
    "location": "/Empreinte/Funerals Contact",
    "type": "cpam",
    "perso": 0
  }, {
    "key": "assurance",
    "name": "Assurance",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "La mise à jour du dossier stoppe le versement des cotisations et peut donner droit à des allocations ou même faire bénéficier du tiers payant obsèques dans certains cas.",
    "location": "/Empreinte/Funerals Contact",
    "type": "administratif",
    "perso": 0
  }, {
    "key": "impot",
    "name": "Centre d'impot",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Les contrats qui vous lient aux fournisseurs d'énergie devront être résiliés ou mis à jour s'ils étaient établis à votre nom.",
    "location": "/Empreinte/Funerals Contact",
    "type": "impot",
    "perso": 0
  }, {
    "key": "energy",
    "name": "Fournisseur d'énergie",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Pour résilier le contrat ou désigner un nouveau titulaire.",
    "location": "/Empreinte/Funerals Contact",
    "type": "administratif",
    "perso": 0
  }, {
    "key": "water",
    "name": "Régie de l'eau",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Comme tous les fournisseurs d'énergie, les services des eaux ont conclu un contrat avec le propriétaire. Si vous l'êtes, les proches devront signaler votre décès pour résilier l'acte ou le mettre à jour.",
    "location": "/Empreinte/Funerals Contact",
    "type": "administratif",
    "perso": 0
  }, {
    "key": "work",
    "name": "Employeur",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Déjà, il semble humainement élémentaire de prévenir votre employeur. Il sera ensuite tenu de verser les sommes dues pour les heures travaillées, l'épargne salariale... Dans certains cas, un organisme de prévoyance rattaché à la société ouvrira des droits à vos ayants droits.",
    "location": "/Empreinte/Funerals Contact",
    "type": "work",
    "perso": 0
  }, {
    "key": "retraite",
    "name": "Caisse de retraite",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Le conjoint ou ex-conjoint peut bénéficier du versement d'une pension de réversion versée par la caisse de retraite. L'organisme pourra initier les règlements dans les délais d'autant plus raisonnables qu'il sera prévenu tôt.",
    "location": "/Empreinte/Funerals Contact",
    "type": "retraite",
    "perso": 0
  }, {
    "key": "caf",
    "name": "Caisse d'allocations familiales",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Ici, vous pourrez renseigner l’adresse de la caisse dont vous dépendez et votre numéro d’allocataire. La démarche peut donner lieu à l’ouverture de droits. Un certificat de décès sera également nécessaire.",
    "location": "/Empreinte/Funerals Contact",
    "type": "caf",
    "perso": 0
  }, {
    "key": "health_organism",
    "name": "Organisme de santé complémentaire",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "En prévenant l'assurance complémentaire maladie, celle-ci verse les sommes dues au jour du décès.",
    "location": "/Empreinte/Funerals Contact",
    "type": "health_organism",
    "perso": 0
  }, {
    "key": "social_security",
    "name": "Conseil Général",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "L’organisme doit être prévenu dans de courts délais. La démarche déclenchera une série d’ajustements administratifs et l’éventuel versement de droits.",
    "location": "/Empreinte/Funerals Contact",
    "type": "administratif",
    "perso": 0
  }, {
    "key": "principal_doctor",
    "name": "Médecin Traitant",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Le médecin constate la mort et produit le certificat indispensable à l’établissement de l'acte de décès.",
    "location": "/Empreinte/Funerals Contact",
    "type": "administratif",
    "perso": 0
  }]
};

var getMeta = exports.getMeta = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var indexRef, result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return cozy.client.data.defineIndex(_constants.DOCTYPE_META, ['name']);

          case 3:
            indexRef = _context.sent;
            _context.next = 6;
            return cozy.client.data.query(indexRef, {
              selector: {
                "name": "onboarding"
              }
            });

          case 6:
            result = _context.sent;
            return _context.abrupt("return", result);

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](0);
            return _context.abrupt("return", []);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 10]]);
  }));

  return function getMeta() {
    return _ref.apply(this, arguments);
  };
}();

var getContactMeta = exports.getContactMeta = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var indexRef, result;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return cozy.client.data.defineIndex(_constants.DOCTYPE_META, ['name']);

          case 3:
            indexRef = _context2.sent;
            _context2.next = 6;
            return cozy.client.data.query(indexRef, {
              selector: {
                "name": "contactType"
              }
            });

          case 6:
            result = _context2.sent;
            return _context2.abrupt("return", result);

          case 10:
            _context2.prev = 10;
            _context2.t0 = _context2["catch"](0);
            return _context2.abrupt("return", []);

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[0, 10]]);
  }));

  return function getContactMeta() {
    return _ref2.apply(this, arguments);
  };
}();

var getCustomContactMeta = exports.getCustomContactMeta = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    var indexRef, result;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            _context3.next = 3;
            return cozy.client.data.defineIndex(_constants.DOCTYPE_META, ['name']);

          case 3:
            indexRef = _context3.sent;
            _context3.next = 6;
            return cozy.client.data.query(indexRef, {
              selector: {
                "name": "customContactType"
              }
            });

          case 6:
            result = _context3.sent;
            return _context3.abrupt("return", result);

          case 10:
            _context3.prev = 10;
            _context3.t0 = _context3["catch"](0);
            return _context3.abrupt("return", []);

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, undefined, [[0, 10]]);
  }));

  return function getCustomContactMeta() {
    return _ref3.apply(this, arguments);
  };
}();

var isAlreadyShown = exports.isAlreadyShown = function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
    var res, contacts, customContacts, value, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, e;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return getMeta();

          case 2:
            res = _context4.sent;
            _context4.next = 5;
            return getContactMeta();

          case 5:
            contacts = _context4.sent;
            _context4.next = 8;
            return getCustomContactMeta();

          case 8:
            customContacts = _context4.sent;

            if (!(contacts.length > 0)) {
              _context4.next = 14;
              break;
            }

            _context4.next = 12;
            return cozy.client.data.delete(_constants.DOCTYPE_META, contacts[0]);

          case 12:
            _context4.next = 14;
            return cozy.client.data.create(_constants.DOCTYPE_META, { name: "contactType", value: [typeContact] });

          case 14:
            console.log(customContacts);

            if (!(customContacts.length === 0)) {
              _context4.next = 18;
              break;
            }

            _context4.next = 18;
            return cozy.client.data.create(_constants.DOCTYPE_META, { name: "customContactType", value: [{
                "name": "Mes contacts custom",
                "location": "/Contacts custom",
                "types": []
              }] });

          case 18:
            if (!(res.length === 0)) {
              _context4.next = 22;
              break;
            }

            return _context4.abrupt("return", false);

          case 22:
            if (!(res.length === 1)) {
              _context4.next = 26;
              break;
            }

            return _context4.abrupt("return", res[0].value);

          case 26:
            value = res.shift();
            //remove all others info

            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context4.prev = 30;
            _iterator = res[Symbol.iterator]();

          case 32:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context4.next = 39;
              break;
            }

            e = _step.value;
            _context4.next = 36;
            return cozy.client.data.delete(_constants.DOCTYPE_META, e);

          case 36:
            _iteratorNormalCompletion = true;
            _context4.next = 32;
            break;

          case 39:
            _context4.next = 45;
            break;

          case 41:
            _context4.prev = 41;
            _context4.t0 = _context4["catch"](30);
            _didIteratorError = true;
            _iteratorError = _context4.t0;

          case 45:
            _context4.prev = 45;
            _context4.prev = 46;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 48:
            _context4.prev = 48;

            if (!_didIteratorError) {
              _context4.next = 51;
              break;
            }

            throw _iteratorError;

          case 51:
            return _context4.finish(48);

          case 52:
            return _context4.finish(45);

          case 53:
            return _context4.abrupt("return", value);

          case 54:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, undefined, [[30, 41, 45, 53], [46,, 48, 52]]);
  }));

  return function isAlreadyShown() {
    return _ref4.apply(this, arguments);
  };
}();

var markAsShown = exports.markAsShown = function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
    var shown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    var res, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, e, contacts;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return getMeta();

          case 2:
            res = _context5.sent;
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context5.prev = 6;
            _iterator2 = res[Symbol.iterator]();

          case 8:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context5.next = 15;
              break;
            }

            e = _step2.value;
            _context5.next = 12;
            return cozy.client.data.delete(_constants.DOCTYPE_META, e);

          case 12:
            _iteratorNormalCompletion2 = true;
            _context5.next = 8;
            break;

          case 15:
            _context5.next = 21;
            break;

          case 17:
            _context5.prev = 17;
            _context5.t0 = _context5["catch"](6);
            _didIteratorError2 = true;
            _iteratorError2 = _context5.t0;

          case 21:
            _context5.prev = 21;
            _context5.prev = 22;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 24:
            _context5.prev = 24;

            if (!_didIteratorError2) {
              _context5.next = 27;
              break;
            }

            throw _iteratorError2;

          case 27:
            return _context5.finish(24);

          case 28:
            return _context5.finish(21);

          case 29:
            _context5.next = 31;
            return cozy.client.data.create(_constants.DOCTYPE_META, { name: "onboarding", value: shown });

          case 31:
            _context5.next = 33;
            return getContactMeta();

          case 33:
            contacts = _context5.sent;
            _context5.next = 36;
            return cozy.client.data.create(_constants.DOCTYPE_META, { name: "contactType", value: [typeContact] });

          case 36:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, undefined, [[6, 17, 21, 29], [22,, 24, 28]]);
  }));

  return function markAsShown() {
    return _ref5.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./src/public/styles/DataForm.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/DataForm.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./DataForm.scss", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./DataForm.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/public/styles/DirectoryPicker.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/DirectoryPicker.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./DirectoryPicker.scss", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./DirectoryPicker.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/public/styles/FuneralList.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/FuneralList.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./FuneralList.scss", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./FuneralList.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/public/styles/ImporterModal.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/ImporterModal.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./ImporterModal.scss", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./ImporterModal.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/public/styles/Modal.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/Modal.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./Modal.scss", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./Modal.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/public/styles/Navigation.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/Navigation.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./Navigation.scss", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./Navigation.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/public/styles/Page.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/Page.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./Page.scss", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./Page.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/public/styles/buttons.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/public/styles/buttons.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./buttons.scss", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js??ref--4-2!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/index.js!./buttons.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/public/styles/react-datepicker.css":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"importLoaders\":1}!./node_modules/postcss-loader/index.js!./src/public/styles/react-datepicker.css");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js??ref--3-2!../../../node_modules/postcss-loader/index.js!./react-datepicker.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js??ref--3-2!../../../node_modules/postcss-loader/index.js!./react-datepicker.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/public/tools/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.searchFilesTag = exports.searchFilesName = exports.getDataElements = exports.forceFileDownload = exports.createOptionsFromArray = exports.findParentPath = exports.createFakePath = exports.exctractReelPath = exports.promiseTimeout = exports.isDirectory = exports.extractFileAttributes = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.string_to_slug = string_to_slug;

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _constants = __webpack_require__("./src/public/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var extractFileAttributes = exports.extractFileAttributes = function extractFileAttributes(f) {
    return Object.assign({}, f.attributes, {
        id: f._id,
        links: f.links
    });
};

var isDirectory = exports.isDirectory = function isDirectory(f) {
    return f && f.type && f.type === 'directory';
};

var promiseTimeout = exports.promiseTimeout = function promiseTimeout(time) {
    return new Promise(function (resolve, reject) {
        return setTimeout(resolve, time);
    });
};

var exctractReelPath = exports.exctractReelPath = function exctractReelPath() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';

    if (path.indexOf('/') !== 0) path = '/' + path;

    var folders = path.split('/');
    if (folders.length <= 1) {
        return _constants.ROOT_PATH + '/' + path;
    } else {
        var join = folders.splice(2).join('/');
        return _constants.ROOT_PATH + (join.length > 1 ? '/' + join : '');
    }
};

var createFakePath = exports.createFakePath = function createFakePath() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';

    if (path.indexOf('/') !== 0) path = '/' + path;

    var folders = path.split('/');
    if (folders.length <= 1) {
        return _constants.ROOT_NAME + '/' + path;
    } else {
        var join = folders.splice(2).join('/');
        return _constants.ROOT_NAME + (join.length > 1 ? '/' + join : '');
    }
};

var findParentPath = exports.findParentPath = function findParentPath(path) {
    if (path) {
        var folders = path.split('/');
        if (folders.length > 2) return folders.slice(0, folders.length - 1).join('/');
    }
};

var createOptionsFromArray = exports.createOptionsFromArray = function createOptionsFromArray(array) {
    return array.map(function (item, key) {
        return _react2.default.createElement(
            'option',
            { key: key, value: item },
            item
        );
    });
};

var forceFileDownload = exports.forceFileDownload = function forceFileDownload(href, filename) {
    var element = document.createElement('a');
    element.setAttribute('href', href);
    element.setAttribute('download', filename);
    element.style.display = 'none';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
};

var getDataElements = exports.getDataElements = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(doctype) {
        var addDoctypeInElements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var indexRef;
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.next = 2;
                        return cozy.client.data.defineIndex(doctype, ['_id']);

                    case 2:
                        indexRef = _context.sent;
                        _context.next = 5;
                        return cozy.client.data.query(indexRef, {
                            selector: {
                                "_id": {
                                    "$gt": null
                                }
                            }
                        }).then(function (list) {
                            if (addDoctypeInElements) return list.map(function (e) {
                                return _extends({}, e, { doctype: doctype });
                            });
                            return list;
                        });

                    case 5:
                        return _context.abrupt('return', _context.sent);

                    case 6:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined);
    }));

    return function getDataElements(_x3) {
        return _ref.apply(this, arguments);
    };
}();

var searchFilesName = exports.searchFilesName = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(query) {
        var indexRef, res;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.next = 2;
                        return cozy.client.data.defineIndex('io.cozy.files', ['_id', 'name']);

                    case 2:
                        indexRef = _context2.sent;
                        _context2.next = 5;
                        return cozy.client.data.query(indexRef, {
                            "selector": {
                                "_id": {
                                    $gt: null
                                },
                                "name": {
                                    $regex: '(?i)' + query
                                }
                            }
                        });

                    case 5:
                        res = _context2.sent;
                        return _context2.abrupt('return', res);

                    case 7:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, undefined);
    }));

    return function searchFilesName(_x5) {
        return _ref2.apply(this, arguments);
    };
}();

var searchFilesTag = exports.searchFilesTag = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(query) {
        var indexRef, res;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        _context3.next = 2;
                        return cozy.client.data.defineIndex('io.cozy.files', ['_id', 'tags']);

                    case 2:
                        indexRef = _context3.sent;
                        _context3.next = 5;
                        return cozy.client.data.query(indexRef, {
                            "selector": {
                                "_id": {
                                    $gt: null
                                },
                                "tags": {
                                    $in: [query]
                                }
                            }
                        });

                    case 5:
                        res = _context3.sent;
                        return _context3.abrupt('return', res);

                    case 7:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, undefined);
    }));

    return function searchFilesTag(_x6) {
        return _ref3.apply(this, arguments);
    };
}();

function string_to_slug(str) {
    str = str.replace(/^\s+|\s+$/g, ''); // trim
    str = str.toLowerCase();

    // remove accents, swap ñ for n, etc
    var from = "àáäâèéëêìíïîòóöôùúüûñç·/_,:;";
    var to = "aaaaeeeeiiiioooouuuunc------";
    for (var i = 0, l = from.length; i < l; i++) {
        str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));
    }

    str = str.replace(/[^a-z0-9 -]/g, '') // remove invalid chars
    .replace(/\s+/g, '-') // collapse whitespace and replace by -
    .replace(/-+/g, '-'); // collapse dashes

    return str;
}

/***/ }),

/***/ "./src/reducers/contacts.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.selectedCount = exports.elements = undefined;

var _redux = __webpack_require__("./node_modules/redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _constants = __webpack_require__("./src/constants/index.js");

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var elements = exports.elements = function elements() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_CONTACTS_SUCCESS:
            return action.contacts;
        case _actions.CONTACTS_NEW_SUCCESS:
            return [].concat(_toConsumableArray(state), [action.contact]);
        case _actions.CONTACTS_REMOVE_SUCCESS:
            return state.filter(function (f) {
                return action.ids.indexOf(f._id) === -1;
            });
        case _actions.CONTACTS_SAVE_SUCCESS:
            var withoutContact = state.filter(function (f) {
                return f._id !== action.contact._id;
            });
            return [].concat(_toConsumableArray(withoutContact), [action.contact]);
        case _actions.CONTACTS_SELECT:
            var updated = state.map(function (f) {
                if (f._id === action.contact._id) f.selected = !f.selected;
                return f;
            });
            return [].concat(_toConsumableArray(updated));
        default:
            return state;
    }
};

var selectedCount = exports.selectedCount = function selectedCount() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_CONTACTS_SUCCESS:
        case _actions.CONTACTS_REMOVE_SUCCESS:
            return 0;
        case _actions.CONTACTS_SELECT:
            if (action.contact.selected) return state - 1;else return state + 1;
        default:
            return state;
    }
};

var elementCount = function elementCount() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_CONTACTS_SUCCESS:
            return action.contacts.length;
        case _actions.CONTACTS_REMOVE_SUCCESS:
            return state - action.ids.length;
        case _actions.CONTACTS_RESTORE_SUCCESS:
            return state + action.ids.length;
        case _actions.CONTACTS_NEW_SUCCESS:
            return state + 1;
        default:
            return state;
    }
};

var fetchStatus = function fetchStatus() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.STATUS_LOAD;
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_CONTACTS:
        case _actions.CONTACTS_REMOVE:
        case _actions.CONTACTS_SAVE:
        case _actions.CONTACTS_NEW:
            return _constants.STATUS_LOAD;
        case _actions.LOAD_CONTACTS_SUCCESS:
        case _actions.CONTACTS_NEW_SUCCESS:
        case _actions.CONTACTS_REMOVE_SUCCESS:
        case _actions.CONTACTS_SAVE_SUCCESS:
            return _constants.STATUS_DONE;
        case _actions.LOAD_CONTACTS_FAILURE:
            return _constants.STATUS_ERROR;
        default:
            return state;
    }
};

exports.default = (0, _redux.combineReducers)({
    selectedCount: selectedCount,
    elements: elements,
    elementCount: elementCount,
    fetchStatus: fetchStatus
});

/***/ }),

/***/ "./src/reducers/data.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.current = exports.selectedCount = exports.dataCount = exports.doctype = exports.data = undefined;

var _redux = __webpack_require__("./node_modules/redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _constants = __webpack_require__("./src/constants/index.js");

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var data = exports.data = function data() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_DATA_SUCCESS:
            return action.data;
        case _actions.DATA_NEW_SUCCESS:
            return [].concat(_toConsumableArray(state), [action.data]);
        case _actions.DATA_REMOVE_SUCCESS:
            return state.filter(function (f) {
                return action.ids.indexOf(f._id) === -1;
            });
        case _actions.DATA_SAVE_SUCCESS:
            var withoutData = state.filter(function (f) {
                return f._id !== action.data._id;
            });
            return [].concat(_toConsumableArray(withoutData), [action.data]);
        case _actions.DATA_SELECT:
            var updated = state.map(function (f) {
                if (f._id === action.data._id) f.selected = !f.selected;
                return f;
            });
            return [].concat(_toConsumableArray(updated));
        default:
            return state;
    }
};

var doctype = exports.doctype = function doctype() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_DATA_SUCCESS:
        case _actions.DATA_LOAD_SUCCESS:
            return action.doctype;
        default:
            return state;
    }
};

var dataCount = exports.dataCount = function dataCount() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_DATA_SUCCESS:
            return action.data.length;
        case _actions.DATA_REMOVE_SUCCESS:
            return state - action.ids.length;
        case _actions.DATA_RESTORE_SUCCESS:
            return state + action.ids.length;
        case _actions.DATA_NEW_SUCCESS:
            return state + 1;
        default:
            return state;
    }
};

var selectedCount = exports.selectedCount = function selectedCount() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_DATA_SUCCESS:
        case _actions.DATA_REMOVE_SUCCESS:
            return 0;
        case _actions.DATA_SELECT:
            if (action.data.selected) return state - 1;else return state + 1;
        default:
            return state;
    }
};

var current = exports.current = function current() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var action = arguments[1];

    switch (action.type) {
        case _actions.DATA_LOAD_SUCCESS:
        case _actions.DATA_SAVE_SUCCESS:
            return action.data;
        default:
            return state;
    }
};

var fetchStatus = function fetchStatus() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.STATUS_DONE;
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_DATA:
        case _actions.DATA_LOAD:
        case _actions.DATA_REMOVE:
        case _actions.DATA_SAVE:
            return _constants.STATUS_LOAD;
        case _actions.LOAD_DATA_SUCCESS:
        case _actions.DATA_REMOVE_SUCCESS:
        case _actions.DATA_SAVE_SUCCESS:
        case _actions.DATA_LOAD_SUCCESS:
            return _constants.STATUS_DONE;
        case _actions.DATA_REMOVE_SUCCESS:
        case _actions.LOAD_DATA_FAILURE:
        case _actions.DATA_SAVE_FAILURE:
        case _actions.DATA_LOAD_FAILURE:
            return _constants.STATUS_ERROR;
        default:
            return state;
    }
};

exports.default = (0, _redux.combineReducers)({
    selectedCount: selectedCount,
    data: data,
    doctype: doctype,
    dataCount: dataCount,
    current: current,
    fetchStatus: fetchStatus
});

/***/ }),

/***/ "./src/reducers/documents.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _redux = __webpack_require__("./node_modules/redux/es/index.js");

var _actions = __webpack_require__("./src/actions/index.js");

var _constants = __webpack_require__("./src/constants/index.js");

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// reducer for the currently displayed folder properties
var folder = function folder() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_DOCS_SUCCESS:
            return action.folder;
        default:
            return state;
    }
};

var filter = function filter() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.SORT_DATE;
    var action = arguments[1];

    switch (action.type) {
        case _actions.DOCUMENTS_CHANGE_FILTER:
            return action.filter;
        default:
            return state;
    }
};

var path = function path() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_DOCS:
            return action.path;
        default:
            return state;
    }
};

var fileCount = function fileCount() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_DOCS_SUCCESS:
            return action.fileCount;
        case _actions.LOAD_FILE_SUCCESS:
            return 0;
        case _actions.IMPORTER_FILE_UPLOAD_SUCESS:
            return state + action.files.length;
        case _actions.DOCUMENTS_NEW_FOLDER_SUCCESS:
            return state + 1;
        case _actions.DOCUMENTS_REMOVE_SUCCESS:
        case _actions.DOCUMENTS_MOVE_SUCCESS:
            return state - action.ids.length;
        case _actions.DOCUMENTS_RESTORE_SUCCESS:
            return state + action.ids.length;
        default:
            return state;
    }
};

var selectedCount = function selectedCount() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_DOCS_SUCCESS:
        case _actions.DOCUMENTS_REMOVE_SUCCESS:
        case _actions.DOCUMENTS_RENAME_SUCCESS:
        case _actions.DOCUMENTS_MOVE_SUCCESS:
            return 0;
        case _actions.DOCUMENTS_SELECT:
            if (action.document.selected) return state - 1;else return state + 1;
        default:
            return state;
    }
};

// reducer for the full file list of the currently displayed folder
var files = function files() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_DOCS_SUCCESS:
            return action.files;
        case _actions.LOAD_FILE_SUCCESS:
            return [];

        case _actions.IMPORTER_FILE_UPLOAD_SUCESS:
            if (action.currentDir) return [].concat(_toConsumableArray(state), _toConsumableArray(action.files));else return state;
        case _actions.DOCUMENTS_NEW_FOLDER_SUCCESS:
            return [action.folder].concat(_toConsumableArray(state));

        case _actions.DOCUMENTS_REMOVE_SUCCESS:
        case _actions.DOCUMENTS_MOVE_SUCCESS:
            return state.filter(function (f) {
                return action.ids.indexOf(f.id) === -1;
            });

        case _actions.DOCUMENTS_SELECT:
            var updated = state.map(function (f) {
                if (f.id === action.document.id) f.selected = !f.selected;
                return f;
            });
            return [].concat(_toConsumableArray(updated));

        case _actions.DOCUMENTS_RENAME_SUCCESS:
            var updatedName = state.map(function (f) {
                if (f.id === action.file.id) f = action.file;
                return f;
            });
            return [].concat(_toConsumableArray(updatedName));
        default:
            return state;
    }
};

var fetchStatus = function fetchStatus() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.STATUS_LOAD;
    var action = arguments[1];

    switch (action.type) {
        // there's a trick here : we set the fetchStatus to 'pending'
        // on initial state so that the loading spinner is only showed
        // when the app is launched or when the user use the back button
        case _actions.LOAD_DOCS: // we temporarily display the spinner when working in the trashed
        case _actions.DOCUMENTS_REMOVE: // TODO: display a spinner in the confirm modal instead
        case _actions.DOCUMENTS_NEW_FOLDER:
        case _actions.IMPORTER_FILE_UPLOAD:
            return _constants.STATUS_LOAD;
        case _actions.LOAD_DOCS_SUCCESS:
        case _actions.LOAD_FILE_SUCCESS:
        case _actions.DOCUMENTS_REMOVE_SUCCESS:
        case _actions.IMPORTER_FILE_UPLOAD_SUCESS:
        case _actions.DOCUMENTS_MOVE_SUCCESS:
        case _actions.DOCUMENTS_NEW_FOLDER_SUCCESS:
            return _constants.STATUS_DONE;
        case _actions.DOCUMENTS_REMOVE_FAILURE:
        case _actions.LOAD_DOCS_FAILURE:
            return _constants.STATUS_ERROR;
        default:
            return state;
    }
};

var lastFetchType = function lastFetchType() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_DOCS:
        case _actions.LOAD_DOCS_SUCCESS:
            return _constants.TYPE_FOLDER;
        case _actions.LOAD_FILE_SUCCESS:
            return _constants.TYPE_FILE;
        default:
            return state;
    }
};

var needSort = function needSort() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var action = arguments[1];

    switch (action.type) {
        case _actions.DOCUMENTS_CHANGE_FILTER:
        case _actions.IMPORTER_FILE_UPLOAD_SUCESS:
        case _actions.LOAD_DOCS_SUCCESS:
            return true;
        default:
            return false;
    }
};

var current = function current() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var action = arguments[1];

    switch (action.type) {
        case _actions.LOAD_FILE_SUCCESS:
        case _actions.DOCUMENTS_CHANGE_TYPE_SUCCESS:
            return action.file;
        case _actions.LOAD_DOCS_SUCCESS:
            return null;
        default:
            return state;
    }
};

exports.default = (0, _redux.combineReducers)({
    folder: folder,
    path: path,
    fileCount: fileCount,
    selectedCount: selectedCount,
    files: files,
    fetchStatus: fetchStatus,
    lastFetchType: lastFetchType,
    filter: filter,
    needSort: needSort,
    current: current
});

/***/ }),

/***/ "./src/reducers/gauge.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.gauge = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _actions = __webpack_require__("./src/actions/index.js");

var _constants = __webpack_require__("./src/constants/index.js");

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var defaultState = {
    usedTypes: [],
    dataCreated: [],
    status: _constants.STATUS_LOAD
};

var gauge = exports.gauge = function gauge() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;
    var action = arguments[1];

    switch (action.type) {
        case _actions.IMPORTER_FILE_UPLOAD_SUCESS:
            var types = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = action.files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var file = _step.value;

                    var type = getTypeOf(file);

                    if (type === undefined) continue;

                    var find = false;
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;

                    try {
                        for (var _iterator2 = state.usedTypes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var t = _step2.value;

                            if (t.type === type) {
                                t.count = t.count + 1 || 1;
                                find = true;
                                break;
                            }
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }

                    if (!find) {
                        types.push({ type: type, count: 1 });
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return _extends({}, state, { usedTypes: [].concat(_toConsumableArray(state.usedTypes), types) });

        case _actions.DOCUMENTS_RESTORE_SUCCESS:
            var types2 = [];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = action.types[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _type = _step3.value;


                    var _find = false;
                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;

                    try {
                        for (var _iterator4 = state.usedTypes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                            var _t = _step4.value;

                            if (_t.type === _type) {
                                _t.count = _t.count + 1 || 1;
                                _find = true;
                                break;
                            }
                        }
                    } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                _iterator4.return();
                            }
                        } finally {
                            if (_didIteratorError4) {
                                throw _iteratorError4;
                            }
                        }
                    }

                    if (!_find) {
                        types2.push({ type: _type, count: 1 });
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return _extends({}, state, { usedTypes: [].concat(_toConsumableArray(state.usedTypes), types2) });

        case _actions.DOCUMENTS_REMOVE_SUCCESS:
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = action.types[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _type2 = _step5.value;
                    var _iteratorNormalCompletion6 = true;
                    var _didIteratorError6 = false;
                    var _iteratorError6 = undefined;

                    try {

                        for (var _iterator6 = state.usedTypes[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                            var _t2 = _step6.value;

                            if (_t2.type === _type2) {
                                _t2.count = _t2.count - 1;
                                if (_t2.count <= 0) {
                                    var index = state.usedTypes.indexOf(_t2);
                                    state.usedTypes.splice(index, 1);
                                }
                                break;
                            }
                        }
                    } catch (err) {
                        _didIteratorError6 = true;
                        _iteratorError6 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                _iterator6.return();
                            }
                        } finally {
                            if (_didIteratorError6) {
                                throw _iteratorError6;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            return _extends({}, state, { usedTypes: [].concat(_toConsumableArray(state.usedTypes)) });

        case _actions.DOCUMENTS_CHANGE_TYPE_SUCCESS:
            if (action.oldTag) {
                var _iteratorNormalCompletion7 = true;
                var _didIteratorError7 = false;
                var _iteratorError7 = undefined;

                try {
                    for (var _iterator7 = state.usedTypes[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                        var _t3 = _step7.value;

                        if (_t3.type === action.oldTag) {
                            _t3.count = _t3.count - 1;
                            if (_t3.count <= 0) {
                                var _index = state.usedTypes.indexOf(_t3);
                                state.usedTypes.splice(_index, 1);
                            }
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError7 = true;
                    _iteratorError7 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion7 && _iterator7.return) {
                            _iterator7.return();
                        }
                    } finally {
                        if (_didIteratorError7) {
                            throw _iteratorError7;
                        }
                    }
                }

                console.log('Change', state.usedTypes);
            }
            var types3 = [];
            if (action.newTag) {
                var _find2 = false;
                var _iteratorNormalCompletion8 = true;
                var _didIteratorError8 = false;
                var _iteratorError8 = undefined;

                try {
                    for (var _iterator8 = state.usedTypes[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                        var _t4 = _step8.value;

                        if (_t4.type === action.newTag) {
                            _t4.count = _t4.count + 1 || 1;
                            _find2 = true;
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError8 = true;
                    _iteratorError8 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion8 && _iterator8.return) {
                            _iterator8.return();
                        }
                    } finally {
                        if (_didIteratorError8) {
                            throw _iteratorError8;
                        }
                    }
                }

                if (!_find2) {
                    types3.push({ type: action.newTag, count: 1 });
                }
                console.log('Change', state.usedTypes, types3);
            }
            return _extends({}, state, { usedTypes: [].concat(_toConsumableArray(state.usedTypes), types3) });

        case _actions.DATA_RESTORE_SUCCESS:
            var data = [];
            var _iteratorNormalCompletion9 = true;
            var _didIteratorError9 = false;
            var _iteratorError9 = undefined;

            try {
                for (var _iterator9 = action.doctypes[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                    var _doctype = _step9.value;

                    var _find3 = false;
                    var _iteratorNormalCompletion10 = true;
                    var _didIteratorError10 = false;
                    var _iteratorError10 = undefined;

                    try {
                        for (var _iterator10 = state.dataCreated[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                            var _t5 = _step10.value;

                            if (_t5.doctype === _doctype) {
                                _t5.count = _t5.count + 1 || 1;
                                _find3 = true;
                                break;
                            }
                        }
                    } catch (err) {
                        _didIteratorError10 = true;
                        _iteratorError10 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion10 && _iterator10.return) {
                                _iterator10.return();
                            }
                        } finally {
                            if (_didIteratorError10) {
                                throw _iteratorError10;
                            }
                        }
                    }

                    if (!_find3) {
                        data.push({ doctype: _doctype, count: 1 });
                    }
                }
            } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion9 && _iterator9.return) {
                        _iterator9.return();
                    }
                } finally {
                    if (_didIteratorError9) {
                        throw _iteratorError9;
                    }
                }
            }

            return _extends({}, state, { dataCreated: [].concat(_toConsumableArray(state.dataCreated), data) });

        case _actions.DATA_REMOVE_SUCCESS:
            var doctype = action.doctype;
            var count = action.ids.length;

            var _iteratorNormalCompletion11 = true;
            var _didIteratorError11 = false;
            var _iteratorError11 = undefined;

            try {
                for (var _iterator11 = state.dataCreated[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                    var _t6 = _step11.value;

                    if (_t6.doctype === doctype) {
                        _t6.count = _t6.count - count;
                        if (_t6.count <= 0) {
                            var _index2 = state.dataCreated.indexOf(_t6);
                            state.dataCreated.splice(_index2, 1);
                        }
                        break;
                    }
                }
            } catch (err) {
                _didIteratorError11 = true;
                _iteratorError11 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion11 && _iterator11.return) {
                        _iterator11.return();
                    }
                } finally {
                    if (_didIteratorError11) {
                        throw _iteratorError11;
                    }
                }
            }

            return _extends({}, state, { dataCreated: [].concat(_toConsumableArray(state.dataCreated)) });

        case _actions.GAUGE_INITIALIZE:
            return _extends({}, state, { status: _constants.STATUS_LOAD });
        case _actions.GAUGE_INITIALIZE_SUCCESS:
            return _extends({}, state, { usedTypes: action.types, dataCreated: action.data, status: _constants.STATUS_DONE });
        case _actions.GAUGE_INITIALIZE_FAILURE:
            return _extends({}, state, { status: _constants.STATUS_ERROR });
        default:
            return state;
    }
};

exports.default = gauge;


var getTypeOf = function getTypeOf(file) {
    return file.tags && file.tags[0];
};

/***/ }),

/***/ "./src/reducers/importer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.importer = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _actions = __webpack_require__("./src/actions/index.js");

var _constants = __webpack_require__("./src/constants/index.js");

var defaultState = {
    currentPath: "",
    currentType: "",
    documentsTree: {},
    view: _constants.VIEW_FILE,
    status: _constants.STATUS_DONE
};

var importer = exports.importer = function importer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;
    var action = arguments[1];

    switch (action.type) {
        case _actions.IMPORTER_DIRECTORY_CHANGE:
            return _extends({}, state, { currentPath: action.path
                //Shortcut for IMPORTER_DIRECTORY_CHANGE
            });case _actions.IMPORTER_CLICK:
            return _extends({}, state, { currentPath: action.path, currentType: action.slug, view: _constants.VIEW_FILE });
        case _actions.IMPORTER_VIEW_CHANGE:
            return _extends({}, state, { view: action.view });
        case _actions.IMPORTER_TREE_SUCCESS:
            return _extends({}, state, { documentsTree: action.tree });
        case _actions.IMPORTER_FILE_UPLOAD:
            return _extends({}, state, { status: _constants.STATUS_LOAD });
        case _actions.IMPORTER_FILE_UPLOAD_SUCESS:
            return _extends({}, state, { status: _constants.STATUS_DONE });
        case _actions.IMPORTER_FILE_UPLOAD_FAILURE:
            return _extends({}, state, { status: _constants.STATUS_ERROR });
        default:
            return state;
    }
};

exports.default = importer;

/***/ }),

/***/ "./src/reducers/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducers = undefined;

var _redux = __webpack_require__("./node_modules/redux/es/index.js");

var _documents = __webpack_require__("./src/reducers/documents.js");

var _documents2 = _interopRequireDefault(_documents);

var _gauge = __webpack_require__("./src/reducers/gauge.js");

var _gauge2 = _interopRequireDefault(_gauge);

var _importer = __webpack_require__("./src/reducers/importer.js");

var _importer2 = _interopRequireDefault(_importer);

var _viewMode = __webpack_require__("./src/reducers/viewMode.js");

var _viewMode2 = _interopRequireDefault(_viewMode);

var _contacts = __webpack_require__("./src/reducers/contacts.js");

var _contacts2 = _interopRequireDefault(_contacts);

var _data = __webpack_require__("./src/reducers/data.js");

var _data2 = _interopRequireDefault(_data);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//import trash from './trash'
//import news from './news'
//import alerts from './alerts'

var reducers = exports.reducers = {
  documents: _documents2.default,
  gauge: _gauge2.default,
  importer: _importer2.default,
  viewMode: _viewMode2.default,
  //  trash,
  data: _data2.default,
  //  recalls,
  contacts: _contacts2.default
  //  news,
  //  alerts
};
//import recalls from './recalls'


var filesApp = (0, _redux.combineReducers)(reducers);
exports.default = filesApp;

/***/ }),

/***/ "./src/reducers/viewMode.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.viewMode = undefined;

var _actions = __webpack_require__("./src/actions/index.js");

var _constants = __webpack_require__("./src/constants/index.js");

var viewMode = exports.viewMode = function viewMode() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.VIEW_LIST;
    var action = arguments[1];

    switch (action.type) {
        case _actions.DOCUMENTS_CHANGE_VIEW_MODE:
        case _actions.TRASH_CHANGE_VIEW_MODE:
            if (state === _constants.VIEW_GRID) return _constants.VIEW_LIST;else return _constants.VIEW_GRID;
        default:
            return state;
    }
};

exports.default = viewMode;

/***/ }),

/***/ "./src/scripts/ResetHombook.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.resetEmpreinte = undefined;

var _constants = __webpack_require__("./src/constants/index.js");

var _tools = __webpack_require__("./src/tools/index.js");

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var resetEmpreinte = exports.resetEmpreinte = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var empreinteDir;
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return deleteAll(_constants.DOCTYPE_CONTACTS);

                    case 3:
                        _context.next = 5;
                        return deleteAll(_constants.DOCTYPE_DIAGNOSIS);

                    case 5:
                        _context.next = 7;
                        return deleteAll(_constants.DOCTYPE_EQUIPMENTS);

                    case 7:
                        _context.next = 9;
                        return deleteAll(_constants.DOCTYPE_HOMEDATA);

                    case 9:
                        _context.next = 11;
                        return deleteAll(_constants.DOCTYPE_MAINTENANCES);

                    case 11:
                        _context.next = 13;
                        return deleteAll(_constants.DOCTYPE_META);

                    case 13:
                        _context.next = 15;
                        return deleteAll(_constants.DOCTYPE_NEWS);

                    case 15:
                        _context.next = 17;
                        return deleteAll(_constants.DOCTYPE_RECALLS);

                    case 17:
                        _context.next = 19;
                        return deleteAll(_constants.DOCTYPE_WORKS);

                    case 19:
                        _context.next = 21;
                        return deleteAll(_constants.DOCTYPE_F_LASTWILL);

                    case 21:
                        _context.next = 23;
                        return deleteAll(_constants.DOCTYPE_F_CONTACTS);

                    case 23:
                        _context.next = 25;
                        return cozy.client.files.statByPath(_constants.ROOT_PATH);

                    case 25:
                        empreinteDir = _context.sent;
                        _context.next = 28;
                        return cozy.client.files.trashById(empreinteDir._id);

                    case 28:
                        _context.next = 30;
                        return cozy.client.files.clearTrash();

                    case 30:
                        _context.next = 35;
                        break;

                    case 32:
                        _context.prev = 32;
                        _context.t0 = _context['catch'](0);

                        console.error('Reset Empreinte', _context.t0);

                    case 35:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined, [[0, 32]]);
    }));

    return function resetEmpreinte() {
        return _ref.apply(this, arguments);
    };
}();

var deleteAll = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(doctype) {
        var data, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, d;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.next = 2;
                        return (0, _tools.getDataElements)(doctype);

                    case 2:
                        data = _context2.sent;
                        _iteratorNormalCompletion = true;
                        _didIteratorError = false;
                        _iteratorError = undefined;
                        _context2.prev = 6;
                        _iterator = data[Symbol.iterator]();

                    case 8:
                        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                            _context2.next = 15;
                            break;
                        }

                        d = _step.value;
                        _context2.next = 12;
                        return cozy.client.data.delete(doctype, d);

                    case 12:
                        _iteratorNormalCompletion = true;
                        _context2.next = 8;
                        break;

                    case 15:
                        _context2.next = 21;
                        break;

                    case 17:
                        _context2.prev = 17;
                        _context2.t0 = _context2['catch'](6);
                        _didIteratorError = true;
                        _iteratorError = _context2.t0;

                    case 21:
                        _context2.prev = 21;
                        _context2.prev = 22;

                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }

                    case 24:
                        _context2.prev = 24;

                        if (!_didIteratorError) {
                            _context2.next = 27;
                            break;
                        }

                        throw _iteratorError;

                    case 27:
                        return _context2.finish(24);

                    case 28:
                        return _context2.finish(21);

                    case 29:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, undefined, [[6, 17, 21, 29], [22,, 24, 28]]);
    }));

    return function deleteAll(_x) {
        return _ref2.apply(this, arguments);
    };
}();

/***/ }),

/***/ "./src/scripts/confirm.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.alert = undefined;

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__("./node_modules/react-dom/index.js");

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createWrapper = function createWrapper() {
    return document.body.appendChild(document.createElement('div'));
};

var confirm = function confirm(component) {
    return new Promise(function (resolve, reject) {
        var wrapper = createWrapper();

        var abort = function abort() {
            setTimeout(function () {
                _reactDom2.default.unmountComponentAtNode(wrapper);
                wrapper.remove();
                reject();
            });
        };

        var confirm = function confirm(extra) {
            setTimeout(function () {
                _reactDom2.default.unmountComponentAtNode(wrapper);
                wrapper.remove();
                resolve(extra);
            });
        };

        _reactDom2.default.render(_react2.default.cloneElement(component, {
            confirm: confirm,
            abort: abort
        }), wrapper);
    });
};

exports.default = confirm;
var alert = exports.alert = function alert(component) {
    var wrapper = createWrapper();

    var close = function close() {
        _reactDom2.default.unmountComponentAtNode(wrapper);
        wrapper.remove();
    };

    _reactDom2.default.render(_react2.default.cloneElement(component, {
        close: close
    }), wrapper);
};

/***/ }),

/***/ "./src/scripts/dataFields.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInfosFromDoctype = exports.getInfosFromSlug = exports.getInfosFromPath = exports.getFields = exports.getEquipmentFields = exports.getHomeFields = exports.getDiagnosisFields = exports.getContactFields = undefined;

var _contact = __webpack_require__("./src/constants/data/contact.json");

var _contact2 = _interopRequireDefault(_contact);

var _diagnosis = __webpack_require__("./src/constants/data/diagnosis.json");

var _diagnosis2 = _interopRequireDefault(_diagnosis);

var _home = __webpack_require__("./src/constants/data/home.json");

var _home2 = _interopRequireDefault(_home);

var _equipment = __webpack_require__("./src/constants/data/equipment.json");

var _equipment2 = _interopRequireDefault(_equipment);

var _contact3 = __webpack_require__("./src/constants/data/funerals/contact.json");

var _contact4 = _interopRequireDefault(_contact3);

var _constants = __webpack_require__("./src/constants/index.js");

var _index = __webpack_require__("./src/constants/index.js");

var _last_will = __webpack_require__("./src/constants/data/funerals/last_will.json");

var _last_will2 = _interopRequireDefault(_last_will);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getContactFields = exports.getContactFields = function getContactFields() {
  return _contact2.default;
};

var getDiagnosisFields = exports.getDiagnosisFields = function getDiagnosisFields() {
  return _diagnosis2.default;
};

var getHomeFields = exports.getHomeFields = function getHomeFields() {
  return _home2.default;
};

var getEquipmentFields = exports.getEquipmentFields = function getEquipmentFields() {
  return _equipment2.default;
};

var getFields = exports.getFields = function getFields(doctype) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "default";

  switch (doctype) {
    case _constants.DOCTYPE_DIAGNOSIS:
      return _diagnosis2.default;
    case _constants.DOCTYPE_EQUIPMENTS:
      return _equipment2.default;
    case _constants.DOCTYPE_HOMEDATA:
      return _home2.default;
    case _index.DOCTYPE_F_LASTWILL:
      return _last_will2.default;
    case _index.DOCTYPE_F_CONTACTS:
    case _constants.DOCTYPE_F_CUSTOMCONTACTS:
      switch (type) {
        case "employeur":
          return _contact4.default.employeur;
        case "pole_emploi":
          return _contact4.default.pole_emploi;
        case "banque":
          return _contact4.default.banque;
        case "credit":
          return _contact4.default.credit;
        case "complementaire_maladie":
          return _contact4.default.complementaire_maladie;
        case "salarie_association":
          return _contact4.default.salarie_association;
        case "cpam":
          return _contact4.default.cpam;
        case "assurance_material":
          return _contact4.default.assurance_material;
        case "assurance_person":
          return _contact4.default.assurance_person;
        case "notaire":
          return _contact4.default.notaire;
        case "retraite":
          return _contact4.default.retraite;
        case "bailleur":
          return _contact4.default.bailleur;
        case "locataire":
          return _contact4.default.locataire;
        case "caf":
          return _contact4.default.caf;
        case "organism_payer":
          return _contact4.default.organism_payer;
        case "impot":
          return _contact4.default.impot;
        default:
          return _contact4.default.default;
      }
  }
};

var getInfosFromPath = exports.getInfosFromPath = function getInfosFromPath(path) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _constants.DATA_LIST[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var data = _step.value;

      if (data.path === path) return data;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

var getInfosFromSlug = exports.getInfosFromSlug = function getInfosFromSlug(slug) {
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _constants.DATA_LIST[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var data = _step2.value;

      if (data.slug === slug) return data;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
};

var getInfosFromDoctype = exports.getInfosFromDoctype = function getInfosFromDoctype(doctype) {
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = _constants.DATA_LIST[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var data = _step3.value;

      if (data.doctype === doctype) return data;
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
};

/***/ }),

/***/ "./src/scripts/fileTypes.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getDisplayName = exports.getTypesByGroup = exports.getFileTypes = undefined;

var _filetypes = __webpack_require__("./src/constants/filetypes.json");

var _filetypes2 = _interopRequireDefault(_filetypes);

var _constants = __webpack_require__("./src/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getFileTypes = exports.getFileTypes = function getFileTypes() {

    var ret = [];

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = _filetypes2.default[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var elem = _step.value;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = elem.types[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var type = _step2.value;

                    type.location = _constants.ROOT_PATH + elem.location;
                    type.perso = type.perso || elem.perso | false;
                    ret.push(type);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    var types = ret;
    return types;
};

var getTypesByGroup = exports.getTypesByGroup = function getTypesByGroup() {

    return _filetypes2.default;
};

var getDisplayName = exports.getDisplayName = function getDisplayName(slug) {
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {

        for (var _iterator3 = _filetypes2.default[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var elem = _step3.value;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = elem.types[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var type = _step4.value;

                    if (type.key === slug) {
                        return type.name;
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }
};

/***/ }),

/***/ "./src/scripts/meta.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.contactExist = exports.getCustomContactMeta = exports.getMeta = undefined;

var _constants = __webpack_require__("./src/constants/index.js");

var _index = __webpack_require__("./src/constants/index.js");

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var getMeta = exports.getMeta = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var indexRef, result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            console.log(_constants.DOCTYPE_META);
            _context.next = 4;
            return cozy.client.data.defineIndex(_constants.DOCTYPE_META, ['name']);

          case 4:
            indexRef = _context.sent;

            console.log(indexRef);
            _context.next = 8;
            return cozy.client.data.query(indexRef, {
              selector: {
                "name": "contactType"
              }
            });

          case 8:
            result = _context.sent;

            console.log(result);
            return _context.abrupt('return', result);

          case 13:
            _context.prev = 13;
            _context.t0 = _context['catch'](0);
            return _context.abrupt('return', []);

          case 16:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 13]]);
  }));

  return function getMeta() {
    return _ref.apply(this, arguments);
  };
}();

var getCustomContactMeta = exports.getCustomContactMeta = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var indexRef, result;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return cozy.client.data.defineIndex(_constants.DOCTYPE_META, ['name']);

          case 3:
            indexRef = _context2.sent;
            _context2.next = 6;
            return cozy.client.data.query(indexRef, {
              selector: {
                "name": "customContactType"
              }
            });

          case 6:
            result = _context2.sent;
            return _context2.abrupt('return', result);

          case 10:
            _context2.prev = 10;
            _context2.t0 = _context2['catch'](0);
            return _context2.abrupt('return', []);

          case 13:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[0, 10]]);
  }));

  return function getCustomContactMeta() {
    return _ref2.apply(this, arguments);
  };
}();

var contactExist = exports.contactExist = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(name) {
    var indexRef, result;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            _context3.next = 3;
            return cozy.client.data.defineIndex(_index.DOCTYPE_F_CONTACTS, ['name']);

          case 3:
            indexRef = _context3.sent;
            _context3.next = 6;
            return cozy.client.data.query(indexRef, {
              selector: {
                "name": name
              }
            });

          case 6:
            result = _context3.sent;

            console.log(result);
            return _context3.abrupt('return', result);

          case 11:
            _context3.prev = 11;
            _context3.t0 = _context3['catch'](0);
            return _context3.abrupt('return', []);

          case 14:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined, [[0, 11]]);
  }));

  return function contactExist(_x) {
    return _ref3.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./src/scripts/onboarding.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.markAsShown = exports.isAlreadyShown = exports.getCustomContactMeta = exports.getContactMeta = exports.getMeta = undefined;

var _constants = __webpack_require__("./src/constants/index.js");

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var typeContact = {
  "name": "Mes contacts administratifs",
  "location": "/Contacts Administratifs",
  "types": [{
    "key": "medecin",
    "name": "Médecin Traitant",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Il est la première personne à prévenir en cas de décès à domicile. Si la mort survient à l'hôpital, les services se chargeront de la démarche. Le médecin constate la mort et produit le certificat indispensable à l’établissement de l'acte de décès.",
    "location": "/Empreinte/Funerals Contact",
    "type": "medecin",
    "letter": false,
    "delay": "IMMÉDIATEMENT",
    "perso": 0
  }, {
    "key": "mairie",
    "name": "Mairie",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Prévenir la mairie sera l'une des toutes premières démarches à effectuer, dans les 24 heures après le constat de décès. C'est l'administration qui établira l'acte de décès. Ses copies seront souvent demandées par la suite.",
    "location": "/Empreinte/Funerals Contact",
    "type": "mairie",
    "letter": false,
    "delay": "DANS LES 24 HEURES",
    "perso": 0
  }, {
    "key": "pole_emploi",
    "name": "Pôle Emploi",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Pour interrompre le versement des allocations chômages, l'établissement administratif Pôle emploi doit être prévenu du décès de la personne par simple courrier. La démarche peut également donner lieu au versement d'une allocation décès pour le conjoint.",
    "location": "/Empreinte/Funerals Contact",
    "type": "pole_emploi",
    "letter": true,
    "delay": "DANS LES 48 HEURES",
    "perso": 0
  }, {
    "key": "employeur",
    "name": "Employeur",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Informer l'employeur du décès du salarié pour obtenir le solde de tout compte, le certificat de travail, …",
    "location": "/Empreinte/Funerals Contact",
    "type": "employeur",
    "letter": true,
    "delay": "DANS LES 48 HEURES",
    "perso": 0
  }, {
    "key": "banque",
    "name": "Banque",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "L'une des premières démarches d'ordre administratif à effectuer est de transmettre un acte de décès à la banque du défunt. L'établissement est dans l'obligation de bloquer le compte à la date du décès, d'annuler les procurations, de récupérer les moyens de paiements. Les sommes d'argent seront rendues disponibles après le règlement de la succession.",
    "location": "/Empreinte/Funerals Contact",
    "type": "banque",
    "letter": true,
    "delay": "DANS LA SEMAINE",
    "perso": 0
  }, {
    "key": "credit",
    "name": "Organisme de crédit",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "En cas de crédit en cours de remboursement, l'organisme prêteur doit être prévenu du décès. L'assurance éventuellement souscrite pourra alors acquitter les sommes restantes dues. Sinon, ce sont les avoirs du défunt qui servent à solder les dettes en cours.",
    "location": "/Empreinte/Funerals Contact",
    "type": "credit",
    "letter": true,
    "delay": "DANS LA SEMAINE",
    "perso": 0
  }, {
    "key": "complementaire_maladie",
    "name": "Mutuelle de santé complémentaire",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Il s’agit des complémentaires santé. Ces organismes peuvent verser un capital décès aux conjoint, enfants ou ascendants.",
    "location": "/Empreinte/Funerals Contact",
    "type": "complementaire_maladie",
    "letter": true,
    "delay": "DANS LA SEMAINE",
    "perso": 0
  }, {
    "key": "service_domicile",
    "name": "Salarié ou association de service à domicile",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Si vous ou votre proche employait une aide à domicile selon un contrat CESU (Chèque emploi service universel), le décès entraîne la fin automatique du contrat de travail. Il sera toutefois nécessaire de lui adresser une lettre de licenciement.",
    "location": "/Empreinte/Funerals Contact",
    "type": "salarie_association",
    "letter": true,
    "delay": "DANS LES 7 JOURS",
    "perso": 0
  }, {
    "key": "cpam",
    "name": "Régime Général de santé",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Comme tous les autres organismes, la Sécurité sociale doit être prévenu dans de courts délais après un décès. La démarche, assortie de la production de l’acte de décès, déclenchera une série d’ajustements administratifs et l’éventuel versement de droits.",
    "location": "/Empreinte/Funerals Contact",
    "type": "cpam",
    "letter": true,
    "delay": "DANS LES 7 JOURS",
    "perso": 0
  }, {
    "key": "assurance_material",
    "name": "Assurances",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Transférer ou résilier les assurances habitation, responsabilité civile et véhicule.",
    "location": "/Empreinte/Funerals Contact",
    "type": "assurance_material",
    "letter": true,
    "delay": "DANS LE MOIS",
    "perso": 0
  }, {
    "key": "assurance_person",
    "name": "Assurances-vie/décès",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Prévenir la mutuelle d'assurance est l'une des actions prioritaires à effectuer. La mise à jour du dossier stoppe le versement des cotisations et peut donner droit à des allocations ou même faire bénéficier du tiers payant obsèques dans certains cas.",
    "location": "/Empreinte/Funerals Contact",
    "type": "assurance_person",
    "letter": true,
    "delay": "DANS LE MOIS",
    "perso": 0
  }, {
    "key": "notaire",
    "name": "Notaire",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Il est un intervenant clé dans le règlement de la succession du défunt. Ici, la fiche contact du notaire à qui le testament a été confié ou celui qui connait la situation familiale et patrimoniale, sera d'une grande utilité pour la suite.",
    "location": "/Empreinte/Funerals Contact",
    "type": "notaire",
    "letter": true,
    "delay": "DANS LE MOIS",
    "perso": 0
  }, {
    "key": "retraite",
    "name": "Caisse de retraite",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Le conjoint ou ex-conjoint peut bénéficier du versement d'une pension de réversion versée par la caisse de retraite. L'organisme, dont les coordonnées auront été renseignées dans l'Espace privé, pourra initier les règlements (souvent trimestriels) dans les délais d'autant plus raisonnables qu'il sera prévenu tôt.",
    "location": "/Empreinte/Funerals Contact",
    "type": "retraite",
    "letter": true,
    "delay": "DANS LE MOIS",
    "perso": 0
  }, {
    "key": "caf",
    "name": "Caisse d'allocations familiales",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "La CAF dispose de lettres types qui servent à prévenir l’organisme du décès d’un proche. Ici, vous pourrez renseigner l’adresse de la caisse dont vous dépendez et votre numéro d’allocataire. La démarche peut donner lieu à l’ouverture de droits. Un certificat de décès sera également nécessaire.",
    "location": "/Empreinte/Funerals Contact",
    "type": "administratif",
    "letter": true,
    "delay": "DANS LE MOIS",
    "perso": 0
  }, {
    "key": "bailleur",
    "name": "Bailleur ou syndic si co-propriété",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Il est un intervenant clé dans le règlement de la succession du défunt. Ici, la fiche contact du notaire à qui le testament a été confié ou celui qui connait la situation familiale et patrimoniale, sera d'une grande utilité pour la suite.",
    "location": "/Empreinte/Funerals Contact",
    "type": "bailleur",
    "letter": true,
    "delay": "DANS LE MOIS",
    "perso": 0
  }, {
    "key": "locataire",
    "name": "Locataire",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "",
    "location": "/Empreinte/Funerals Contact",
    "type": "locataire",
    "letter": true,
    "delay": "DANS LE MOIS",
    "perso": 0
  }, {
    "key": "conseil_general",
    "name": "Conseil général",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Des prestations sociales comme l’allocation personnalisée d’autonomie seront interrompues.",
    "location": "/Empreinte/Funerals Contact",
    "type": "organism_payer",
    "letter": true,
    "delay": "DANS LE MOIS",
    "perso": 0
  }, {
    "key": "prefecture",
    "name": "Préfecture",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Les coordonnées de la Préfecture dont vous dépendez seront utiles pour effectuer des démarches relatives à l'automobile notamment : changer de nom sur la carte grise suite à une succession par exemple.",
    "location": "/Empreinte/Funerals Contact",
    "type": "organism_payer",
    "letter": true,
    "delay": "DANS LE MOIS",
    "perso": 0
  }, {
    "key": "poste",
    "name": "Poste",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Le service de distribution du courrier a lui-même une adresse postale. Le cas échéant, en cas de changement d'adresse, il faudra le prévenir de la nécessité de faire suivre le courrier.",
    "location": "/Empreinte/Funerals Contact",
    "type": "organism_payer",
    "letter": true,
    "delay": "DANS LE MOIS",
    "perso": 0
  }, {
    "key": "telecom",
    "name": "Opérateur Télécom",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Il faut prévenir l'opérateur qui détient les contrats téléphonique, internet, télévision... afin de les résilier ou les transférer sur un nouveau titulaire.",
    "location": "/Empreinte/Funerals Contact",
    "type": "organism_payer",
    "letter": true,
    "delay": "DANS LE MOIS",
    "perso": 0
  }, {
    "key": "energy",
    "name": "Fournisseur d'énergie",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Les contrats qui vous lient aux fournisseurs d'énergie doivent être résiliés ou mis à jour s'ils étaient établis au nom du défunt.",
    "location": "/Empreinte/Funerals Contact",
    "type": "organism_payer",
    "letter": true,
    "delay": "DANS LE MOIS",
    "perso": 0
  }, {
    "key": "water",
    "name": "Régie de l'eau",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Comme tous les fournisseurs d'énergie à votre domicile, les services des eaux ont conclu un contrat avec le propriétaire. Si vous l'êtes, les proches devront signaler votre décès pour résilier l'acte ou le mettre à jour.",
    "location": "/Empreinte/Funerals Contact",
    "type": "organism_payer",
    "letter": true,
    "delay": "DANS LE MOIS",
    "perso": 0
  }, {
    "key": "impot",
    "name": "Centre d'impot",
    "doctype": "com.empreinte.Fcontacts",
    "excerpt": "Quand la succession sera réglée, l'administration fiscale devra être prévenue pour prendre en compte les nouvelles situations financières. L’aide d’un notaire pour bien comprendre et suivre les événements s’avère souvent nécessaire.",
    "location": "/Empreinte/Funerals Contact",
    "type": "impot",
    "letter": true,
    "delay": "DANS LES 6 MOIS",
    "perso": 0
  }]
};

var getMeta = exports.getMeta = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var indexRef, result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return cozy.client.data.defineIndex(_constants.DOCTYPE_META, ['name']);

          case 3:
            indexRef = _context.sent;
            _context.next = 6;
            return cozy.client.data.query(indexRef, {
              selector: {
                "name": "onboarding"
              }
            });

          case 6:
            result = _context.sent;
            return _context.abrupt("return", result);

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](0);
            return _context.abrupt("return", []);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 10]]);
  }));

  return function getMeta() {
    return _ref.apply(this, arguments);
  };
}();

var getContactMeta = exports.getContactMeta = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var indexRef, result;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return cozy.client.data.defineIndex(_constants.DOCTYPE_META, ['name']);

          case 3:
            indexRef = _context2.sent;
            _context2.next = 6;
            return cozy.client.data.query(indexRef, {
              selector: {
                "name": "contactType"
              }
            });

          case 6:
            result = _context2.sent;
            return _context2.abrupt("return", result);

          case 10:
            _context2.prev = 10;
            _context2.t0 = _context2["catch"](0);
            return _context2.abrupt("return", []);

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[0, 10]]);
  }));

  return function getContactMeta() {
    return _ref2.apply(this, arguments);
  };
}();

var getCustomContactMeta = exports.getCustomContactMeta = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    var indexRef, result;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            _context3.next = 3;
            return cozy.client.data.defineIndex(_constants.DOCTYPE_META, ['name']);

          case 3:
            indexRef = _context3.sent;
            _context3.next = 6;
            return cozy.client.data.query(indexRef, {
              selector: {
                "name": "customContactType"
              }
            });

          case 6:
            result = _context3.sent;
            return _context3.abrupt("return", result);

          case 10:
            _context3.prev = 10;
            _context3.t0 = _context3["catch"](0);
            return _context3.abrupt("return", []);

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, undefined, [[0, 10]]);
  }));

  return function getCustomContactMeta() {
    return _ref3.apply(this, arguments);
  };
}();

var isAlreadyShown = exports.isAlreadyShown = function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
    var res, contacts, customContacts, value, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, e;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return getMeta();

          case 2:
            res = _context4.sent;
            _context4.next = 5;
            return getContactMeta();

          case 5:
            contacts = _context4.sent;
            _context4.next = 8;
            return getCustomContactMeta();

          case 8:
            customContacts = _context4.sent;


            console.log(res);
            console.log(contacts);

            if (!(contacts.length > 0)) {
              _context4.next = 16;
              break;
            }

            _context4.next = 14;
            return cozy.client.data.delete(_constants.DOCTYPE_META, contacts[0]);

          case 14:
            _context4.next = 16;
            return cozy.client.data.create(_constants.DOCTYPE_META, { name: "contactType", value: [typeContact] });

          case 16:
            console.log(customContacts);

            if (!(customContacts.length === 0)) {
              _context4.next = 20;
              break;
            }

            _context4.next = 20;
            return cozy.client.data.create(_constants.DOCTYPE_META, { name: "customContactType", value: [{
                "name": "Mes contacts custom",
                "location": "/Contacts custom",
                "types": []
              }] });

          case 20:
            if (!(res.length === 0)) {
              _context4.next = 24;
              break;
            }

            return _context4.abrupt("return", false);

          case 24:
            if (!(res.length === 1)) {
              _context4.next = 28;
              break;
            }

            return _context4.abrupt("return", res[0].value);

          case 28:
            value = res.shift();
            //remove all others info

            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context4.prev = 32;
            _iterator = res[Symbol.iterator]();

          case 34:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context4.next = 41;
              break;
            }

            e = _step.value;
            _context4.next = 38;
            return cozy.client.data.delete(_constants.DOCTYPE_META, e);

          case 38:
            _iteratorNormalCompletion = true;
            _context4.next = 34;
            break;

          case 41:
            _context4.next = 47;
            break;

          case 43:
            _context4.prev = 43;
            _context4.t0 = _context4["catch"](32);
            _didIteratorError = true;
            _iteratorError = _context4.t0;

          case 47:
            _context4.prev = 47;
            _context4.prev = 48;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 50:
            _context4.prev = 50;

            if (!_didIteratorError) {
              _context4.next = 53;
              break;
            }

            throw _iteratorError;

          case 53:
            return _context4.finish(50);

          case 54:
            return _context4.finish(47);

          case 55:
            return _context4.abrupt("return", value);

          case 56:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, undefined, [[32, 43, 47, 55], [48,, 50, 54]]);
  }));

  return function isAlreadyShown() {
    return _ref4.apply(this, arguments);
  };
}();

var markAsShown = exports.markAsShown = function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
    var shown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    var res, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, e, contacts;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return getMeta();

          case 2:
            res = _context5.sent;
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context5.prev = 6;
            _iterator2 = res[Symbol.iterator]();

          case 8:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context5.next = 15;
              break;
            }

            e = _step2.value;
            _context5.next = 12;
            return cozy.client.data.delete(_constants.DOCTYPE_META, e);

          case 12:
            _iteratorNormalCompletion2 = true;
            _context5.next = 8;
            break;

          case 15:
            _context5.next = 21;
            break;

          case 17:
            _context5.prev = 17;
            _context5.t0 = _context5["catch"](6);
            _didIteratorError2 = true;
            _iteratorError2 = _context5.t0;

          case 21:
            _context5.prev = 21;
            _context5.prev = 22;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 24:
            _context5.prev = 24;

            if (!_didIteratorError2) {
              _context5.next = 27;
              break;
            }

            throw _iteratorError2;

          case 27:
            return _context5.finish(24);

          case 28:
            return _context5.finish(21);

          case 29:
            _context5.next = 31;
            return cozy.client.data.create(_constants.DOCTYPE_META, { name: "onboarding", value: shown });

          case 31:
            _context5.next = 33;
            return getContactMeta();

          case 33:
            contacts = _context5.sent;
            _context5.next = 36;
            return cozy.client.data.create(_constants.DOCTYPE_META, { name: "contactType", value: [typeContact] });

          case 36:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, undefined, [[6, 17, 21, 29], [22,, 24, 28]]);
  }));

  return function markAsShown() {
    return _ref5.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./src/store/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _redux = __webpack_require__("./node_modules/redux/es/index.js");

var _tracker = __webpack_require__("./src/tracker.js");

var _reduxThunk = __webpack_require__("./node_modules/redux-thunk/lib/index.js");

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

var _reduxLogger = __webpack_require__("./node_modules/redux-logger/dist/redux-logger.js");

var _reduxLogger2 = _interopRequireDefault(_reduxLogger);

var _reducers = __webpack_require__("./src/reducers/index.js");

var _reducers2 = _interopRequireDefault(_reducers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var configureStore = function configureStore() {
    var middlewares = [_reduxThunk2.default, _reduxLogger2.default];

    if ((0, _tracker.shouldEnableTracking)() && (0, _tracker.getTracker)()) {
        middlewares.push((0, _tracker.createTrackerMiddleware)());
    }

    var store = (0, _redux.createStore)(_reducers2.default, (0, _redux.compose)(_redux.applyMiddleware.apply(undefined, middlewares)));

    return store;
};
// import eventTrackerMiddleware from '../middlewares/EventTracker'
exports.default = configureStore;

/***/ }),

/***/ "./src/store/tutorial.pdf":
/***/ (function(module, exports) {

module.exports = "data:application/pdf;base64,"

/***/ }),

/***/ "./src/styles/App.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/App.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./App.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./App.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/AssistanceList.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/AssistanceList.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./AssistanceList.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./AssistanceList.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/ConfirmModal.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/ConfirmModal.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./ConfirmModal.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./ConfirmModal.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/ContactRecallModal.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/ContactRecallModal.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./ContactRecallModal.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./ContactRecallModal.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Contacts.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Contacts.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Contacts.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Contacts.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/DataForm.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/DataForm.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./DataForm.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./DataForm.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/DataTable.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/DataTable.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./DataTable.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./DataTable.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Devis.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Devis.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Devis.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Devis.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/DirectoryPicker.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/DirectoryPicker.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./DirectoryPicker.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./DirectoryPicker.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Documents.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Documents.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Documents.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Documents.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Don.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Don.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Don.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Don.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Dossier.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Dossier.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Dossier.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Dossier.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/ElementList.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/ElementList.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./ElementList.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./ElementList.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Footer.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Footer.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Footer.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Footer.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/FuneralList.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/FuneralList.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./FuneralList.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./FuneralList.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/ImporterModal.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/ImporterModal.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./ImporterModal.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./ImporterModal.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Loader.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Loader.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Loader.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Loader.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Localisation.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Localisation.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Localisation.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Localisation.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Modal.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Modal.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Modal.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Modal.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Navigation.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Navigation.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Navigation.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Navigation.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Page.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Page.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Page.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Page.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Preferences.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Preferences.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Preferences.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Preferences.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Prestataire.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Prestataire.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Prestataire.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Prestataire.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/Retraite.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/Retraite.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Retraite.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./Retraite.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/ToolBoxOptions.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/ToolBoxOptions.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./ToolBoxOptions.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./ToolBoxOptions.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/buttons.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name]-[local]__[hash:base64:4]\",\"importLoaders\":1}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/index.js!./src/styles/buttons.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./buttons.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--4-2!../../node_modules/sass-loader/lib/loader.js!../../node_modules/postcss-loader/index.js!./buttons.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/styles/react-datepicker.css":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"importLoaders\":1}!./node_modules/postcss-loader/index.js!./src/styles/react-datepicker.css");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js??ref--3-2!../../node_modules/postcss-loader/index.js!./react-datepicker.css", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js??ref--3-2!../../node_modules/postcss-loader/index.js!./react-datepicker.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "./src/tools/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.searchFilesTag = exports.searchFilesName = exports.getDataElements = exports.forceFileDownload = exports.createOptionsFromArray = exports.findParentPath = exports.createFakePath = exports.exctractReelPath = exports.promiseTimeout = exports.isDirectory = exports.extractFileAttributes = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.string_to_slug = string_to_slug;

var _react = __webpack_require__("./node_modules/react/react.js");

var _react2 = _interopRequireDefault(_react);

var _constants = __webpack_require__("./src/constants/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var extractFileAttributes = exports.extractFileAttributes = function extractFileAttributes(f) {
    return Object.assign({}, f.attributes, {
        id: f._id,
        links: f.links
    });
};

var isDirectory = exports.isDirectory = function isDirectory(f) {
    return f && f.type && f.type === 'directory';
};

var promiseTimeout = exports.promiseTimeout = function promiseTimeout(time) {
    return new Promise(function (resolve, reject) {
        return setTimeout(resolve, time);
    });
};

var exctractReelPath = exports.exctractReelPath = function exctractReelPath() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';

    if (path.indexOf('/') !== 0) path = '/' + path;

    var folders = path.split('/');
    if (folders.length <= 1) {
        return _constants.ROOT_PATH + '/' + path;
    } else {
        var join = folders.splice(2).join('/');
        return _constants.ROOT_PATH + (join.length > 1 ? '/' + join : '');
    }
};

var createFakePath = exports.createFakePath = function createFakePath() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';

    if (path.indexOf('/') !== 0) path = '/' + path;

    var folders = path.split('/');
    if (folders.length <= 1) {
        return _constants.ROOT_NAME + '/' + path;
    } else {
        var join = folders.splice(2).join('/');
        return _constants.ROOT_NAME + (join.length > 1 ? '/' + join : '');
    }
};

var findParentPath = exports.findParentPath = function findParentPath(path) {
    if (path) {
        var folders = path.split('/');
        if (folders.length > 2) return folders.slice(0, folders.length - 1).join('/');
    }
};

var createOptionsFromArray = exports.createOptionsFromArray = function createOptionsFromArray(array) {
    return array.map(function (item, key) {
        return _react2.default.createElement(
            'option',
            { key: key, value: item },
            item
        );
    });
};

var forceFileDownload = exports.forceFileDownload = function forceFileDownload(href, filename) {
    var element = document.createElement('a');
    element.setAttribute('href', href);
    element.setAttribute('download', filename);
    element.style.display = 'none';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
};

var getDataElements = exports.getDataElements = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(doctype) {
        var addDoctypeInElements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var indexRef;
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.next = 2;
                        return cozy.client.data.defineIndex(doctype, ['_id']);

                    case 2:
                        indexRef = _context.sent;
                        _context.next = 5;
                        return cozy.client.data.query(indexRef, {
                            selector: {
                                "_id": {
                                    "$gt": null
                                }
                            }
                        }).then(function (list) {
                            if (addDoctypeInElements) return list.map(function (e) {
                                return _extends({}, e, { doctype: doctype });
                            });
                            return list;
                        });

                    case 5:
                        return _context.abrupt('return', _context.sent);

                    case 6:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined);
    }));

    return function getDataElements(_x3) {
        return _ref.apply(this, arguments);
    };
}();

var searchFilesName = exports.searchFilesName = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(query) {
        var indexRef, res;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.next = 2;
                        return cozy.client.data.defineIndex('io.cozy.files', ['_id', 'name']);

                    case 2:
                        indexRef = _context2.sent;
                        _context2.next = 5;
                        return cozy.client.data.query(indexRef, {
                            "selector": {
                                "_id": {
                                    $gt: null
                                },
                                "name": {
                                    $regex: '(?i)' + query
                                }
                            }
                        });

                    case 5:
                        res = _context2.sent;
                        return _context2.abrupt('return', res);

                    case 7:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, undefined);
    }));

    return function searchFilesName(_x5) {
        return _ref2.apply(this, arguments);
    };
}();

var searchFilesTag = exports.searchFilesTag = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(query) {
        var indexRef, res;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        _context3.next = 2;
                        return cozy.client.data.defineIndex('io.cozy.files', ['_id', 'tags']);

                    case 2:
                        indexRef = _context3.sent;
                        _context3.next = 5;
                        return cozy.client.data.query(indexRef, {
                            "selector": {
                                "_id": {
                                    $gt: null
                                },
                                "tags": {
                                    $in: [query]
                                }
                            }
                        });

                    case 5:
                        res = _context3.sent;
                        return _context3.abrupt('return', res);

                    case 7:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, undefined);
    }));

    return function searchFilesTag(_x6) {
        return _ref3.apply(this, arguments);
    };
}();

function string_to_slug(str) {
    str = str.replace(/^\s+|\s+$/g, ''); // trim
    str = str.toLowerCase();

    // remove accents, swap ñ for n, etc
    var from = "àáäâèéëêìíïîòóöôùúüûñç·/_,:;";
    var to = "aaaaeeeeiiiioooouuuunc------";
    for (var i = 0, l = from.length; i < l; i++) {
        str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));
    }

    str = str.replace(/[^a-z0-9 -]/g, '') // remove invalid chars
    .replace(/\s+/g, '-') // collapse whitespace and replace by -
    .replace(/-+/g, '-'); // collapse dashes

    return str;
}

/***/ }),

/***/ "./src/tracker.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/* global __PIWIK_TRACKER_URL__ __PIWIK_SITEID__ __PIWIK_DIMENSION_ID_APP__ */
/* global Piwik */

// Think of these functions as a singleton class with only static methods.
var trackerInstance = null;

/**
 * Tries to detect if tracking should be enabled or not, based on a `cozyTracking` attribute in the root dataset.
 * @returns {boolean} Undefined if it can't find the information, true/false otherwise.
 */
var shouldEnableTracking = exports.shouldEnableTracking = function shouldEnableTracking() {
    var root = document.querySelector('[role=application]');

    if (root && root.dataset) {
        var track = root.dataset.cozyTracking;

        if (track === '' || track === 'true') return true;else if (track === 'false') return false;
    }

    return undefined;
};

/**
 * Returns the instance of the piwik tracker, creating it on thee fly if required. All parameters are optionnal.
 * @param   {string}  trackerUrl             The URL of the piwik instance, without the php file name
 * @param   {number}  siteId                 The siteId to use for piwik
 * @param   {boolean} automaticallyConfigure = true Pass false to skip the automatic configuration
 * @param   {boolean} injectScript = false Whether or not the Piwik tracking script should be injected
 * @returns {object}  An instance of `PiwikReactRouter` on success, `null` if the creation fails (usually because of adblockers)
 */
var getTracker = exports.getTracker = function getTracker(trackerUrl, siteId) {
    var automaticallyConfigure = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var injectScript = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    if (trackerInstance !== null) return trackerInstance;

    try {
        // If `injectScript` is falsy, we rely on having the Piwik tracking script already on the page, otherwise the tracking will fail.
        // the next line is just there to throw in case the script is missing
        if (injectScript === false) Piwik.getTracker();

        var PiwikReactRouter = __webpack_require__("./node_modules/piwik-react-router/index.js");

        trackerInstance = PiwikReactRouter({
            url: trackerUrl || "https://piwik.cozycloud.cc",
            siteId: siteId || 14, // site id is required here
            injectScript: injectScript
        });

        // apply the default configuration
        if (automaticallyConfigure) configureTracker();

        return trackerInstance;
    } catch (err) {
        // this usually happens when there's an ad blocker
        console.warn(err);
        trackerInstance = null;
        return null;
    }
};

/**
 * Configures the base options for the tracker which will persist during the session.
 * @param   {object} options A map of options that can be configured.
 *                         {string} options.userId
 *                         {number} options.appDimensionId
 *                         {string} options.app
 *                         {number} options.heartbeat
 */
var configureTracker = exports.configureTracker = function configureTracker() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    // early out in case the tracker is not available
    if (trackerInstance === null) {
        // maybe we should throw an error here?
        return;
    }

    // compute the default values for options
    var userId = void 0;
    var appName = void 0;

    var root = document.querySelector('[role=application]');
    if (root && root.dataset) {
        appName = root.dataset.cozyAppName;
        userId = root.dataset.cozyDomain || '';

        var indexOfPort = userId.indexOf(':');
        if (indexOfPort >= 0) userId = userId.substring(0, indexOfPort);
    }

    // merge default options with what has been provided
    options = Object.assign({
        userId: userId,
        appDimensionId: 1,
        app: appName,
        heartbeat: 15
    }, options);

    // apply them
    if (parseInt(options.heartbeat) > 0) trackerInstance.push(['enableHeartBeatTimer', parseInt(options.heartbeat)]);
    trackerInstance.push(['setUserId', options.userId]);
    trackerInstance.push(['setCustomDimension', options.appDimensionId, options.app]);
};

/**
 * Returns a new middleware for redux, which will track events if the action has an `trackEvent` field, containing at least `category` and `action` fields.
 * @returns {function}
 */
var createTrackerMiddleware = exports.createTrackerMiddleware = function createTrackerMiddleware() {
    return function (store) {
        return function (next) {
            return function (action) {
                if (trackerInstance && action.trackEvent && action.trackEvent.category && action.trackEvent.action) {
                    trackerInstance.push(['trackEvent', action.trackEvent.category, action.trackEvent.action, action.trackEvent.name, action.trackEvent.value]);
                }

                return next(action);
            };
        };
    };
};

/**
 * Resets the tracker; disconnecting it from history and the middleware, if it was attached. *Please be aware*: if the tracker instance had been used outside of this library (in another middleware for example), further calls to the tracking server may still work.
 */
var resetTracker = exports.resetTracker = function resetTracker() {
    if (trackerInstance) {
        // stop tracking the history, if we were doing that
        trackerInstance.disconnectFromHistory();
        // we can't remove middlewares on the fly, but reseting the instance object will actually achieve that
        trackerInstance = null;
    }
};

/***/ }),

/***/ 0:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 2:
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

},["./src/index.js"]);
//# sourceMappingURL=app.js.map